
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	18 7f 00 20 d1 20 00 00 c9 6f 00 00 a5 20 00 00     ... . ...o... ..
  10:	a5 20 00 00 a5 20 00 00 a5 20 00 00 00 00 00 00     . ... ... ......
	...
  2c:	49 1c 00 00 a5 20 00 00 00 00 00 00 01 1c 00 00     I.... ..........
  3c:	a5 20 00 00                                         . ..

00000040 <_irq_vector_table>:
  40:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  50:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  60:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  70:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  80:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  90:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  a0:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  b0:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  c0:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  d0:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  e0:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................
  f0:	c5 1c 00 00 c5 1c 00 00 c5 1c 00 00 c5 1c 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_BOOT_MAX_IMG_SECTORS+0xd8>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_BOOT_MAX_IMG_SECTORS+0x4a>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_BOOT_MAX_IMG_SECTORS+0xd0>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_BOOT_MAX_IMG_SECTORS+0x1a>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_BOOT_MAX_IMG_SECTORS+0x1a>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_BOOT_MAX_IMG_SECTORS+0xd4>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_BOOT_MAX_IMG_SECTORS+0x46>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_BOOT_MAX_IMG_SECTORS+0x46>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_BOOT_MAX_IMG_SECTORS+0xc8>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_BOOT_MAX_IMG_SECTORS+0x92>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_BOOT_MAX_IMG_SECTORS+0x92>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_BOOT_MAX_IMG_SECTORS+0xcc>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_BOOT_MAX_IMG_SECTORS+0xbe>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_BOOT_MAX_IMG_SECTORS+0xbe>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_BOOT_MAX_IMG_SECTORS+0x92>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_BOOT_MAX_IMG_SECTORS+0xbe>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_BOOT_MAX_IMG_SECTORS+0x1a>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_BOOT_MAX_IMG_SECTORS+0x46>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_BOOT_MAX_IMG_SECTORS+0xe8>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_BOOT_MAX_IMG_SECTORS+0xe2>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_BOOT_MAX_IMG_SECTORS+0xf6>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     3dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3de:	4b30      	ldr	r3, [pc, #192]	; (4a0 <FIH_LABEL_FIH_CALL_END_262+0x78>)
     3e0:	4a30      	ldr	r2, [pc, #192]	; (4a4 <FIH_LABEL_FIH_CALL_END_262+0x7c>)
     3e2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     3e6:	4830      	ldr	r0, [pc, #192]	; (4a8 <FIH_LABEL_FIH_CALL_END_262+0x80>)
     3e8:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     3ec:	2149      	movs	r1, #73	; 0x49
     3ee:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     3f2:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     3f6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     3fa:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     3fe:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     402:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     406:	f006 fd4a 	bl	6e9e <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     40a:	f000 f885 	bl	518 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && DT_HAS_CHOSEN(zephyr_flash_controller))
    if (!flash_device_get_binding(DT_LABEL(DT_CHOSEN(zephyr_flash_controller)))) {
     40e:	4827      	ldr	r0, [pc, #156]	; (4ac <FIH_LABEL_FIH_CALL_END_262+0x84>)
     410:	f000 f85c 	bl	4cc <flash_device_get_binding>
     414:	b928      	cbnz	r0, 422 <FIH_LABEL_FIH_CALL_START_249>
        BOOT_LOG_ERR("Flash device %s not found",
     416:	4a25      	ldr	r2, [pc, #148]	; (4ac <FIH_LABEL_FIH_CALL_END_262+0x84>)
     418:	4825      	ldr	r0, [pc, #148]	; (4b0 <FIH_LABEL_FIH_CALL_END_262+0x88>)
     41a:	2145      	movs	r1, #69	; 0x45
     41c:	f006 fd3f 	bl	6e9e <z_log_minimal_printk>
		     DT_LABEL(DT_CHOSEN(zephyr_flash_controller)));
        while (1)
     420:	e7fe      	b.n	420 <CONFIG_MPSL_WORK_STACK_SIZE+0x20>

00000422 <FIH_LABEL_FIH_CALL_START_249>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     422:	a801      	add	r0, sp, #4
     424:	f000 fcd4 	bl	dd0 <boot_go>

00000428 <FIH_LABEL_FIH_CALL_END_262>:
        timeout_in_ms = 1;
    }
   boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     428:	4b22      	ldr	r3, [pc, #136]	; (4b4 <FIH_LABEL_FIH_CALL_END_262+0x8c>)
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	4283      	cmp	r3, r0
     42e:	d004      	beq.n	43a <FIH_LABEL_FIH_CALL_END_262+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     430:	4821      	ldr	r0, [pc, #132]	; (4b8 <FIH_LABEL_FIH_CALL_END_262+0x90>)
     432:	2145      	movs	r1, #69	; 0x45
     434:	f006 fd33 	bl	6e9e <z_log_minimal_printk>
        FIH_PANIC;
     438:	e7fe      	b.n	438 <FIH_LABEL_FIH_CALL_END_262+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     43a:	9a03      	ldr	r2, [sp, #12]
     43c:	481f      	ldr	r0, [pc, #124]	; (4bc <FIH_LABEL_FIH_CALL_END_262+0x94>)
     43e:	2149      	movs	r1, #73	; 0x49
     440:	f006 fd2d 	bl	6e9e <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     444:	481e      	ldr	r0, [pc, #120]	; (4c0 <FIH_LABEL_FIH_CALL_END_262+0x98>)
     446:	2149      	movs	r1, #73	; 0x49
     448:	f006 fd29 	bl	6e9e <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     44c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     450:	2000      	movs	r0, #0
     452:	f007 f9f2 	bl	783a <fprotect_area>

    if (rc != 0) {
     456:	b120      	cbz	r0, 462 <FIH_LABEL_FIH_CALL_END_262+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     458:	481a      	ldr	r0, [pc, #104]	; (4c4 <FIH_LABEL_FIH_CALL_END_262+0x9c>)
     45a:	2145      	movs	r1, #69	; 0x45
     45c:	f006 fd1f 	bl	6e9e <z_log_minimal_printk>
        while (1)
     460:	e7fe      	b.n	460 <FIH_LABEL_FIH_CALL_END_262+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     462:	4669      	mov	r1, sp
     464:	f89d 0008 	ldrb.w	r0, [sp, #8]
     468:	f000 f83c 	bl	4e4 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     46c:	9b00      	ldr	r3, [sp, #0]
     46e:	9c03      	ldr	r4, [sp, #12]
     470:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     472:	9b01      	ldr	r3, [sp, #4]
     474:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     476:	f000 ff47 	bl	1308 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     47a:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     47c:	f04f 0220 	mov.w	r2, #32
     480:	f3ef 8311 	mrs	r3, BASEPRI
     484:	f382 8812 	msr	BASEPRI_MAX, r2
     488:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     48c:	5963      	ldr	r3, [r4, r5]
     48e:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     492:	6873      	ldr	r3, [r6, #4]
     494:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     496:	480c      	ldr	r0, [pc, #48]	; (4c8 <FIH_LABEL_FIH_CALL_END_262+0xa0>)
     498:	2145      	movs	r1, #69	; 0x45
     49a:	f006 fd00 	bl	6e9e <z_log_minimal_printk>
    while (1)
     49e:	e7fe      	b.n	49e <FIH_LABEL_FIH_CALL_END_262+0x76>
     4a0:	40010000 	.word	0x40010000
     4a4:	6e524635 	.word	0x6e524635
     4a8:	00009e0c 	.word	0x00009e0c
     4ac:	00009e25 	.word	0x00009e25
     4b0:	00009e38 	.word	0x00009e38
     4b4:	2000034c 	.word	0x2000034c
     4b8:	00009e57 	.word	0x00009e57
     4bc:	00009e7a 	.word	0x00009e7a
     4c0:	00009ea9 	.word	0x00009ea9
     4c4:	00009ece 	.word	0x00009ece
     4c8:	00009f01 	.word	0x00009f01

000004cc <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     4cc:	b510      	push	{r4, lr}
    if (!flash_dev) {
     4ce:	4c04      	ldr	r4, [pc, #16]	; (4e0 <flash_device_get_binding+0x14>)
     4d0:	6823      	ldr	r3, [r4, #0]
     4d2:	b913      	cbnz	r3, 4da <flash_device_get_binding+0xe>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     4d4:	f004 ffba 	bl	544c <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     4d8:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     4da:	6820      	ldr	r0, [r4, #0]
     4dc:	bd10      	pop	{r4, pc}
     4de:	bf00      	nop
     4e0:	20000348 	.word	0x20000348

000004e4 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     4e4:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     4e6:	4602      	mov	r2, r0
     4e8:	b138      	cbz	r0, 4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     4ea:	4805      	ldr	r0, [pc, #20]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4ec:	2300      	movs	r3, #0
     4ee:	2145      	movs	r1, #69	; 0x45
     4f0:	f006 fcd5 	bl	6e9e <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     4f4:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     4f8:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     4fa:	6008      	str	r0, [r1, #0]
    return 0;
     4fc:	e7fc      	b.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4fe:	bf00      	nop
     500:	00009f24 	.word	0x00009f24

00000504 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
     504:	2902      	cmp	r1, #2
     506:	bf9a      	itte	ls
     508:	4b02      	ldrls	r3, [pc, #8]	; (514 <flash_area_id_from_multi_image_slot+0x10>)
     50a:	5658      	ldrsbls	r0, [r3, r1]
{
     50c:	f06f 0015 	mvnhi.w	r0, #21
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
     510:	4770      	bx	lr
     512:	bf00      	nop
     514:	00009f4a 	.word	0x00009f4a

00000518 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     518:	4802      	ldr	r0, [pc, #8]	; (524 <os_heap_init+0xc>)
     51a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     51e:	f003 be73 	b.w	4208 <mbedtls_memory_buffer_alloc_init>
     522:	bf00      	nop
     524:	20003a02 	.word	0x20003a02

00000528 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     52c:	b0f9      	sub	sp, #484	; 0x1e4
     52e:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     532:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 71c <FIH_LABEL_FIH_CALL_END_646+0x2e>
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     536:	a838      	add	r0, sp, #224	; 0xe0
     538:	f8da 6000 	ldr.w	r6, [sl]
{
     53c:	4617      	mov	r7, r2
     53e:	461d      	mov	r5, r3
     540:	f008 fd25 	bl	8f8e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     544:	2100      	movs	r1, #0
     546:	a838      	add	r0, sp, #224	; 0xe0
     548:	f003 ff6e 	bl	4428 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     54c:	b13c      	cbz	r4, 55e <bootutil_img_validate+0x36>
     54e:	f1b8 0f00 	cmp.w	r8, #0
     552:	dd04      	ble.n	55e <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     554:	4642      	mov	r2, r8
     556:	4621      	mov	r1, r4
     558:	a838      	add	r0, sp, #224	; 0xe0
     55a:	f008 fd1c 	bl	8f96 <mbedtls_sha256_update>
    size += hdr->ih_protect_tlv_size;
     55e:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     560:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     564:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     566:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
     568:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     56c:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     56e:	45c8      	cmp	r8, r9
     570:	d84b      	bhi.n	60a <FIH_LABEL_FIH_CALL_END_311+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     572:	a90d      	add	r1, sp, #52	; 0x34
     574:	a838      	add	r0, sp, #224	; 0xe0
     576:	f008 fd4b 	bl	9010 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     57a:	9b86      	ldr	r3, [sp, #536]	; 0x218
     57c:	b123      	cbz	r3, 588 <bootutil_img_validate+0x60>
        memcpy(out_hash, hash, 32);
     57e:	2220      	movs	r2, #32
     580:	a90d      	add	r1, sp, #52	; 0x34
     582:	4618      	mov	r0, r3
     584:	f006 fd55 	bl	7032 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     588:	2300      	movs	r3, #0
     58a:	9300      	str	r3, [sp, #0]
     58c:	462a      	mov	r2, r5
     58e:	f64f 73ff 	movw	r3, #65535	; 0xffff
     592:	4639      	mov	r1, r7
     594:	a807      	add	r0, sp, #28
     596:	f006 f8df 	bl	6758 <bootutil_tlv_iter_begin>
    if (rc) {
     59a:	4604      	mov	r4, r0
     59c:	2800      	cmp	r0, #0
     59e:	f040 80b6 	bne.w	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5a2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 720 <FIH_LABEL_FIH_CALL_END_646+0x32>
    int sha256_valid = 0;
     5a6:	4680      	mov	r8, r0
    int key_id = -1;
     5a8:	f04f 37ff 	mov.w	r7, #4294967295
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5ac:	f10d 0316 	add.w	r3, sp, #22
     5b0:	aa05      	add	r2, sp, #20
     5b2:	a906      	add	r1, sp, #24
     5b4:	a807      	add	r0, sp, #28
     5b6:	f006 f91b 	bl	67f0 <bootutil_tlv_iter_next>
        if (rc < 0) {
     5ba:	1e04      	subs	r4, r0, #0
     5bc:	f2c0 80a7 	blt.w	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
        } else if (rc > 0) {
     5c0:	f040 8098 	bne.w	6f4 <FIH_LABEL_FIH_CALL_END_646+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5c4:	f8bd b016 	ldrh.w	fp, [sp, #22]
     5c8:	f1bb 0f10 	cmp.w	fp, #16
     5cc:	d134      	bne.n	638 <FIH_LABEL_FIH_CALL_END_311+0x3e>
            if (len != sizeof(hash)) {
     5ce:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     5d2:	f1b8 0f20 	cmp.w	r8, #32
     5d6:	f040 8098 	bne.w	70a <FIH_LABEL_FIH_CALL_END_646+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5da:	9906      	ldr	r1, [sp, #24]
     5dc:	4643      	mov	r3, r8
     5de:	aa38      	add	r2, sp, #224	; 0xe0
     5e0:	4628      	mov	r0, r5
     5e2:	f006 fc6a 	bl	6eba <flash_area_read>
            if (rc) {
     5e6:	4604      	mov	r4, r0
     5e8:	2800      	cmp	r0, #0
     5ea:	f040 8090 	bne.w	70e <FIH_LABEL_FIH_CALL_END_646+0x20>

000005ee <FIH_LABEL_FIH_CALL_START_292>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5ee:	4642      	mov	r2, r8
     5f0:	a938      	add	r1, sp, #224	; 0xe0
     5f2:	a80d      	add	r0, sp, #52	; 0x34
     5f4:	f006 f947 	bl	6886 <boot_fih_memequal>
     5f8:	4604      	mov	r4, r0

000005fa <FIH_LABEL_FIH_CALL_END_311>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     5fa:	4b4a      	ldr	r3, [pc, #296]	; (724 <FIH_LABEL_FIH_CALL_END_646+0x36>)
     5fc:	681b      	ldr	r3, [r3, #0]
     5fe:	4283      	cmp	r3, r0
     600:	f040 8085 	bne.w	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
            sha256_valid = 1;
     604:	f04f 0801 	mov.w	r8, #1
     608:	e7d0      	b.n	5ac <bootutil_img_validate+0x84>
        blk_sz = size - off;
     60a:	f8dd b20c 	ldr.w	fp, [sp, #524]	; 0x20c
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     60e:	9a82      	ldr	r2, [sp, #520]	; 0x208
        blk_sz = size - off;
     610:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     614:	459b      	cmp	fp, r3
     616:	bf28      	it	cs
     618:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     61a:	465b      	mov	r3, fp
     61c:	4649      	mov	r1, r9
     61e:	4628      	mov	r0, r5
     620:	f006 fc4b 	bl	6eba <flash_area_read>
        if (rc) {
     624:	4604      	mov	r4, r0
     626:	2800      	cmp	r0, #0
     628:	d171      	bne.n	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     62a:	9982      	ldr	r1, [sp, #520]	; 0x208
     62c:	465a      	mov	r2, fp
     62e:	a838      	add	r0, sp, #224	; 0xe0
     630:	f008 fcb1 	bl	8f96 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     634:	44d9      	add	r9, fp
     636:	e79a      	b.n	56e <bootutil_img_validate+0x46>
        } else if (type == IMAGE_TLV_KEYHASH) {
     638:	f1bb 0f01 	cmp.w	fp, #1
     63c:	d136      	bne.n	6ac <FIH_LABEL_FIH_CALL_END_311+0xb2>
            if (len > 32) {
     63e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     642:	2b20      	cmp	r3, #32
     644:	d861      	bhi.n	70a <FIH_LABEL_FIH_CALL_END_646+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     646:	9906      	ldr	r1, [sp, #24]
     648:	aa38      	add	r2, sp, #224	; 0xe0
     64a:	4628      	mov	r0, r5
     64c:	f006 fc35 	bl	6eba <flash_area_read>
            if (rc) {
     650:	4604      	mov	r4, r0
     652:	2800      	cmp	r0, #0
     654:	d15b      	bne.n	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
            key_id = bootutil_find_key(buf, len);
     656:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     65a:	f1bb 0f20 	cmp.w	fp, #32
     65e:	d903      	bls.n	668 <FIH_LABEL_FIH_CALL_END_311+0x6e>
        return -1;
     660:	f04f 34ff 	mov.w	r4, #4294967295
            key_id = bootutil_find_key(buf, len);
     664:	4627      	mov	r7, r4
     666:	e7a1      	b.n	5ac <bootutil_img_validate+0x84>
    for (i = 0; i < bootutil_key_cnt; i++) {
     668:	f8d9 3000 	ldr.w	r3, [r9]
     66c:	4f2e      	ldr	r7, [pc, #184]	; (728 <FIH_LABEL_FIH_CALL_END_646+0x3a>)
     66e:	9303      	str	r3, [sp, #12]
     670:	9b03      	ldr	r3, [sp, #12]
     672:	429c      	cmp	r4, r3
     674:	daf4      	bge.n	660 <FIH_LABEL_FIH_CALL_END_311+0x66>
    mbedtls_sha256_init(ctx);
     676:	a81d      	add	r0, sp, #116	; 0x74
     678:	f008 fc89 	bl	8f8e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     67c:	2100      	movs	r1, #0
     67e:	a81d      	add	r0, sp, #116	; 0x74
     680:	f003 fed2 	bl	4428 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     684:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     686:	f857 1b08 	ldr.w	r1, [r7], #8
     68a:	6812      	ldr	r2, [r2, #0]
     68c:	a81d      	add	r0, sp, #116	; 0x74
     68e:	f008 fc82 	bl	8f96 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     692:	a915      	add	r1, sp, #84	; 0x54
     694:	a81d      	add	r0, sp, #116	; 0x74
     696:	f008 fcbb 	bl	9010 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     69a:	465a      	mov	r2, fp
     69c:	a938      	add	r1, sp, #224	; 0xe0
     69e:	a815      	add	r0, sp, #84	; 0x54
     6a0:	f006 fcb6 	bl	7010 <memcmp>
     6a4:	2800      	cmp	r0, #0
     6a6:	d0dd      	beq.n	664 <FIH_LABEL_FIH_CALL_END_311+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6a8:	3401      	adds	r4, #1
     6aa:	e7e1      	b.n	670 <FIH_LABEL_FIH_CALL_END_311+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     6ac:	f1bb 0f20 	cmp.w	fp, #32
     6b0:	f47f af7c 	bne.w	5ac <bootutil_img_validate+0x84>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6b4:	1c7b      	adds	r3, r7, #1
     6b6:	f43f af79 	beq.w	5ac <bootutil_img_validate+0x84>
     6ba:	f8d9 3000 	ldr.w	r3, [r9]
     6be:	42bb      	cmp	r3, r7
     6c0:	dd15      	ble.n	6ee <FIH_LABEL_FIH_CALL_END_646>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     6ca:	d11e      	bne.n	70a <FIH_LABEL_FIH_CALL_END_646+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6cc:	9906      	ldr	r1, [sp, #24]
     6ce:	aa38      	add	r2, sp, #224	; 0xe0
     6d0:	4628      	mov	r0, r5
     6d2:	f006 fbf2 	bl	6eba <flash_area_read>
            if (rc) {
     6d6:	4604      	mov	r4, r0
     6d8:	b9c8      	cbnz	r0, 70e <FIH_LABEL_FIH_CALL_END_646+0x20>

000006da <FIH_LABEL_FIH_CALL_START_624>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6da:	b2ff      	uxtb	r7, r7
     6dc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6e0:	9700      	str	r7, [sp, #0]
     6e2:	aa38      	add	r2, sp, #224	; 0xe0
     6e4:	4659      	mov	r1, fp
     6e6:	a80d      	add	r0, sp, #52	; 0x34
     6e8:	f000 f820 	bl	72c <bootutil_verify_sig>
     6ec:	4606      	mov	r6, r0

000006ee <FIH_LABEL_FIH_CALL_END_646>:
                key_id = -1;
     6ee:	f04f 37ff 	mov.w	r7, #4294967295
     6f2:	e75b      	b.n	5ac <bootutil_img_validate+0x84>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     6f4:	f1b8 0f00 	cmp.w	r8, #0
     6f8:	d00d      	beq.n	716 <FIH_LABEL_FIH_CALL_END_646+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     6fa:	4b0a      	ldr	r3, [pc, #40]	; (724 <FIH_LABEL_FIH_CALL_END_646+0x36>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	42b3      	cmp	r3, r6
     700:	d001      	beq.n	706 <FIH_LABEL_FIH_CALL_END_646+0x18>
        return FIH_FAILURE;
     702:	f8da 6000 	ldr.w	r6, [sl]
                rc = -1;
     706:	4634      	mov	r4, r6
     708:	e001      	b.n	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
     70a:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     70e:	4620      	mov	r0, r4
     710:	b079      	add	sp, #484	; 0x1e4
     712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     716:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     718:	e7f9      	b.n	70e <FIH_LABEL_FIH_CALL_END_646+0x20>
     71a:	bf00      	nop
     71c:	20000000 	.word	0x20000000
     720:	00009a38 	.word	0x00009a38
     724:	2000034c 	.word	0x2000034c
     728:	00009a3c 	.word	0x00009a3c

0000072c <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     730:	4698      	mov	r8, r3
     732:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     736:	4b6b      	ldr	r3, [pc, #428]	; (8e4 <FIH_LABEL_FIH_CALL_END_672+0x4>)
{
     738:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     73c:	681d      	ldr	r5, [r3, #0]
{
     73e:	4607      	mov	r7, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     740:	a827      	add	r0, sp, #156	; 0x9c
{
     742:	468a      	mov	sl, r1
     744:	4691      	mov	r9, r2
    mbedtls_rsa_init(&ctx);
     746:	f008 fbdf 	bl	8f08 <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     74a:	4b67      	ldr	r3, [pc, #412]	; (8e8 <FIH_LABEL_FIH_CALL_END_672+0x8>)
     74c:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
     750:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     752:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     756:	aa8a      	add	r2, sp, #552	; 0x228
    end = cp + *bootutil_keys[key_id].len;
     758:	685b      	ldr	r3, [r3, #4]
     75a:	6819      	ldr	r1, [r3, #0]
     75c:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     75e:	2330      	movs	r3, #48	; 0x30
     760:	4621      	mov	r1, r4
     762:	a802      	add	r0, sp, #8
     764:	f007 f966 	bl	7a34 <mbedtls_asn1_get_tag>
     768:	bb68      	cbnz	r0, 7c6 <bootutil_verify_sig+0x9a>
    if (*p + len != end) {
     76a:	9b02      	ldr	r3, [sp, #8]
     76c:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     76e:	4413      	add	r3, r2
     770:	429c      	cmp	r4, r3
     772:	d128      	bne.n	7c6 <bootutil_verify_sig+0x9a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     774:	aa29      	add	r2, sp, #164	; 0xa4
     776:	4621      	mov	r1, r4
     778:	a802      	add	r0, sp, #8
     77a:	f007 f96f 	bl	7a5c <mbedtls_asn1_get_mpi>
     77e:	bb10      	cbnz	r0, 7c6 <bootutil_verify_sig+0x9a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     780:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     784:	465a      	mov	r2, fp
     786:	4621      	mov	r1, r4
     788:	a802      	add	r0, sp, #8
     78a:	f007 f967 	bl	7a5c <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     78e:	4606      	mov	r6, r0
     790:	b9c8      	cbnz	r0, 7c6 <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     792:	a829      	add	r0, sp, #164	; 0xa4
     794:	f007 fcc2 	bl	811c <mbedtls_mpi_size>
    if (*p != end) {
     798:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     79a:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     79c:	429c      	cmp	r4, r3
     79e:	d112      	bne.n	7c6 <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     7a0:	e9cd 6b00 	strd	r6, fp, [sp]
     7a4:	4633      	mov	r3, r6
     7a6:	4632      	mov	r2, r6
     7a8:	a929      	add	r1, sp, #164	; 0xa4
     7aa:	a827      	add	r0, sp, #156	; 0x9c
     7ac:	f008 fb68 	bl	8e80 <mbedtls_rsa_import>
    if (rc != 0) {
     7b0:	b948      	cbnz	r0, 7c6 <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     7b2:	a827      	add	r0, sp, #156	; 0x9c
     7b4:	f003 fdd6 	bl	4364 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     7b8:	b928      	cbnz	r0, 7c6 <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     7ba:	a829      	add	r0, sp, #164	; 0xa4
     7bc:	f007 fcae 	bl	811c <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     7c0:	4580      	cmp	r8, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     7c2:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     7c4:	d00a      	beq.n	7dc <FIH_LABEL_FIH_CALL_START_226>
        mbedtls_rsa_free(&ctx);
     7c6:	a827      	add	r0, sp, #156	; 0x9c
     7c8:	f008 fba8 	bl	8f1c <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     7cc:	a827      	add	r0, sp, #156	; 0x9c
     7ce:	f008 fba5 	bl	8f1c <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     7d2:	4628      	mov	r0, r5
     7d4:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007dc <FIH_LABEL_FIH_CALL_START_226>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     7dc:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     7e0:	d002      	beq.n	7e8 <FIH_LABEL_FIH_CALL_END_287+0x2>
     7e2:	f04f 35ff 	mov.w	r5, #4294967295

000007e6 <FIH_LABEL_FIH_CALL_END_287>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     7e6:	e7f1      	b.n	7cc <bootutil_verify_sig+0xa0>
    if (hlen != PSS_HLEN) {
     7e8:	f1ba 0f20 	cmp.w	sl, #32
     7ec:	d1f9      	bne.n	7e2 <FIH_LABEL_FIH_CALL_START_226+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     7ee:	aa8a      	add	r2, sp, #552	; 0x228
     7f0:	4649      	mov	r1, r9
     7f2:	a827      	add	r0, sp, #156	; 0x9c
     7f4:	f003 fdda 	bl	43ac <mbedtls_rsa_public>
     7f8:	4604      	mov	r4, r0
     7fa:	2800      	cmp	r0, #0
     7fc:	d1f1      	bne.n	7e2 <FIH_LABEL_FIH_CALL_START_226+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7fe:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     802:	2bbc      	cmp	r3, #188	; 0xbc
     804:	d1ed      	bne.n	7e2 <FIH_LABEL_FIH_CALL_START_226+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     806:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
     80a:	9003      	str	r0, [sp, #12]
    int count = PSS_MASK_LEN;
     80c:	26df      	movs	r6, #223	; 0xdf
     80e:	4645      	mov	r5, r8
    mbedtls_sha256_init(ctx);
     810:	a80c      	add	r0, sp, #48	; 0x30
     812:	f008 fbbc 	bl	8f8e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     816:	2100      	movs	r1, #0
     818:	a80c      	add	r0, sp, #48	; 0x30
     81a:	f003 fe05 	bl	4428 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     81e:	2220      	movs	r2, #32
     820:	f20d 3107 	addw	r1, sp, #775	; 0x307
     824:	a80c      	add	r0, sp, #48	; 0x30
     826:	f008 fbb6 	bl	8f96 <mbedtls_sha256_update>
     82a:	2204      	movs	r2, #4
     82c:	a903      	add	r1, sp, #12
     82e:	a80c      	add	r0, sp, #48	; 0x30
     830:	f008 fbb1 	bl	8f96 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     834:	a904      	add	r1, sp, #16
     836:	a80c      	add	r0, sp, #48	; 0x30
     838:	f008 fbea 	bl	9010 <mbedtls_sha256_finish>
        if (bytes > count)
     83c:	2e1f      	cmp	r6, #31
        counter[3]++;
     83e:	f89d 300f 	ldrb.w	r3, [sp, #15]
        if (bytes > count)
     842:	bfd4      	ite	le
     844:	46b1      	movle	r9, r6
     846:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     84a:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     84c:	4640      	mov	r0, r8
     84e:	464a      	mov	r2, r9
     850:	a904      	add	r1, sp, #16
        count -= bytes;
     852:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     856:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     85a:	f006 fbea 	bl	7032 <memcpy>
    while (count > 0) {
     85e:	2e00      	cmp	r6, #0
        mask += bytes;
     860:	44c8      	add	r8, r9
    while (count > 0) {
     862:	dcd5      	bgt.n	810 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x10>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     864:	4628      	mov	r0, r5
     866:	ae8a      	add	r6, sp, #552	; 0x228
     868:	462a      	mov	r2, r5
     86a:	23df      	movs	r3, #223	; 0xdf
        db_mask[i] ^= em[i];
     86c:	7811      	ldrb	r1, [r2, #0]
     86e:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     872:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     874:	ea81 010c 	eor.w	r1, r1, ip
     878:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     87c:	d1f6      	bne.n	86c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x6c>
    db_mask[0] &= 0x7F;
     87e:	782b      	ldrb	r3, [r5, #0]
     880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     884:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     886:	f810 6b01 	ldrb.w	r6, [r0], #1
     88a:	2e00      	cmp	r6, #0
     88c:	d1a9      	bne.n	7e2 <FIH_LABEL_FIH_CALL_START_226+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     88e:	3401      	adds	r4, #1
     890:	2cbe      	cmp	r4, #190	; 0xbe
     892:	d1f8      	bne.n	886 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x86>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     894:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     898:	2b01      	cmp	r3, #1
     89a:	d1a2      	bne.n	7e2 <FIH_LABEL_FIH_CALL_START_226+0x6>
    mbedtls_sha256_init(ctx);
     89c:	a80c      	add	r0, sp, #48	; 0x30
     89e:	f008 fb76 	bl	8f8e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8a2:	4631      	mov	r1, r6
     8a4:	a80c      	add	r0, sp, #48	; 0x30
     8a6:	f003 fdbf 	bl	4428 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8aa:	4910      	ldr	r1, [pc, #64]	; (8ec <FIH_LABEL_FIH_CALL_END_672+0xc>)
     8ac:	2208      	movs	r2, #8
     8ae:	a80c      	add	r0, sp, #48	; 0x30
     8b0:	f008 fb71 	bl	8f96 <mbedtls_sha256_update>
     8b4:	4639      	mov	r1, r7
     8b6:	2220      	movs	r2, #32
     8b8:	a80c      	add	r0, sp, #48	; 0x30
     8ba:	f008 fb6c 	bl	8f96 <mbedtls_sha256_update>
     8be:	2220      	movs	r2, #32
     8c0:	f20d 2107 	addw	r1, sp, #519	; 0x207
     8c4:	a80c      	add	r0, sp, #48	; 0x30
     8c6:	f008 fb66 	bl	8f96 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     8ca:	a904      	add	r1, sp, #16
     8cc:	a80c      	add	r0, sp, #48	; 0x30
     8ce:	f008 fb9f 	bl	9010 <mbedtls_sha256_finish>

000008d2 <FIH_LABEL_FIH_CALL_START_651>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     8d2:	2220      	movs	r2, #32
     8d4:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8d8:	a804      	add	r0, sp, #16
     8da:	f005 ffd4 	bl	6886 <boot_fih_memequal>
     8de:	4605      	mov	r5, r0

000008e0 <FIH_LABEL_FIH_CALL_END_672>:
    if (rc) {
     8e0:	e781      	b.n	7e6 <FIH_LABEL_FIH_CALL_END_287>
     8e2:	bf00      	nop
     8e4:	20000000 	.word	0x20000000
     8e8:	00009a3c 	.word	0x00009a3c
     8ec:	00009f4d 	.word	0x00009f4d

000008f0 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8f4:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     8f6:	f240 3307 	movw	r3, #775	; 0x307
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     8fa:	f8df 8070 	ldr.w	r8, [pc, #112]	; 96c <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     8fe:	f8ad 3000 	strh.w	r3, [sp]
{
     902:	460d      	mov	r5, r1
     904:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     906:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     908:	f817 0b01 	ldrb.w	r0, [r7], #1
     90c:	a901      	add	r1, sp, #4
     90e:	f001 f855 	bl	19bc <flash_area_open>
        if (rc != 0) {
     912:	4604      	mov	r4, r0
     914:	b9a0      	cbnz	r0, 940 <boot_read_swap_size+0x50>
        off = boot_magic_off(*fap);
     916:	9801      	ldr	r0, [sp, #4]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     918:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     91a:	2310      	movs	r3, #16
     91c:	aa02      	add	r2, sp, #8
     91e:	3910      	subs	r1, #16
     920:	f006 facb 	bl	6eba <flash_area_read>
     924:	4604      	mov	r4, r0
        flash_area_close(*fap);
     926:	9801      	ldr	r0, [sp, #4]
     928:	f006 fac6 	bl	6eb8 <flash_area_close>
        if (rc != 0) {
     92c:	b944      	cbnz	r4, 940 <boot_read_swap_size+0x50>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     92e:	2210      	movs	r2, #16
     930:	4641      	mov	r1, r8
     932:	a802      	add	r0, sp, #8
     934:	f006 fb6c 	bl	7010 <memcmp>
     938:	b140      	cbz	r0, 94c <boot_read_swap_size+0x5c>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     93a:	b12e      	cbz	r6, 948 <boot_read_swap_size+0x58>
    return -1;
     93c:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     940:	4620      	mov	r0, r4
     942:	b006      	add	sp, #24
     944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     948:	2601      	movs	r6, #1
     94a:	e7dd      	b.n	908 <boot_read_swap_size+0x18>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     94c:	9801      	ldr	r0, [sp, #4]
     94e:	f006 ff88 	bl	7862 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     952:	2304      	movs	r3, #4
     954:	f1a0 0108 	sub.w	r1, r0, #8
     958:	462a      	mov	r2, r5
     95a:	9801      	ldr	r0, [sp, #4]
     95c:	f006 faad 	bl	6eba <flash_area_read>
     960:	4604      	mov	r4, r0
        flash_area_close(fap);
     962:	9801      	ldr	r0, [sp, #4]
     964:	f006 faa8 	bl	6eb8 <flash_area_close>
     968:	e7ea      	b.n	940 <boot_read_swap_size+0x50>
     96a:	bf00      	nop
     96c:	00009dfc 	.word	0x00009dfc

00000970 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     974:	4b38      	ldr	r3, [pc, #224]	; (a58 <FIH_LABEL_FIH_CALL_END_294+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     976:	b088      	sub	sp, #32
     978:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     97a:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     97c:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     97e:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     980:	f7ff fdc0 	bl	504 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     984:	a906      	add	r1, sp, #24
     986:	b2c0      	uxtb	r0, r0
     988:	f001 f818 	bl	19bc <flash_area_open>
    if (rc != 0) {
     98c:	2800      	cmp	r0, #0
     98e:	d157      	bne.n	a40 <FIH_LABEL_FIH_CALL_END_294+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     990:	4629      	mov	r1, r5
     992:	f7ff fdb7 	bl	504 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     996:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     998:	a907      	add	r1, sp, #28
     99a:	b2c0      	uxtb	r0, r0
     99c:	fb04 6405 	mla	r4, r4, r5, r6
     9a0:	f001 f80c 	bl	19bc <flash_area_open>
    if (rc != 0) {
     9a4:	2800      	cmp	r0, #0
     9a6:	d036      	beq.n	a16 <FIH_LABEL_FIH_CALL_END_294+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     9a8:	f04f 082c 	mov.w	r8, #44	; 0x2c
     9ac:	fb08 f805 	mul.w	r8, r8, r5
     9b0:	eb06 0708 	add.w	r7, r6, r8
     9b4:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     9b6:	f011 0110 	ands.w	r1, r1, #16
     9ba:	d137      	bne.n	a2c <FIH_LABEL_FIH_CALL_END_294+0x54>

000009bc <FIH_LABEL_FIH_CALL_START_238>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     9bc:	f44f 7380 	mov.w	r3, #256	; 0x100
     9c0:	9301      	str	r3, [sp, #4]
     9c2:	4b26      	ldr	r3, [pc, #152]	; (a5c <FIH_LABEL_FIH_CALL_END_294+0x84>)
     9c4:	9300      	str	r3, [sp, #0]
     9c6:	4622      	mov	r2, r4
     9c8:	e9cd 1103 	strd	r1, r1, [sp, #12]
     9cc:	9b06      	ldr	r3, [sp, #24]
     9ce:	9102      	str	r1, [sp, #8]
     9d0:	4608      	mov	r0, r1
     9d2:	f7ff fda9 	bl	528 <bootutil_img_validate>
     9d6:	4604      	mov	r4, r0

000009d8 <FIH_LABEL_FIH_CALL_END_294>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9d8:	4b21      	ldr	r3, [pc, #132]	; (a60 <FIH_LABEL_FIH_CALL_END_294+0x88>)
     9da:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9de:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9e0:	429a      	cmp	r2, r3
     9e2:	d10c      	bne.n	9fe <FIH_LABEL_FIH_CALL_END_294+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     9e4:	893a      	ldrh	r2, [r7, #8]
     9e6:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     9e8:	43d1      	mvns	r1, r2
     9ea:	428b      	cmp	r3, r1
     9ec:	d807      	bhi.n	9fe <FIH_LABEL_FIH_CALL_END_294+0x26>
        *dest = a + b;
     9ee:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     9f0:	6882      	ldr	r2, [r0, #8]
     9f2:	4293      	cmp	r3, r2
     9f4:	d203      	bcs.n	9fe <FIH_LABEL_FIH_CALL_END_294+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9f6:	4b1b      	ldr	r3, [pc, #108]	; (a64 <FIH_LABEL_FIH_CALL_END_294+0x8c>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	42a3      	cmp	r3, r4
     9fc:	d01d      	beq.n	a3a <FIH_LABEL_FIH_CALL_END_294+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     9fe:	b345      	cbz	r5, a52 <FIH_LABEL_FIH_CALL_END_294+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a00:	6882      	ldr	r2, [r0, #8]
     a02:	2100      	movs	r1, #0
     a04:	f006 fa91 	bl	6f2a <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a08:	4a17      	ldr	r2, [pc, #92]	; (a68 <FIH_LABEL_FIH_CALL_END_294+0x90>)
     a0a:	4818      	ldr	r0, [pc, #96]	; (a6c <FIH_LABEL_FIH_CALL_END_294+0x94>)
     a0c:	2145      	movs	r1, #69	; 0x45
     a0e:	f006 fa46 	bl	6e9e <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     a12:	2401      	movs	r4, #1
     a14:	e011      	b.n	a3a <FIH_LABEL_FIH_CALL_END_294+0x62>
    erased_val = flash_area_erased_val(fap);
     a16:	9807      	ldr	r0, [sp, #28]
     a18:	f006 faa7 	bl	6f6a <flash_area_erased_val>
     a1c:	4607      	mov	r7, r0
    flash_area_close(fap);
     a1e:	9807      	ldr	r0, [sp, #28]
     a20:	f006 fa4a 	bl	6eb8 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a24:	1e63      	subs	r3, r4, #1
     a26:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     a28:	4293      	cmp	r3, r2
     a2a:	d10d      	bne.n	a48 <FIH_LABEL_FIH_CALL_END_294+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     a2c:	2d00      	cmp	r5, #0
     a2e:	d0f0      	beq.n	a12 <FIH_LABEL_FIH_CALL_END_294+0x3a>
            swap_erase_trailer_sectors(state, fap);
     a30:	9906      	ldr	r1, [sp, #24]
     a32:	4630      	mov	r0, r6
     a34:	f006 f83d 	bl	6ab2 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a38:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     a3a:	9806      	ldr	r0, [sp, #24]
     a3c:	f006 fa3c 	bl	6eb8 <flash_area_close>

    FIH_RET(fih_rc);
}
     a40:	4620      	mov	r0, r4
     a42:	b008      	add	sp, #32
     a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     a48:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     a4c:	42b9      	cmp	r1, r7
     a4e:	d0eb      	beq.n	a28 <FIH_LABEL_FIH_CALL_END_294+0x50>
     a50:	e7aa      	b.n	9a8 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a52:	4a07      	ldr	r2, [pc, #28]	; (a70 <FIH_LABEL_FIH_CALL_END_294+0x98>)
     a54:	e7d9      	b.n	a0a <FIH_LABEL_FIH_CALL_END_294+0x32>
     a56:	bf00      	nop
     a58:	20000000 	.word	0x20000000
     a5c:	20005202 	.word	0x20005202
     a60:	96f3b83d 	.word	0x96f3b83d
     a64:	2000034c 	.word	0x2000034c
     a68:	00009f55 	.word	0x00009f55
     a6c:	00009f67 	.word	0x00009f67
     a70:	00009f5f 	.word	0x00009f5f

00000a74 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a76:	460d      	mov	r5, r1
     a78:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a7a:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a7c:	4628      	mov	r0, r5
    size = copy_size = 0;
     a7e:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a82:	f005 ffd1 	bl	6a28 <boot_status_is_reset>
     a86:	b330      	cbz	r0, ad6 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a88:	4e16      	ldr	r6, [pc, #88]	; (ae4 <boot_swap_image+0x70>)
     a8a:	6823      	ldr	r3, [r4, #0]
     a8c:	42b3      	cmp	r3, r6
     a8e:	d103      	bne.n	a98 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a90:	aa01      	add	r2, sp, #4
     a92:	4620      	mov	r0, r4
     a94:	f005 ff4c 	bl	6930 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a9a:	42b3      	cmp	r3, r6
     a9c:	d104      	bne.n	aa8 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a9e:	466a      	mov	r2, sp
     aa0:	2101      	movs	r1, #1
     aa2:	4620      	mov	r0, r4
     aa4:	f005 ff44 	bl	6930 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     aa8:	e9dd 3200 	ldrd	r3, r2, [sp]
     aac:	4293      	cmp	r3, r2
            copy_size = size;
     aae:	bf88      	it	hi
     ab0:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     ab2:	9b01      	ldr	r3, [sp, #4]
     ab4:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     ab6:	9a01      	ldr	r2, [sp, #4]
     ab8:	4629      	mov	r1, r5
     aba:	4620      	mov	r0, r4
     abc:	f000 fadc 	bl	1078 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     ac0:	4b09      	ldr	r3, [pc, #36]	; (ae8 <boot_swap_image+0x74>)
     ac2:	681a      	ldr	r2, [r3, #0]
     ac4:	2a00      	cmp	r2, #0
     ac6:	dd03      	ble.n	ad0 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     ac8:	4808      	ldr	r0, [pc, #32]	; (aec <boot_swap_image+0x78>)
     aca:	2157      	movs	r1, #87	; 0x57
     acc:	f006 f9e7 	bl	6e9e <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     ad0:	2000      	movs	r0, #0
     ad2:	b002      	add	sp, #8
     ad4:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     ad6:	f105 0108 	add.w	r1, r5, #8
     ada:	f7ff ff09 	bl	8f0 <boot_read_swap_size>
        copy_size = bs->swap_size;
     ade:	68ab      	ldr	r3, [r5, #8]
     ae0:	9301      	str	r3, [sp, #4]
     ae2:	e7e8      	b.n	ab6 <boot_swap_image+0x42>
     ae4:	96f3b83d 	.word	0x96f3b83d
     ae8:	200037bc 	.word	0x200037bc
     aec:	00009f8f 	.word	0x00009f8f

00000af0 <boot_copy_region>:
{
     af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     af4:	f8df b070 	ldr.w	fp, [pc, #112]	; b68 <boot_copy_region+0x78>
     af8:	4c1c      	ldr	r4, [pc, #112]	; (b6c <boot_copy_region+0x7c>)
     afa:	4d1d      	ldr	r5, [pc, #116]	; (b70 <boot_copy_region+0x80>)
{
     afc:	4688      	mov	r8, r1
     afe:	4691      	mov	r9, r2
     b00:	469a      	mov	sl, r3
    bytes_copied = 0;
     b02:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b06:	429e      	cmp	r6, r3
     b08:	d301      	bcc.n	b0e <boot_copy_region+0x1e>
    return 0;
     b0a:	2000      	movs	r0, #0
     b0c:	e00f      	b.n	b2e <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b10:	4a15      	ldr	r2, [pc, #84]	; (b68 <boot_copy_region+0x78>)
        if (sz - bytes_copied > sizeof buf) {
     b12:	1b9f      	subs	r7, r3, r6
     b14:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b18:	bf28      	it	cs
     b1a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b1e:	463b      	mov	r3, r7
     b20:	eb06 010a 	add.w	r1, r6, sl
     b24:	4640      	mov	r0, r8
     b26:	f006 f9c8 	bl	6eba <flash_area_read>
        if (rc != 0) {
     b2a:	b110      	cbz	r0, b32 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b2c:	2001      	movs	r0, #1
}
     b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b32:	990a      	ldr	r1, [sp, #40]	; 0x28
     b34:	463b      	mov	r3, r7
     b36:	465a      	mov	r2, fp
     b38:	1871      	adds	r1, r6, r1
     b3a:	4648      	mov	r0, r9
     b3c:	f006 f9d9 	bl	6ef2 <flash_area_write>
        if (rc != 0) {
     b40:	2800      	cmp	r0, #0
     b42:	d1f3      	bne.n	b2c <boot_copy_region+0x3c>
     b44:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b48:	443e      	add	r6, r7
     b4a:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b4e:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b52:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b56:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b5a:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b5e:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b62:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b66:	e7cd      	b.n	b04 <boot_copy_region+0x14>
     b68:	200003bc 	.word	0x200003bc
     b6c:	40010000 	.word	0x40010000
     b70:	6e524635 	.word	0x6e524635

00000b74 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     b78:	4b8c      	ldr	r3, [pc, #560]	; (dac <FIH_LABEL_FIH_CALL_END_2476+0x4c>)
     b7a:	681e      	ldr	r6, [r3, #0]
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b7c:	4b8c      	ldr	r3, [pc, #560]	; (db0 <FIH_LABEL_FIH_CALL_END_2476+0x50>)
     b7e:	6243      	str	r3, [r0, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b80:	4b8c      	ldr	r3, [pc, #560]	; (db4 <FIH_LABEL_FIH_CALL_END_2476+0x54>)
     b82:	6503      	str	r3, [r0, #80]	; 0x50
{
     b84:	460f      	mov	r7, r1
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
     b86:	4b8c      	ldr	r3, [pc, #560]	; (db8 <FIH_LABEL_FIH_CALL_END_2476+0x58>)
     b88:	65c3      	str	r3, [r0, #92]	; 0x5c

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b8a:	2100      	movs	r1, #0
{
     b8c:	b085      	sub	sp, #20
     b8e:	4604      	mov	r4, r0
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b90:	4608      	mov	r0, r1
     b92:	f7ff fcb7 	bl	504 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b96:	f104 0120 	add.w	r1, r4, #32
     b9a:	b2c0      	uxtb	r0, r0
     b9c:	f000 ff0e 	bl	19bc <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ba0:	2101      	movs	r1, #1
     ba2:	2000      	movs	r0, #0
     ba4:	f7ff fcae 	bl	504 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ba8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     bac:	b2c0      	uxtb	r0, r0
     bae:	f000 ff05 	bl	19bc <flash_area_open>
            assert(rc == 0);
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
     bb2:	f104 0158 	add.w	r1, r4, #88	; 0x58
     bb6:	2007      	movs	r0, #7
     bb8:	f000 ff00 	bl	19bc <flash_area_open>
     bbc:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     bbe:	4620      	mov	r0, r4
     bc0:	f005 fef7 	bl	69b2 <boot_read_sectors>
    if (rc != 0) {
     bc4:	4680      	mov	r8, r0
     bc6:	b968      	cbnz	r0, be4 <context_boot_go+0x70>
    rc = boot_read_image_headers(state, false, NULL);
     bc8:	2200      	movs	r2, #0
     bca:	4611      	mov	r1, r2
     bcc:	4620      	mov	r0, r4
     bce:	f005 fe97 	bl	6900 <boot_read_image_headers>
    if (rc != 0) {
     bd2:	4680      	mov	r8, r0
     bd4:	b1f8      	cbz	r0, c16 <context_boot_go+0xa2>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     bd6:	4879      	ldr	r0, [pc, #484]	; (dbc <FIH_LABEL_FIH_CALL_END_2476+0x5c>)
     bd8:	2200      	movs	r2, #0
     bda:	2157      	movs	r1, #87	; 0x57
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bdc:	f006 f95f 	bl	6e9e <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     be0:	2301      	movs	r3, #1
     be2:	e084      	b.n	cee <FIH_LABEL_FIH_CALL_END_2263+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     be4:	4876      	ldr	r0, [pc, #472]	; (dc0 <FIH_LABEL_FIH_CALL_END_2476+0x60>)
     be6:	f44f 7200 	mov.w	r2, #512	; 0x200
     bea:	2157      	movs	r1, #87	; 0x57
     bec:	f006 f957 	bl	6e9e <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bf0:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     bf2:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bf4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        if (rc == BOOT_EFLASH)
     bf8:	d1e6      	bne.n	bc8 <context_boot_go+0x54>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     bfa:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     bfe:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     c02:	2b04      	cmp	r3, #4
     c04:	d876      	bhi.n	cf4 <FIH_LABEL_FIH_CALL_END_2263+0x14>
     c06:	2b01      	cmp	r3, #1
     c08:	d87a      	bhi.n	d00 <FIH_LABEL_FIH_CALL_END_2263+0x20>
     c0a:	f000 8092 	beq.w	d32 <FIH_LABEL_FIH_CALL_END_2263+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c0e:	23ff      	movs	r3, #255	; 0xff
     c10:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
     c14:	e08d      	b.n	d32 <FIH_LABEL_FIH_CALL_END_2263+0x52>
    if (boot_slots_compatible(state)) {
     c16:	4620      	mov	r0, r4
     c18:	f000 f93a 	bl	e90 <boot_slots_compatible>
     c1c:	2800      	cmp	r0, #0
     c1e:	d0df      	beq.n	be0 <context_boot_go+0x6c>
        boot_status_reset(bs);
     c20:	4668      	mov	r0, sp
     c22:	f005 fef8 	bl	6a16 <boot_status_reset>
        rc = swap_read_status(state, bs);
     c26:	4669      	mov	r1, sp
     c28:	4620      	mov	r0, r4
     c2a:	f005 ff97 	bl	6b5c <swap_read_status>
        if (rc != 0) {
     c2e:	4601      	mov	r1, r0
     c30:	b118      	cbz	r0, c3a <context_boot_go+0xc6>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c32:	4864      	ldr	r0, [pc, #400]	; (dc4 <FIH_LABEL_FIH_CALL_END_2476+0x64>)
     c34:	4642      	mov	r2, r8
     c36:	2157      	movs	r1, #87	; 0x57
     c38:	e7d0      	b.n	bdc <context_boot_go+0x68>
        if (!boot_status_is_reset(bs)) {
     c3a:	4668      	mov	r0, sp
     c3c:	f005 fef4 	bl	6a28 <boot_status_is_reset>
     c40:	4680      	mov	r8, r0
     c42:	bb60      	cbnz	r0, c9e <context_boot_go+0x12a>
    rc = boot_swap_image(state, bs);
     c44:	4669      	mov	r1, sp
     c46:	4620      	mov	r0, r4
     c48:	f7ff ff14 	bl	a74 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c50:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c54:	3b03      	subs	r3, #3
     c56:	2b01      	cmp	r3, #1
     c58:	d806      	bhi.n	c68 <context_boot_go+0xf4>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c5a:	4640      	mov	r0, r8
     c5c:	f005 ffd3 	bl	6c06 <swap_set_image_ok>
        if (rc != 0) {
     c60:	b110      	cbz	r0, c68 <context_boot_go+0xf4>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c62:	23ff      	movs	r3, #255	; 0xff
     c64:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c68:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c6c:	3b02      	subs	r3, #2
     c6e:	2b02      	cmp	r3, #2
     c70:	d80b      	bhi.n	c8a <context_boot_go+0x116>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c72:	2000      	movs	r0, #0
     c74:	f005 ffb5 	bl	6be2 <swap_set_copy_done>
        if (rc != 0) {
     c78:	b138      	cbz	r0, c8a <context_boot_go+0x116>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c7a:	23ff      	movs	r3, #255	; 0xff
     c7c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        BOOT_LOG_ERR("panic!");
     c80:	4851      	ldr	r0, [pc, #324]	; (dc8 <FIH_LABEL_FIH_CALL_END_2476+0x68>)
     c82:	2145      	movs	r1, #69	; 0x45
     c84:	f006 f90b 	bl	6e9e <z_log_minimal_printk>
        while (1) {}
     c88:	e7fe      	b.n	c88 <context_boot_go+0x114>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c8a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
     c8e:	2bff      	cmp	r3, #255	; 0xff
     c90:	d0f6      	beq.n	c80 <context_boot_go+0x10c>
            rc = boot_read_image_headers(state, false, bs);
     c92:	466a      	mov	r2, sp
     c94:	2100      	movs	r1, #0
     c96:	4620      	mov	r0, r4
     c98:	f005 fe32 	bl	6900 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c9c:	e7a0      	b.n	be0 <context_boot_go+0x6c>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c9e:	f89d 9007 	ldrb.w	r9, [sp, #7]
     ca2:	f1b9 0f01 	cmp.w	r9, #1
     ca6:	d117      	bne.n	cd8 <FIH_LABEL_FIH_CALL_START_2243>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     ca8:	4608      	mov	r0, r1
     caa:	f003 f8db 	bl	3e64 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cae:	1e83      	subs	r3, r0, #2
     cb0:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cb2:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     cb4:	d80d      	bhi.n	cd2 <FIH_LABEL_FIH_CALL_END_2178+0x14>

00000cb6 <FIH_LABEL_FIH_CALL_START_2154>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     cb6:	4649      	mov	r1, r9
     cb8:	4620      	mov	r0, r4
     cba:	f7ff fe59 	bl	970 <boot_validate_slot.isra.0>

00000cbe <FIH_LABEL_FIH_CALL_END_2178>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cbe:	4b43      	ldr	r3, [pc, #268]	; (dcc <FIH_LABEL_FIH_CALL_END_2476+0x6c>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	4298      	cmp	r0, r3
     cc4:	d005      	beq.n	cd2 <FIH_LABEL_FIH_CALL_END_2178+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     cc6:	2801      	cmp	r0, #1
     cc8:	bf0c      	ite	eq
     cca:	f04f 0801 	moveq.w	r8, #1
     cce:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     cd2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
     cd6:	e790      	b.n	bfa <context_boot_go+0x86>

00000cd8 <FIH_LABEL_FIH_CALL_START_2243>:
                FIH_CALL(boot_validate_slot, fih_rc,
     cd8:	2101      	movs	r1, #1
     cda:	4620      	mov	r0, r4
     cdc:	f7ff fe48 	bl	970 <boot_validate_slot.isra.0>

00000ce0 <FIH_LABEL_FIH_CALL_END_2263>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     ce0:	4b3a      	ldr	r3, [pc, #232]	; (dcc <FIH_LABEL_FIH_CALL_END_2476+0x6c>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ce6:	bf0c      	ite	eq
     ce8:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     cec:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
     cf2:	e782      	b.n	bfa <context_boot_go+0x86>
        switch (BOOT_SWAP_TYPE(state)) {
     cf4:	2b05      	cmp	r3, #5
     cf6:	d18a      	bne.n	c0e <context_boot_go+0x9a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cf8:	2000      	movs	r0, #0
     cfa:	f005 ff84 	bl	6c06 <swap_set_image_ok>
     cfe:	e013      	b.n	d28 <FIH_LABEL_FIH_CALL_END_2263+0x48>
        rc = boot_swap_image(state, bs);
     d00:	4669      	mov	r1, sp
     d02:	4620      	mov	r0, r4
     d04:	f7ff feb6 	bl	a74 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d08:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d0c:	1eda      	subs	r2, r3, #3
     d0e:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     d10:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d12:	d80c      	bhi.n	d2e <FIH_LABEL_FIH_CALL_END_2263+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d14:	2000      	movs	r0, #0
     d16:	f005 ff76 	bl	6c06 <swap_set_image_ok>
        if (rc != 0) {
     d1a:	4605      	mov	r5, r0
     d1c:	2800      	cmp	r0, #0
     d1e:	f47f af76 	bne.w	c0e <context_boot_go+0x9a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d22:	2000      	movs	r0, #0
     d24:	f005 ff5d 	bl	6be2 <swap_set_copy_done>
            if (rc != 0) {
     d28:	4605      	mov	r5, r0
     d2a:	b110      	cbz	r0, d32 <FIH_LABEL_FIH_CALL_END_2263+0x52>
     d2c:	e76f      	b.n	c0e <context_boot_go+0x9a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d2e:	2b02      	cmp	r3, #2
     d30:	d0f7      	beq.n	d22 <FIH_LABEL_FIH_CALL_END_2263+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d32:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
     d36:	2bff      	cmp	r3, #255	; 0xff
     d38:	d104      	bne.n	d44 <FIH_LABEL_FIH_CALL_END_2263+0x64>
            BOOT_LOG_ERR("panic!");
     d3a:	4823      	ldr	r0, [pc, #140]	; (dc8 <FIH_LABEL_FIH_CALL_END_2476+0x68>)
     d3c:	2145      	movs	r1, #69	; 0x45
     d3e:	f006 f8ae 	bl	6e9e <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     d42:	e7fe      	b.n	d42 <FIH_LABEL_FIH_CALL_END_2263+0x62>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d44:	2b01      	cmp	r3, #1
     d46:	d006      	beq.n	d56 <FIH_LABEL_FIH_CALL_START_2460>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     d48:	466a      	mov	r2, sp
     d4a:	2100      	movs	r1, #0
     d4c:	4620      	mov	r0, r4
     d4e:	f005 fdd7 	bl	6900 <boot_read_image_headers>
            if (rc != 0) {
     d52:	4605      	mov	r5, r0
     d54:	b9d0      	cbnz	r0, d8c <FIH_LABEL_FIH_CALL_END_2476+0x2c>

00000d56 <FIH_LABEL_FIH_CALL_START_2460>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     d56:	2100      	movs	r1, #0
     d58:	4620      	mov	r0, r4
     d5a:	f7ff fe09 	bl	970 <boot_validate_slot.isra.0>
     d5e:	4606      	mov	r6, r0

00000d60 <FIH_LABEL_FIH_CALL_END_2476>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d60:	f8df 8068 	ldr.w	r8, [pc, #104]	; dcc <FIH_LABEL_FIH_CALL_END_2476+0x6c>
     d64:	f8d8 3000 	ldr.w	r3, [r8]
     d68:	4298      	cmp	r0, r3
     d6a:	d10f      	bne.n	d8c <FIH_LABEL_FIH_CALL_END_2476+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     d6c:	2210      	movs	r2, #16
     d6e:	2100      	movs	r1, #0
     d70:	4668      	mov	r0, sp
     d72:	f006 f969 	bl	7048 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     d76:	6a20      	ldr	r0, [r4, #32]
     d78:	f005 fcec 	bl	6754 <flash_area_get_device_id>
     d7c:	7138      	strb	r0, [r7, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     d7e:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     d80:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d84:	685b      	ldr	r3, [r3, #4]
     d86:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d88:	603c      	str	r4, [r7, #0]
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     d8a:	2500      	movs	r5, #0
        flash_area_close(BOOT_SCRATCH_AREA(state));
     d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
     d8e:	f006 f893 	bl	6eb8 <flash_area_close>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d92:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d94:	f006 f890 	bl	6eb8 <flash_area_close>
     d98:	6a20      	ldr	r0, [r4, #32]
     d9a:	f006 f88d 	bl	6eb8 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d9e:	2d00      	cmp	r5, #0
     da0:	bf14      	ite	ne
     da2:	4628      	movne	r0, r5
     da4:	4630      	moveq	r0, r6
     da6:	b005      	add	sp, #20
     da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     dac:	20000000 	.word	0x20000000
     db0:	200007bc 	.word	0x200007bc
     db4:	200027bc 	.word	0x200027bc
     db8:	200017bc 	.word	0x200017bc
     dbc:	0000a000 	.word	0x0000a000
     dc0:	00009fbe 	.word	0x00009fbe
     dc4:	0000a02c 	.word	0x0000a02c
     dc8:	0000a056 	.word	0x0000a056
     dcc:	2000034c 	.word	0x2000034c

00000dd0 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     dd0:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     dd2:	4d06      	ldr	r5, [pc, #24]	; (dec <FIH_LABEL_FIH_CALL_END_3158+0x4>)
{
     dd4:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     dd6:	226c      	movs	r2, #108	; 0x6c
     dd8:	2100      	movs	r1, #0
     dda:	4628      	mov	r0, r5
     ddc:	f006 f934 	bl	7048 <memset>

00000de0 <FIH_LABEL_FIH_CALL_START_3143>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     de0:	4621      	mov	r1, r4
     de2:	4628      	mov	r0, r5
     de4:	f7ff fec6 	bl	b74 <context_boot_go>

00000de8 <FIH_LABEL_FIH_CALL_END_3158>:
}
     de8:	bd38      	pop	{r3, r4, r5, pc}
     dea:	bf00      	nop
     dec:	20000350 	.word	0x20000350

00000df0 <swap_read_status_bytes>:
 * operation.
 */
int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     df4:	4681      	mov	r9, r0
     df6:	468b      	mov	fp, r1
     df8:	4616      	mov	r6, r2
    int found_idx;
    int invalid;
    int rc;
    int i;

    off = boot_status_off(fap);
     dfa:	f005 fd59 	bl	68b0 <boot_status_off>
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     dfe:	4649      	mov	r1, r9
    off = boot_status_off(fap);
     e00:	4682      	mov	sl, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e02:	2000      	movs	r0, #0
     e04:	f005 fd46 	bl	6894 <boot_status_entries>
    if (max_entries < 0) {
     e08:	f1b0 0800 	subs.w	r8, r0, #0
     e0c:	db3a      	blt.n	e84 <swap_read_status_bytes+0x94>
    }

    found = 0;
    found_idx = 0;
    invalid = 0;
    for (i = 0; i < max_entries; i++) {
     e0e:	2700      	movs	r7, #0
    found_idx = 0;
     e10:	463c      	mov	r4, r7
    found = 0;
     e12:	463d      	mov	r5, r7
    for (i = 0; i < max_entries; i++) {
     e14:	45b8      	cmp	r8, r7
     e16:	d112      	bne.n	e3e <swap_read_status_bytes+0x4e>
         */
        assert(0);
#endif
    }

    if (found) {
     e18:	b16d      	cbz	r5, e36 <swap_read_status_bytes+0x46>
        if (!found_idx) {
     e1a:	2c00      	cmp	r4, #0
     e1c:	bf08      	it	eq
     e1e:	4644      	moveq	r4, r8
            found_idx = i;
        }
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
     e20:	2303      	movs	r3, #3
     e22:	fbb4 f3f3 	udiv	r3, r4, r3
     e26:	1c5a      	adds	r2, r3, #1
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
     e28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     e2c:	1ae3      	subs	r3, r4, r3
     e2e:	3301      	adds	r3, #1
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
     e30:	6032      	str	r2, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
     e32:	7133      	strb	r3, [r6, #4]
    }

    return 0;
     e34:	2500      	movs	r5, #0
}
     e36:	4628      	mov	r0, r5
     e38:	b003      	add	sp, #12
     e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + i * BOOT_WRITE_SZ(state),
     e3e:	f8db 1068 	ldr.w	r1, [fp, #104]	; 0x68
     e42:	2301      	movs	r3, #1
     e44:	f10d 0207 	add.w	r2, sp, #7
     e48:	fb01 a107 	mla	r1, r1, r7, sl
     e4c:	4648      	mov	r0, r9
     e4e:	f006 f834 	bl	6eba <flash_area_read>
        if (rc < 0) {
     e52:	2800      	cmp	r0, #0
     e54:	db18      	blt.n	e88 <swap_read_status_bytes+0x98>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e56:	2201      	movs	r2, #1
     e58:	f10d 0107 	add.w	r1, sp, #7
     e5c:	4648      	mov	r0, r9
     e5e:	f006 fd14 	bl	788a <bootutil_buffer_is_erased>
     e62:	b128      	cbz	r0, e70 <swap_read_status_bytes+0x80>
            if (found && !found_idx) {
     e64:	b115      	cbz	r5, e6c <swap_read_status_bytes+0x7c>
     e66:	2c00      	cmp	r4, #0
     e68:	bf08      	it	eq
     e6a:	463c      	moveq	r4, r7
    for (i = 0; i < max_entries; i++) {
     e6c:	3701      	adds	r7, #1
     e6e:	e7d1      	b.n	e14 <swap_read_status_bytes+0x24>
        } else if (!found) {
     e70:	b135      	cbz	r5, e80 <swap_read_status_bytes+0x90>
        } else if (found_idx) {
     e72:	2c00      	cmp	r4, #0
     e74:	d0fa      	beq.n	e6c <swap_read_status_bytes+0x7c>
        BOOT_LOG_ERR("Detected inconsistent status!");
     e76:	4805      	ldr	r0, [pc, #20]	; (e8c <swap_read_status_bytes+0x9c>)
     e78:	2145      	movs	r1, #69	; 0x45
     e7a:	f006 f810 	bl	6e9e <z_log_minimal_printk>
        if (!found_idx) {
     e7e:	e7cf      	b.n	e20 <swap_read_status_bytes+0x30>
            found = 1;
     e80:	2501      	movs	r5, #1
     e82:	e7f3      	b.n	e6c <swap_read_status_bytes+0x7c>
        return BOOT_EBADARGS;
     e84:	2507      	movs	r5, #7
     e86:	e7d6      	b.n	e36 <swap_read_status_bytes+0x46>
            return BOOT_EFLASH;
     e88:	2501      	movs	r5, #1
     e8a:	e7d4      	b.n	e36 <swap_read_status_bytes+0x46>
     e8c:	0000a062 	.word	0x0000a062

00000e90 <boot_slots_compatible>:
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
     e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     e94:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
     e98:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     e9c:	d804      	bhi.n	ea8 <boot_slots_compatible+0x18>
     e9e:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
     ea2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
     ea6:	d906      	bls.n	eb6 <boot_slots_compatible+0x26>
        (num_sectors_secondary > BOOT_MAX_IMG_SECTORS)) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ea8:	4828      	ldr	r0, [pc, #160]	; (f4c <boot_slots_compatible+0xbc>)
     eaa:	2157      	movs	r1, #87	; 0x57
    }

    if ((i != num_sectors_primary) ||
        (j != num_sectors_secondary) ||
        (primary_slot_sz != secondary_slot_sz)) {
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
     eac:	f005 fff7 	bl	6e9e <z_log_minimal_printk>
        return 0;
     eb0:	2000      	movs	r0, #0
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

static inline uint32_t flash_area_get_size(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_size;
     eb6:	6d83      	ldr	r3, [r0, #88]	; 0x58
     eb8:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
     ebc:	2300      	movs	r3, #0
    j = sz1 = secondary_slot_sz = 0;
     ebe:	461a      	mov	r2, r3
    i = sz0 = primary_slot_sz = 0;
     ec0:	4619      	mov	r1, r3
    j = sz1 = secondary_slot_sz = 0;
     ec2:	461e      	mov	r6, r3
    i = sz0 = primary_slot_sz = 0;
     ec4:	461d      	mov	r5, r3
            smaller = sz0 = sz1 = 0;
     ec6:	461c      	mov	r4, r3
     ec8:	4699      	mov	r9, r3
    while (i < num_sectors_primary || j < num_sectors_secondary) {
     eca:	458e      	cmp	lr, r1
     ecc:	d80a      	bhi.n	ee4 <boot_slots_compatible+0x54>
     ece:	4594      	cmp	ip, r2
     ed0:	d808      	bhi.n	ee4 <boot_slots_compatible+0x54>
    if ((i != num_sectors_primary) ||
     ed2:	458e      	cmp	lr, r1
     ed4:	d103      	bne.n	ede <boot_slots_compatible+0x4e>
     ed6:	4594      	cmp	ip, r2
     ed8:	d101      	bne.n	ede <boot_slots_compatible+0x4e>
        (j != num_sectors_secondary) ||
     eda:	42ae      	cmp	r6, r5
     edc:	d034      	beq.n	f48 <boot_slots_compatible+0xb8>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
     ede:	481c      	ldr	r0, [pc, #112]	; (f50 <boot_slots_compatible+0xc0>)
     ee0:	2157      	movs	r1, #87	; 0x57
     ee2:	e7e3      	b.n	eac <boot_slots_compatible+0x1c>
        if (sz0 == sz1) {
     ee4:	454c      	cmp	r4, r9
     ee6:	d115      	bne.n	f14 <boot_slots_compatible+0x84>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     ee8:	6a47      	ldr	r7, [r0, #36]	; 0x24
     eea:	eb07 07c1 	add.w	r7, r7, r1, lsl #3
            i++;
     eee:	3101      	adds	r1, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
     ef0:	687f      	ldr	r7, [r7, #4]
     ef2:	eb04 0907 	add.w	r9, r4, r7
     ef6:	6d07      	ldr	r7, [r0, #80]	; 0x50
     ef8:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            j++;
     efc:	3201      	adds	r2, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
     efe:	687f      	ldr	r7, [r7, #4]
     f00:	443c      	add	r4, r7
        if (sz0 == sz1) {
     f02:	45a1      	cmp	r9, r4
     f04:	d1e1      	bne.n	eca <boot_slots_compatible+0x3a>
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
     f06:	45c8      	cmp	r8, r9
            primary_slot_sz += sz0;
     f08:	444d      	add	r5, r9
            secondary_slot_sz += sz1;
     f0a:	444e      	add	r6, r9
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
     f0c:	d21a      	bcs.n	f44 <boot_slots_compatible+0xb4>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
     f0e:	4811      	ldr	r0, [pc, #68]	; (f54 <boot_slots_compatible+0xc4>)
     f10:	2157      	movs	r1, #87	; 0x57
     f12:	e7cb      	b.n	eac <boot_slots_compatible+0x1c>
        } else if (sz0 < sz1) {
     f14:	d90c      	bls.n	f30 <boot_slots_compatible+0xa0>
     f16:	6a47      	ldr	r7, [r0, #36]	; 0x24
     f18:	eb07 07c1 	add.w	r7, r7, r1, lsl #3
            if (smaller == 2) {
     f1c:	2b02      	cmp	r3, #2
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
     f1e:	687f      	ldr	r7, [r7, #4]
     f20:	44b9      	add	r9, r7
            if (smaller == 2) {
     f22:	d102      	bne.n	f2a <boot_slots_compatible+0x9a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
     f24:	480c      	ldr	r0, [pc, #48]	; (f58 <boot_slots_compatible+0xc8>)
     f26:	2157      	movs	r1, #87	; 0x57
     f28:	e7c0      	b.n	eac <boot_slots_compatible+0x1c>
            i++;
     f2a:	3101      	adds	r1, #1
            smaller = 1;
     f2c:	2301      	movs	r3, #1
     f2e:	e7e8      	b.n	f02 <boot_slots_compatible+0x72>
     f30:	6d07      	ldr	r7, [r0, #80]	; 0x50
     f32:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            if (smaller == 1) {
     f36:	2b01      	cmp	r3, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
     f38:	687f      	ldr	r7, [r7, #4]
     f3a:	443c      	add	r4, r7
            if (smaller == 1) {
     f3c:	d0f2      	beq.n	f24 <boot_slots_compatible+0x94>
            j++;
     f3e:	3201      	adds	r2, #1
            smaller = 2;
     f40:	2302      	movs	r3, #2
     f42:	e7de      	b.n	f02 <boot_slots_compatible+0x72>
            smaller = sz0 = sz1 = 0;
     f44:	2300      	movs	r3, #0
     f46:	e7be      	b.n	ec6 <boot_slots_compatible+0x36>
    return 1;
     f48:	2001      	movs	r0, #1
     f4a:	e7b2      	b.n	eb2 <boot_slots_compatible+0x22>
     f4c:	0000a085 	.word	0x0000a085
     f50:	0000a123 	.word	0x0000a123
     f54:	0000a0eb 	.word	0x0000a0eb
     f58:	0000a0b4 	.word	0x0000a0b4

00000f5c <swap_status_source>:
 * @return      A BOOT_STATUS_SOURCE_[...] code indicating where status should
 *              be read from.
 */
int
swap_status_source(struct boot_loader_state *state)
{
     f5c:	b570      	push	{r4, r5, r6, lr}
     f5e:	b088      	sub	sp, #32
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f60:	a906      	add	r1, sp, #24
     f62:	2003      	movs	r0, #3
     f64:	f006 fcf7 	bl	7956 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

#if MCUBOOT_SWAP_USING_SCRATCH
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
     f68:	a904      	add	r1, sp, #16
     f6a:	2007      	movs	r0, #7
     f6c:	f006 fcf3 	bl	7956 <boot_read_swap_state_by_id>
    assert(rc == 0);
#endif

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f70:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f74:	2a01      	cmp	r2, #1
     f76:	d051      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f78:	4b32      	ldr	r3, [pc, #200]	; (1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>)
     f7a:	4933      	ldr	r1, [pc, #204]	; (1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>)
     f7c:	2a03      	cmp	r2, #3
     f7e:	bf18      	it	ne
     f80:	460b      	movne	r3, r1
     f82:	f89d 201b 	ldrb.w	r2, [sp, #27]
     f86:	9202      	str	r2, [sp, #8]
     f88:	f89d 201a 	ldrb.w	r2, [sp, #26]
     f8c:	9201      	str	r2, [sp, #4]
     f8e:	f89d 2019 	ldrb.w	r2, [sp, #25]
     f92:	9200      	str	r2, [sp, #0]
     f94:	482d      	ldr	r0, [pc, #180]	; (104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
     f96:	4a2e      	ldr	r2, [pc, #184]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     f98:	2149      	movs	r1, #73	; 0x49
     f9a:	f005 ff80 	bl	6e9e <z_log_minimal_printk>
#if MCUBOOT_SWAP_USING_SCRATCH
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
     f9e:	f89d 2010 	ldrb.w	r2, [sp, #16]
     fa2:	2a01      	cmp	r2, #1
     fa4:	d03c      	beq.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     fa6:	4b27      	ldr	r3, [pc, #156]	; (1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>)
     fa8:	4927      	ldr	r1, [pc, #156]	; (1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>)
     faa:	2a03      	cmp	r2, #3
     fac:	bf18      	it	ne
     fae:	460b      	movne	r3, r1
     fb0:	f89d 2013 	ldrb.w	r2, [sp, #19]
     fb4:	9202      	str	r2, [sp, #8]
     fb6:	f89d 2012 	ldrb.w	r2, [sp, #18]
     fba:	9201      	str	r2, [sp, #4]
     fbc:	f89d 2011 	ldrb.w	r2, [sp, #17]
     fc0:	9200      	str	r2, [sp, #0]
     fc2:	4822      	ldr	r0, [pc, #136]	; (104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
     fc4:	4a23      	ldr	r2, [pc, #140]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
     fc6:	4c24      	ldr	r4, [pc, #144]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
     fc8:	2149      	movs	r1, #73	; 0x49
     fca:	f005 ff68 	bl	6e9e <z_log_minimal_printk>
#endif
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
     fce:	2500      	movs	r5, #0
     fd0:	4626      	mov	r6, r4
        table = &boot_status_tables[i];

        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
     fd2:	f89d 1018 	ldrb.w	r1, [sp, #24]
     fd6:	7820      	ldrb	r0, [r4, #0]
     fd8:	f006 fc49 	bl	786e <boot_magic_compatible_check>
     fdc:	b330      	cbz	r0, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
                          state_primary_slot.magic) &&
#if MCUBOOT_SWAP_USING_SCRATCH
            boot_magic_compatible_check(table->bst_magic_scratch,
     fde:	f89d 1010 	ldrb.w	r1, [sp, #16]
     fe2:	7860      	ldrb	r0, [r4, #1]
     fe4:	f006 fc43 	bl	786e <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
     fe8:	b300      	cbz	r0, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
                          state_scratch.magic) &&
#endif
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
     fea:	78a3      	ldrb	r3, [r4, #2]
                          state_scratch.magic) &&
     fec:	2b04      	cmp	r3, #4
     fee:	d003      	beq.n	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
     ff0:	f89d 201a 	ldrb.w	r2, [sp, #26]
     ff4:	429a      	cmp	r2, r3
     ff6:	d119      	bne.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
        {
            source = table->bst_status_source;
     ff8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     ffc:	78ec      	ldrb	r4, [r5, #3]
                state_scratch.image_num != BOOT_CURR_IMG(state)) {
                source = BOOT_STATUS_SOURCE_NONE;
            }
#endif

            BOOT_LOG_INF("Boot source: %s",
     ffe:	b18c      	cbz	r4, 1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1000:	2c01      	cmp	r4, #1
    1002:	d011      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1004:	4a15      	ldr	r2, [pc, #84]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
    1006:	4b16      	ldr	r3, [pc, #88]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    1008:	2c02      	cmp	r4, #2
    100a:	bf18      	it	ne
    100c:	461a      	movne	r2, r3
    100e:	4815      	ldr	r0, [pc, #84]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1010:	2149      	movs	r1, #73	; 0x49
    1012:	f005 ff44 	bl	6e9e <z_log_minimal_printk>
                         source == BOOT_STATUS_SOURCE_NONE ? "none" :
                         source == BOOT_STATUS_SOURCE_SCRATCH ? "scratch" :
                         source == BOOT_STATUS_SOURCE_PRIMARY_SLOT ?
                                   "primary slot" : "BUG; can't happen");
            return source;
    1016:	4620      	mov	r0, r4
        }
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    1018:	b008      	add	sp, #32
    101a:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    101c:	4b12      	ldr	r3, [pc, #72]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    101e:	e7b0      	b.n	f82 <swap_status_source+0x26>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    1020:	4b11      	ldr	r3, [pc, #68]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    1022:	e7c5      	b.n	fb0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x10>
            BOOT_LOG_INF("Boot source: %s",
    1024:	4a11      	ldr	r2, [pc, #68]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    1026:	e7f2      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    1028:	4a11      	ldr	r2, [pc, #68]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    102a:	e7f0      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    102c:	3501      	adds	r5, #1
    102e:	2d04      	cmp	r5, #4
    1030:	f104 0404 	add.w	r4, r4, #4
    1034:	d1cd      	bne.n	fd2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x32>
    BOOT_LOG_INF("Boot source: none");
    1036:	480f      	ldr	r0, [pc, #60]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
    1038:	2149      	movs	r1, #73	; 0x49
    103a:	f005 ff30 	bl	6e9e <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    103e:	2000      	movs	r0, #0
    1040:	e7ea      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    1042:	bf00      	nop
    1044:	0000a156 	.word	0x0000a156
    1048:	0000a15c 	.word	0x0000a15c
    104c:	0000a19a 	.word	0x0000a19a
    1050:	0000a18c 	.word	0x0000a18c
    1054:	0000a1db 	.word	0x0000a1db
    1058:	0000a23b 	.word	0x0000a23b
    105c:	0000a16d 	.word	0x0000a16d
    1060:	0000a17a 	.word	0x0000a17a
    1064:	0000a1e3 	.word	0x0000a1e3
    1068:	0000a151 	.word	0x0000a151
    106c:	0000a160 	.word	0x0000a160
    1070:	0000a165 	.word	0x0000a165
    1074:	0000a1f8 	.word	0x0000a1f8

00001078 <swap_run>:
}

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    107c:	4605      	mov	r5, r0
    107e:	b08b      	sub	sp, #44	; 0x2c
    primary_slot_size = 0;
    secondary_slot_size = 0;
    last_sector_idx = 0;
    last_idx_secondary_slot = 0;

    BOOT_LOG_INF("Starting swap using scratch algorithm.");
    1080:	489f      	ldr	r0, [pc, #636]	; (1300 <swap_run+0x288>)
{
    1082:	460c      	mov	r4, r1
    BOOT_LOG_INF("Starting swap using scratch algorithm.");
    1084:	2149      	movs	r1, #73	; 0x49
{
    1086:	4616      	mov	r6, r2
    BOOT_LOG_INF("Starting swap using scratch algorithm.");
    1088:	f005 ff09 	bl	6e9e <z_log_minimal_printk>
    secondary_slot_size = 0;
    108c:	2300      	movs	r3, #0
    primary_slot_size = 0;
    108e:	4619      	mov	r1, r3
    last_sector_idx = 0;
    1090:	461f      	mov	r7, r3
     * find what is the last sector in the primary slot that needs swapping.
     * Since we already know that both slots are compatible, the secondary
     * slot's last sector is not really required after this check is finished.
     */
    while (1) {
        if ((primary_slot_size < copy_size) ||
    1092:	428e      	cmp	r6, r1
    1094:	d801      	bhi.n	109a <swap_run+0x22>
    1096:	428b      	cmp	r3, r1
    1098:	d904      	bls.n	10a4 <swap_run+0x2c>
    109a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    109c:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
            (primary_slot_size < secondary_slot_size)) {
           primary_slot_size += boot_img_sector_size(state,
    10a0:	6852      	ldr	r2, [r2, #4]
    10a2:	4411      	add	r1, r2
                                                     BOOT_PRIMARY_SLOT,
                                                     last_sector_idx);
        }
        if ((secondary_slot_size < copy_size) ||
    10a4:	429e      	cmp	r6, r3
    10a6:	d802      	bhi.n	10ae <swap_run+0x36>
    10a8:	4299      	cmp	r1, r3
    10aa:	f240 8125 	bls.w	12f8 <swap_run+0x280>
    10ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    10b0:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
            (secondary_slot_size < primary_slot_size)) {
           secondary_slot_size += boot_img_sector_size(state,
                                                       BOOT_SECONDARY_SLOT,
                                                       last_idx_secondary_slot);
        }
        if (primary_slot_size >= copy_size &&
    10b4:	428e      	cmp	r6, r1
           secondary_slot_size += boot_img_sector_size(state,
    10b6:	6852      	ldr	r2, [r2, #4]
    10b8:	4413      	add	r3, r2
        if (primary_slot_size >= copy_size &&
    10ba:	d803      	bhi.n	10c4 <swap_run+0x4c>
    10bc:	42b3      	cmp	r3, r6
    10be:	d301      	bcc.n	10c4 <swap_run+0x4c>
                secondary_slot_size >= copy_size &&
    10c0:	4299      	cmp	r1, r3
    10c2:	d001      	beq.n	10c8 <swap_run+0x50>
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    10c4:	3701      	adds	r7, #1
        if ((primary_slot_size < copy_size) ||
    10c6:	e7e4      	b.n	1092 <swap_run+0x1a>
        BOOT_STATUS_ASSERT(rc == 0);
    10c8:	f8df a238 	ldr.w	sl, [pc, #568]	; 1304 <swap_run+0x28c>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    10cc:	f04f 0b00 	mov.w	fp, #0
	return (uint32_t)fa->fa_size;
    10d0:	6dab      	ldr	r3, [r5, #88]	; 0x58

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    10d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    10d4:	6899      	ldr	r1, [r3, #8]
	return fs->fs_size;
    10d6:	1d10      	adds	r0, r2, #4
    sz = 0;
    10d8:	2300      	movs	r3, #0
    10da:	4699      	mov	r9, r3
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    10dc:	f850 3037 	ldr.w	r3, [r0, r7, lsl #3]
    10e0:	444b      	add	r3, r9
        if (new_sz > scratch_sz) {
    10e2:	4299      	cmp	r1, r3
    10e4:	d302      	bcc.n	10ec <swap_run+0x74>
    for (i = last_sector_idx; i >= 0; i--) {
    10e6:	3f01      	subs	r7, #1
    10e8:	d2f7      	bcs.n	10da <swap_run+0x62>
    10ea:	4699      	mov	r9, r3
    while (last_sector_idx >= 0) {
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    10ec:	6823      	ldr	r3, [r4, #0]
    10ee:	3b01      	subs	r3, #1
    10f0:	455b      	cmp	r3, fp
    10f2:	f200 80f9 	bhi.w	12e8 <swap_run+0x270>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    10f6:	1c7b      	adds	r3, r7, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    10f8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    10fa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    10fe:	6813      	ldr	r3, [r2, #0]
    1100:	eba1 0803 	sub.w	r8, r1, r3
    1104:	f005 fbc1 	bl	688a <boot_trailer_sz>
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1108:	6aab      	ldr	r3, [r5, #40]	; 0x28
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    110a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    110c:	3b01      	subs	r3, #1
    110e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    1112:	684e      	ldr	r6, [r1, #4]
    if (sector_sz < trailer_sz) {
    1114:	42b0      	cmp	r0, r6
    1116:	d907      	bls.n	1128 <swap_run+0xb0>
    1118:	f102 0c04 	add.w	ip, r2, #4
            sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, --last_sector);
    111c:	3b01      	subs	r3, #1
            trailer_sector_sz += sector_sz;
    111e:	f85c 1033 	ldr.w	r1, [ip, r3, lsl #3]
    1122:	440e      	add	r6, r1
        while (trailer_sector_sz < trailer_sz) {
    1124:	42b0      	cmp	r0, r6
    1126:	d8f9      	bhi.n	111c <swap_run+0xa4>
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    112c:	6812      	ldr	r2, [r2, #0]
    if ((img_off + sz) >
    112e:	eb09 0108 	add.w	r1, r9, r8
    1132:	1a9b      	subs	r3, r3, r2
    1134:	4299      	cmp	r1, r3
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1136:	6823      	ldr	r3, [r4, #0]
        copy_sz -= trailer_sz;
    1138:	bf8c      	ite	hi
    113a:	eba9 0600 	subhi.w	r6, r9, r0
    113e:	464e      	movls	r6, r9
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1140:	2b01      	cmp	r3, #1
    1142:	f040 80c2 	bne.w	12ca <swap_run+0x252>
    1146:	ebb9 0306 	subs.w	r3, r9, r6
    114a:	bf18      	it	ne
    114c:	2301      	movne	r3, #1
    114e:	71a3      	strb	r3, [r4, #6]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1150:	a905      	add	r1, sp, #20
    1152:	2003      	movs	r0, #3
    1154:	f000 fc32 	bl	19bc <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1158:	a906      	add	r1, sp, #24
    115a:	2001      	movs	r0, #1
    115c:	f000 fc2e 	bl	19bc <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    1160:	a907      	add	r1, sp, #28
    1162:	2007      	movs	r0, #7
    1164:	f000 fc2a 	bl	19bc <flash_area_open>
    if (bs->state == BOOT_STATUS_STATE_0) {
    1168:	7923      	ldrb	r3, [r4, #4]
    116a:	2b01      	cmp	r3, #1
    116c:	f040 80af 	bne.w	12ce <swap_run+0x256>
        rc = boot_erase_region(fap_scratch, 0, flash_area_get_size(fap_scratch));
    1170:	9807      	ldr	r0, [sp, #28]
    1172:	2100      	movs	r1, #0
    1174:	6882      	ldr	r2, [r0, #8]
    1176:	f005 fc9a 	bl	6aae <boot_erase_region>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    117a:	6823      	ldr	r3, [r4, #0]
    117c:	2b01      	cmp	r3, #1
    117e:	d116      	bne.n	11ae <swap_run+0x136>
            rc = swap_status_init(state, fap_scratch, bs);
    1180:	9907      	ldr	r1, [sp, #28]
    1182:	4622      	mov	r2, r4
    1184:	4628      	mov	r0, r5
    1186:	f005 fcca 	bl	6b1e <swap_status_init>
            if (!bs->use_scratch) {
    118a:	79a3      	ldrb	r3, [r4, #6]
    118c:	b97b      	cbnz	r3, 11ae <swap_run+0x136>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    118e:	9905      	ldr	r1, [sp, #20]
    1190:	9303      	str	r3, [sp, #12]
    1192:	4628      	mov	r0, r5
    1194:	f005 fc8d 	bl	6ab2 <swap_erase_trailer_sectors>
                rc = swap_status_init(state, fap_primary_slot, bs);
    1198:	9905      	ldr	r1, [sp, #20]
    119a:	4622      	mov	r2, r4
    119c:	4628      	mov	r0, r5
    119e:	f005 fcbe 	bl	6b1e <swap_status_init>
                rc = boot_erase_region(fap_scratch, 0,
    11a2:	9807      	ldr	r0, [sp, #28]
    11a4:	9b03      	ldr	r3, [sp, #12]
    11a6:	6882      	ldr	r2, [r0, #8]
    11a8:	4619      	mov	r1, r3
    11aa:	f005 fc80 	bl	6aae <boot_erase_region>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    11ae:	2300      	movs	r3, #0
    11b0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    11b4:	9300      	str	r3, [sp, #0]
    11b6:	9601      	str	r6, [sp, #4]
    11b8:	4643      	mov	r3, r8
    11ba:	4628      	mov	r0, r5
    11bc:	f7ff fc98 	bl	af0 <boot_copy_region>
        rc = boot_write_status(state, bs);
    11c0:	4621      	mov	r1, r4
    11c2:	4628      	mov	r0, r5
    11c4:	f005 fc3d 	bl	6a42 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    11c8:	2302      	movs	r3, #2
    11ca:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    11cc:	b120      	cbz	r0, 11d8 <swap_run+0x160>
    11ce:	f8da 3000 	ldr.w	r3, [sl]
    11d2:	3301      	adds	r3, #1
    11d4:	f8ca 3000 	str.w	r3, [sl]
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    11d8:	464a      	mov	r2, r9
    11da:	4641      	mov	r1, r8
    11dc:	9806      	ldr	r0, [sp, #24]
    11de:	f005 fc66 	bl	6aae <boot_erase_region>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    11e2:	4643      	mov	r3, r8
    11e4:	e9cd 8600 	strd	r8, r6, [sp]
    11e8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    11ec:	4628      	mov	r0, r5
    11ee:	f7ff fc7f 	bl	af0 <boot_copy_region>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    11f2:	6823      	ldr	r3, [r4, #0]
    11f4:	2b01      	cmp	r3, #1
    11f6:	d105      	bne.n	1204 <swap_run+0x18c>
    11f8:	79a3      	ldrb	r3, [r4, #6]
    11fa:	b91b      	cbnz	r3, 1204 <swap_run+0x18c>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    11fc:	9906      	ldr	r1, [sp, #24]
    11fe:	4628      	mov	r0, r5
    1200:	f005 fc57 	bl	6ab2 <swap_erase_trailer_sectors>
        rc = boot_write_status(state, bs);
    1204:	4621      	mov	r1, r4
    1206:	4628      	mov	r0, r5
    1208:	f005 fc1b 	bl	6a42 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    120c:	f04f 0303 	mov.w	r3, #3
    1210:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1212:	b120      	cbz	r0, 121e <swap_run+0x1a6>
    1214:	f8da 3000 	ldr.w	r3, [sl]
    1218:	3301      	adds	r3, #1
    121a:	f8ca 3000 	str.w	r3, [sl]
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    121e:	464a      	mov	r2, r9
    1220:	4641      	mov	r1, r8
    1222:	9805      	ldr	r0, [sp, #20]
    1224:	f005 fc43 	bl	6aae <boot_erase_region>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1228:	2300      	movs	r3, #0
    122a:	e9cd 8600 	strd	r8, r6, [sp]
    122e:	9a05      	ldr	r2, [sp, #20]
    1230:	9907      	ldr	r1, [sp, #28]
    1232:	4628      	mov	r0, r5
    1234:	f7ff fc5c 	bl	af0 <boot_copy_region>
        if (bs->use_scratch) {
    1238:	79a3      	ldrb	r3, [r4, #6]
    123a:	b36b      	cbz	r3, 1298 <swap_run+0x220>
            scratch_trailer_off = boot_status_off(fap_scratch);
    123c:	9807      	ldr	r0, [sp, #28]
    123e:	f005 fb37 	bl	68b0 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1242:	6eaa      	ldr	r2, [r5, #104]	; 0x68
    1244:	9907      	ldr	r1, [sp, #28]
    1246:	0052      	lsls	r2, r2, #1
    1248:	4446      	add	r6, r8
            scratch_trailer_off = boot_status_off(fap_scratch);
    124a:	4603      	mov	r3, r0
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    124c:	9201      	str	r2, [sp, #4]
    124e:	9600      	str	r6, [sp, #0]
    1250:	9a05      	ldr	r2, [sp, #20]
    1252:	4628      	mov	r0, r5
    1254:	f7ff fc4c 	bl	af0 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    1258:	b120      	cbz	r0, 1264 <swap_run+0x1ec>
    125a:	f8da 3000 	ldr.w	r3, [sl]
    125e:	3301      	adds	r3, #1
    1260:	f8ca 3000 	str.w	r3, [sl]
            rc = boot_read_swap_state(fap_scratch, &swap_state);
    1264:	9807      	ldr	r0, [sp, #28]
    1266:	a908      	add	r1, sp, #32
    1268:	f002 fda8 	bl	3dbc <boot_read_swap_state>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    126c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    1270:	2b01      	cmp	r3, #1
    1272:	d102      	bne.n	127a <swap_run+0x202>
                rc = boot_write_image_ok(fap_primary_slot);
    1274:	9805      	ldr	r0, [sp, #20]
    1276:	f006 fb61 	bl	793c <boot_write_image_ok>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    127a:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    127e:	2901      	cmp	r1, #1
    1280:	d003      	beq.n	128a <swap_run+0x212>
                rc = boot_write_swap_info(fap_primary_slot,
    1282:	9805      	ldr	r0, [sp, #20]
    1284:	2200      	movs	r2, #0
    1286:	f006 fb7a 	bl	797e <boot_write_swap_info>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    128a:	68a1      	ldr	r1, [r4, #8]
    128c:	9805      	ldr	r0, [sp, #20]
    128e:	f005 fb28 	bl	68e2 <boot_write_swap_size>
            rc = boot_write_magic(fap_primary_slot);
    1292:	9805      	ldr	r0, [sp, #20]
    1294:	f002 fd72 	bl	3d7c <boot_write_magic>
        bs->use_scratch = 0;
    1298:	2300      	movs	r3, #0
        erase_scratch = bs->use_scratch;
    129a:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    129c:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    129e:	4621      	mov	r1, r4
    12a0:	4628      	mov	r0, r5
    12a2:	f005 fbce 	bl	6a42 <boot_write_status>
        bs->idx++;
    12a6:	6823      	ldr	r3, [r4, #0]
    12a8:	3301      	adds	r3, #1
    12aa:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    12ac:	2301      	movs	r3, #1
    12ae:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12b0:	b120      	cbz	r0, 12bc <swap_run+0x244>
    12b2:	f8da 3000 	ldr.w	r3, [sl]
    12b6:	3301      	adds	r3, #1
    12b8:	f8ca 3000 	str.w	r3, [sl]
        if (erase_scratch) {
    12bc:	b15e      	cbz	r6, 12d6 <swap_run+0x25e>
            rc = boot_erase_region(fap_scratch, 0, sz);
    12be:	9807      	ldr	r0, [sp, #28]
    12c0:	464a      	mov	r2, r9
    12c2:	2100      	movs	r1, #0
    12c4:	f005 fbf3 	bl	6aae <boot_erase_region>
    12c8:	e005      	b.n	12d6 <swap_run+0x25e>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    12ca:	2300      	movs	r3, #0
    12cc:	e73f      	b.n	114e <swap_run+0xd6>
    if (bs->state == BOOT_STATUS_STATE_1) {
    12ce:	2b02      	cmp	r3, #2
    12d0:	d082      	beq.n	11d8 <swap_run+0x160>
    if (bs->state == BOOT_STATUS_STATE_2) {
    12d2:	2b03      	cmp	r3, #3
    12d4:	d0a3      	beq.n	121e <swap_run+0x1a6>
    flash_area_close(fap_primary_slot);
    12d6:	9805      	ldr	r0, [sp, #20]
    12d8:	f005 fdee 	bl	6eb8 <flash_area_close>
    flash_area_close(fap_secondary_slot);
    12dc:	9806      	ldr	r0, [sp, #24]
    12de:	f005 fdeb 	bl	6eb8 <flash_area_close>
    flash_area_close(fap_scratch);
    12e2:	9807      	ldr	r0, [sp, #28]
    12e4:	f005 fde8 	bl	6eb8 <flash_area_close>
    while (last_sector_idx >= 0) {
    12e8:	1c7b      	adds	r3, r7, #1
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
        swap_idx++;
    12ea:	f10b 0b01 	add.w	fp, fp, #1
    while (last_sector_idx >= 0) {
    12ee:	f47f aeef 	bne.w	10d0 <swap_run+0x58>
    }

}
    12f2:	b00b      	add	sp, #44	; 0x2c
    12f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (primary_slot_size >= copy_size &&
    12f8:	428e      	cmp	r6, r1
    12fa:	f67f aee1 	bls.w	10c0 <swap_run+0x48>
    12fe:	e6e1      	b.n	10c4 <swap_run+0x4c>
    1300:	0000a20f 	.word	0x0000a20f
    1304:	200037bc 	.word	0x200037bc

00001308 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1308:	4a16      	ldr	r2, [pc, #88]	; (1364 <nrf_cleanup_peripheral+0x5c>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    130a:	f04f 33ff 	mov.w	r3, #4294967295
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    130e:	2101      	movs	r1, #1
    1310:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1312:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1316:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    131a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    131e:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1320:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1324:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1328:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
    132c:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    132e:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1332:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1336:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    133a:	2100      	movs	r1, #0
    133c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1340:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1344:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    1348:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    134c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    }
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable_all(NRF_PPI_Type * p_reg)
{
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
    1350:	f5a2 4210 	sub.w	r2, r2, #36864	; 0x9000
    1354:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    135c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1360:	4770      	bx	lr
    1362:	bf00      	nop
    1364:	4000b000 	.word	0x4000b000

00001368 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1368:	680b      	ldr	r3, [r1, #0]
    136a:	3301      	adds	r3, #1
    136c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    136e:	4b01      	ldr	r3, [pc, #4]	; (1374 <char_out+0xc>)
    1370:	681b      	ldr	r3, [r3, #0]
    1372:	4718      	bx	r3
    1374:	20000004 	.word	0x20000004

00001378 <__printk_hook_install>:
	_char_out = fn;
    1378:	4b01      	ldr	r3, [pc, #4]	; (1380 <__printk_hook_install+0x8>)
    137a:	6018      	str	r0, [r3, #0]
}
    137c:	4770      	bx	lr
    137e:	bf00      	nop
    1380:	20000004 	.word	0x20000004

00001384 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1384:	b507      	push	{r0, r1, r2, lr}
    1386:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    1388:	2100      	movs	r1, #0
{
    138a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    138c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    138e:	4803      	ldr	r0, [pc, #12]	; (139c <vprintk+0x18>)
    1390:	a901      	add	r1, sp, #4
    1392:	f000 f8e5 	bl	1560 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1396:	b003      	add	sp, #12
    1398:	f85d fb04 	ldr.w	pc, [sp], #4
    139c:	00001369 	.word	0x00001369

000013a0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13a4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13a8:	f019 0808 	ands.w	r8, r9, #8
{
    13ac:	4604      	mov	r4, r0
    13ae:	4693      	mov	fp, r2
	if (processing) {
    13b0:	d00d      	beq.n	13ce <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    13b2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13b4:	bf0c      	ite	eq
    13b6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13ba:	f049 0920 	orrne.w	r9, r9, #32
    13be:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13c2:	f38b 8811 	msr	BASEPRI, fp
    13c6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    13ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13ce:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    13d2:	2902      	cmp	r1, #2
    13d4:	d107      	bne.n	13e6 <process_event+0x46>
			evt = process_recheck(mgr);
    13d6:	4620      	mov	r0, r4
    13d8:	f005 fc86 	bl	6ce8 <process_recheck>
		if (evt == EVT_NOP) {
    13dc:	2800      	cmp	r0, #0
    13de:	d0f0      	beq.n	13c2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    13e0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13e2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    13e4:	d14e      	bne.n	1484 <process_event+0xe4>
			res = mgr->last_res;
    13e6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13e8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    13ea:	2f00      	cmp	r7, #0
    13ec:	da15      	bge.n	141a <process_event+0x7a>
		*clients = mgr->clients;
    13ee:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13f0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    13f4:	e9c4 8800 	strd	r8, r8, [r4]
    13f8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    13fc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    13fe:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1400:	8b21      	ldrh	r1, [r4, #24]
    1402:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1406:	45ca      	cmp	sl, r9
    1408:	d002      	beq.n	1410 <process_event+0x70>
		if (do_monitors
    140a:	68a3      	ldr	r3, [r4, #8]
    140c:	2b00      	cmp	r3, #0
    140e:	d15a      	bne.n	14c6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1410:	b90d      	cbnz	r5, 1416 <process_event+0x76>
		    || (transit != NULL)) {
    1412:	2e00      	cmp	r6, #0
    1414:	d071      	beq.n	14fa <process_event+0x15a>
    1416:	2300      	movs	r3, #0
    1418:	e056      	b.n	14c8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    141a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    141e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1420:	2a01      	cmp	r2, #1
    1422:	d81e      	bhi.n	1462 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1424:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1428:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    142a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    142c:	b289      	uxth	r1, r1
    142e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1432:	d10a      	bne.n	144a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1434:	b13d      	cbz	r5, 1446 <process_event+0xa6>
    1436:	8b63      	ldrh	r3, [r4, #26]
    1438:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    143a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    143c:	3301      	adds	r3, #1
    143e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1440:	2a00      	cmp	r2, #0
    1442:	d1fa      	bne.n	143a <process_event+0x9a>
    1444:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1446:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    144a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    144c:	4620      	mov	r0, r4
    144e:	f005 fc4b 	bl	6ce8 <process_recheck>
    1452:	4606      	mov	r6, r0
    1454:	2800      	cmp	r0, #0
    1456:	d0d3      	beq.n	1400 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1458:	8b23      	ldrh	r3, [r4, #24]
    145a:	f043 0320 	orr.w	r3, r3, #32
    145e:	8323      	strh	r3, [r4, #24]
    1460:	e7cd      	b.n	13fe <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1462:	2b04      	cmp	r3, #4
    1464:	d10c      	bne.n	1480 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1466:	f021 0107 	bic.w	r1, r1, #7
    146a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    146c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    146e:	4620      	mov	r0, r4
    1470:	f005 fc3a 	bl	6ce8 <process_recheck>
    1474:	4605      	mov	r5, r0
    1476:	2800      	cmp	r0, #0
    1478:	d0c1      	beq.n	13fe <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    147a:	f041 0120 	orr.w	r1, r1, #32
    147e:	8321      	strh	r1, [r4, #24]
    1480:	2500      	movs	r5, #0
    1482:	e7bc      	b.n	13fe <process_event+0x5e>
		} else if (evt == EVT_START) {
    1484:	2803      	cmp	r0, #3
    1486:	d109      	bne.n	149c <process_event+0xfc>
			transit = mgr->transitions->start;
    1488:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    148a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    148e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1490:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1494:	8323      	strh	r3, [r4, #24]
}
    1496:	2500      	movs	r5, #0
		res = 0;
    1498:	462f      	mov	r7, r5
    149a:	e7b1      	b.n	1400 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    149c:	2804      	cmp	r0, #4
    149e:	d106      	bne.n	14ae <process_event+0x10e>
			transit = mgr->transitions->stop;
    14a0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    14a6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a8:	f043 0304 	orr.w	r3, r3, #4
    14ac:	e7f2      	b.n	1494 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    14ae:	2805      	cmp	r0, #5
    14b0:	d106      	bne.n	14c0 <process_event+0x120>
			transit = mgr->transitions->reset;
    14b2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14b4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    14b8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ba:	f043 0305 	orr.w	r3, r3, #5
    14be:	e7e9      	b.n	1494 <process_event+0xf4>
    14c0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14c2:	462e      	mov	r6, r5
    14c4:	e7e8      	b.n	1498 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    14c6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14c8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14cc:	8321      	strh	r1, [r4, #24]
    14ce:	f38b 8811 	msr	BASEPRI, fp
    14d2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    14d6:	b9fb      	cbnz	r3, 1518 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    14d8:	bb85      	cbnz	r5, 153c <process_event+0x19c>
			if (transit != NULL) {
    14da:	b116      	cbz	r6, 14e2 <process_event+0x142>
				transit(mgr, transition_complete);
    14dc:	491f      	ldr	r1, [pc, #124]	; (155c <process_event+0x1bc>)
    14de:	4620      	mov	r0, r4
    14e0:	47b0      	blx	r6
	__asm__ volatile(
    14e2:	f04f 0320 	mov.w	r3, #32
    14e6:	f3ef 8b11 	mrs	fp, BASEPRI
    14ea:	f383 8812 	msr	BASEPRI_MAX, r3
    14ee:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    14f2:	8b23      	ldrh	r3, [r4, #24]
    14f4:	f023 0308 	bic.w	r3, r3, #8
    14f8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    14fa:	8b23      	ldrh	r3, [r4, #24]
    14fc:	06da      	lsls	r2, r3, #27
    14fe:	d525      	bpl.n	154c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1500:	f023 0310 	bic.w	r3, r3, #16
    1504:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1506:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1508:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    150c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1510:	2900      	cmp	r1, #0
    1512:	f47f af5e 	bne.w	13d2 <process_event+0x32>
out:
    1516:	e754      	b.n	13c2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1518:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    151a:	2900      	cmp	r1, #0
    151c:	d0dc      	beq.n	14d8 <process_event+0x138>
	return node->next;
    151e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1522:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1526:	463b      	mov	r3, r7
    1528:	4652      	mov	r2, sl
    152a:	4620      	mov	r0, r4
    152c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    152e:	f1b9 0f00 	cmp.w	r9, #0
    1532:	d0d1      	beq.n	14d8 <process_event+0x138>
    1534:	4649      	mov	r1, r9
    1536:	f8d9 9000 	ldr.w	r9, [r9]
    153a:	e7f2      	b.n	1522 <process_event+0x182>
    153c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    153e:	463b      	mov	r3, r7
    1540:	4652      	mov	r2, sl
    1542:	4620      	mov	r0, r4
    1544:	682d      	ldr	r5, [r5, #0]
    1546:	f005 fbeb 	bl	6d20 <notify_one>
    154a:	e7c5      	b.n	14d8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    154c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1550:	bf1e      	ittt	ne
    1552:	f023 0320 	bicne.w	r3, r3, #32
    1556:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1558:	2102      	movne	r1, #2
    155a:	e7d5      	b.n	1508 <process_event+0x168>
    155c:	00006d4d 	.word	0x00006d4d

00001560 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    1560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1564:	b08f      	sub	sp, #60	; 0x3c
    1566:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1568:	1e53      	subs	r3, r2, #1
{
    156a:	9001      	str	r0, [sp, #4]
    156c:	468a      	mov	sl, r1
	fmt--;
    156e:	9302      	str	r3, [sp, #8]
	size_t count = 0;
    1570:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
    1574:	9b02      	ldr	r3, [sp, #8]
    1576:	7858      	ldrb	r0, [r3, #1]
    1578:	2825      	cmp	r0, #37	; 0x25
    157a:	f103 0401 	add.w	r4, r3, #1
    157e:	d121      	bne.n	15c4 <cbvprintf+0x64>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    1580:	f04f 0c00 	mov.w	ip, #0

	for (fmt++ ; ; fmt++) {
    1584:	4618      	mov	r0, r3
	precision = -1;
    1586:	f04f 37ff 	mov.w	r7, #4294967295
	for (fmt++ ; ; fmt++) {
    158a:	3002      	adds	r0, #2
	length_mod = 0;
    158c:	4661      	mov	r1, ip
	padding_mode = 0;
    158e:	f8cd c00c 	str.w	ip, [sp, #12]
	min_width = -1;
    1592:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    1594:	260a      	movs	r6, #10
		switch (*fmt) {
    1596:	7802      	ldrb	r2, [r0, #0]
    1598:	9002      	str	r0, [sp, #8]
    159a:	2a39      	cmp	r2, #57	; 0x39
    159c:	f100 0001 	add.w	r0, r0, #1
    15a0:	d858      	bhi.n	1654 <cbvprintf+0xf4>
    15a2:	2a1f      	cmp	r2, #31
    15a4:	d818      	bhi.n	15d8 <cbvprintf+0x78>
    15a6:	2a00      	cmp	r2, #0
    15a8:	f000 81f6 	beq.w	1998 <cbvprintf+0x438>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    15ac:	9b01      	ldr	r3, [sp, #4]
    15ae:	4651      	mov	r1, sl
    15b0:	2025      	movs	r0, #37	; 0x25
    15b2:	4798      	blx	r3
			OUTC(*fmt);
    15b4:	9b02      	ldr	r3, [sp, #8]
    15b6:	4651      	mov	r1, sl
    15b8:	7818      	ldrb	r0, [r3, #0]
    15ba:	9b01      	ldr	r3, [sp, #4]
    15bc:	4798      	blx	r3
    15be:	f109 0902 	add.w	r9, r9, #2
			goto start;
    15c2:	e7d7      	b.n	1574 <cbvprintf+0x14>
		if (*fmt == '\0') {
    15c4:	2800      	cmp	r0, #0
    15c6:	f000 81e7 	beq.w	1998 <cbvprintf+0x438>
		OUTC(*fmt);
    15ca:	9b01      	ldr	r3, [sp, #4]
    15cc:	4651      	mov	r1, sl
    15ce:	4798      	blx	r3
    15d0:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    15d4:	9402      	str	r4, [sp, #8]
    15d6:	e7cd      	b.n	1574 <cbvprintf+0x14>
		switch (*fmt) {
    15d8:	f1a2 0320 	sub.w	r3, r2, #32
    15dc:	2b19      	cmp	r3, #25
    15de:	d8e5      	bhi.n	15ac <cbvprintf+0x4c>
    15e0:	f20f 0e04 	addw	lr, pc, #4
    15e4:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    15e8:	00001651 	.word	0x00001651
    15ec:	000015ad 	.word	0x000015ad
    15f0:	000015ad 	.word	0x000015ad
    15f4:	00001651 	.word	0x00001651
    15f8:	000015ad 	.word	0x000015ad
    15fc:	000016d5 	.word	0x000016d5
    1600:	000015ad 	.word	0x000015ad
    1604:	000015ad 	.word	0x000015ad
    1608:	000015ad 	.word	0x000015ad
    160c:	000015ad 	.word	0x000015ad
    1610:	00001717 	.word	0x00001717
    1614:	00001651 	.word	0x00001651
    1618:	000015ad 	.word	0x000015ad
    161c:	0000172b 	.word	0x0000172b
    1620:	000016e3 	.word	0x000016e3
    1624:	000015ad 	.word	0x000015ad
    1628:	000016ef 	.word	0x000016ef
    162c:	0000170b 	.word	0x0000170b
    1630:	0000170b 	.word	0x0000170b
    1634:	0000170b 	.word	0x0000170b
    1638:	0000170b 	.word	0x0000170b
    163c:	0000170b 	.word	0x0000170b
    1640:	0000170b 	.word	0x0000170b
    1644:	0000170b 	.word	0x0000170b
    1648:	0000170b 	.word	0x0000170b
    164c:	0000170b 	.word	0x0000170b
    1650:	4694      	mov	ip, r2
    1652:	e7a0      	b.n	1596 <cbvprintf+0x36>
    1654:	2a58      	cmp	r2, #88	; 0x58
    1656:	f000 811b 	beq.w	1890 <cbvprintf+0x330>
    165a:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    165e:	fa5f fe83 	uxtb.w	lr, r3
    1662:	f1be 0f17 	cmp.w	lr, #23
    1666:	d8a1      	bhi.n	15ac <cbvprintf+0x4c>
    1668:	2b17      	cmp	r3, #23
    166a:	d89f      	bhi.n	15ac <cbvprintf+0x4c>
    166c:	f20f 0e04 	addw	lr, pc, #4
    1670:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1674:	000018f3 	.word	0x000018f3
    1678:	00001751 	.word	0x00001751
    167c:	000015ad 	.word	0x000015ad
    1680:	000015ad 	.word	0x000015ad
    1684:	000015ad 	.word	0x000015ad
    1688:	00001731 	.word	0x00001731
    168c:	00001751 	.word	0x00001751
    1690:	000015ad 	.word	0x000015ad
    1694:	000015ad 	.word	0x000015ad
    1698:	00001731 	.word	0x00001731
    169c:	000015ad 	.word	0x000015ad
    16a0:	000015ad 	.word	0x000015ad
    16a4:	000015ad 	.word	0x000015ad
    16a8:	0000183b 	.word	0x0000183b
    16ac:	000015ad 	.word	0x000015ad
    16b0:	000015ad 	.word	0x000015ad
    16b4:	000018d3 	.word	0x000018d3
    16b8:	000015ad 	.word	0x000015ad
    16bc:	00001751 	.word	0x00001751
    16c0:	000015ad 	.word	0x000015ad
    16c4:	000015ad 	.word	0x000015ad
    16c8:	0000183b 	.word	0x0000183b
    16cc:	000015ad 	.word	0x000015ad
    16d0:	00001731 	.word	0x00001731
			OUTC('%');
    16d4:	9b01      	ldr	r3, [sp, #4]
    16d6:	4651      	mov	r1, sl
    16d8:	2025      	movs	r0, #37	; 0x25
    16da:	4798      	blx	r3
    16dc:	f109 0901 	add.w	r9, r9, #1
			goto start;
    16e0:	e748      	b.n	1574 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    16e2:	9b03      	ldr	r3, [sp, #12]
    16e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    16e8:	9303      	str	r3, [sp, #12]
			precision = 0;
    16ea:	2700      	movs	r7, #0
			continue;
    16ec:	e753      	b.n	1596 <cbvprintf+0x36>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    16ee:	2c00      	cmp	r4, #0
    16f0:	da0b      	bge.n	170a <cbvprintf+0x1aa>
    16f2:	2f00      	cmp	r7, #0
    16f4:	da0b      	bge.n	170e <cbvprintf+0x1ae>
    16f6:	9b03      	ldr	r3, [sp, #12]
    16f8:	2b00      	cmp	r3, #0
    16fa:	f000 8149 	beq.w	1990 <cbvprintf+0x430>
				min_width = 10 * min_width + *fmt - '0';
    16fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1702:	fb06 2404 	mla	r4, r6, r4, r2
    1706:	3c30      	subs	r4, #48	; 0x30
    1708:	e745      	b.n	1596 <cbvprintf+0x36>
			if (precision >= 0) {
    170a:	2f00      	cmp	r7, #0
    170c:	dbf7      	blt.n	16fe <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
    170e:	fb06 2707 	mla	r7, r6, r7, r2
    1712:	3f30      	subs	r7, #48	; 0x30
    1714:	e73f      	b.n	1596 <cbvprintf+0x36>
			if (precision >= 0) {
    1716:	2f00      	cmp	r7, #0
    1718:	f855 3b04 	ldr.w	r3, [r5], #4
    171c:	db01      	blt.n	1722 <cbvprintf+0x1c2>
				precision = va_arg(ap, int);
    171e:	461f      	mov	r7, r3
    1720:	e739      	b.n	1596 <cbvprintf+0x36>
				if (min_width < 0) {
    1722:	1e1c      	subs	r4, r3, #0
    1724:	f6bf af37 	bge.w	1596 <cbvprintf+0x36>
					min_width = -min_width;
    1728:	4264      	negs	r4, r4
		switch (*fmt) {
    172a:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    172c:	9303      	str	r3, [sp, #12]
    172e:	e732      	b.n	1596 <cbvprintf+0x36>
			if (*fmt == 'h' && length_mod == 'h') {
    1730:	2a68      	cmp	r2, #104	; 0x68
    1732:	d103      	bne.n	173c <cbvprintf+0x1dc>
    1734:	2968      	cmp	r1, #104	; 0x68
    1736:	d106      	bne.n	1746 <cbvprintf+0x1e6>
				length_mod = 'H';
    1738:	2148      	movs	r1, #72	; 0x48
    173a:	e72c      	b.n	1596 <cbvprintf+0x36>
			} else if (*fmt == 'l' && length_mod == 'l') {
    173c:	2a6c      	cmp	r2, #108	; 0x6c
    173e:	d102      	bne.n	1746 <cbvprintf+0x1e6>
    1740:	296c      	cmp	r1, #108	; 0x6c
    1742:	f000 8127 	beq.w	1994 <cbvprintf+0x434>
			} else if (length_mod == '\0') {
    1746:	2900      	cmp	r1, #0
    1748:	f47f af30 	bne.w	15ac <cbvprintf+0x4c>
    174c:	4611      	mov	r1, r2
		switch (*fmt) {
    174e:	e722      	b.n	1596 <cbvprintf+0x36>
			if (length_mod == 'z') {
    1750:	297a      	cmp	r1, #122	; 0x7a
    1752:	d107      	bne.n	1764 <cbvprintf+0x204>
			} else if (*fmt == 'u') {
    1754:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    1756:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
    175a:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
    175c:	d162      	bne.n	1824 <cbvprintf+0x2c4>
				d = va_arg(ap, unsigned int);
    175e:	f04f 0800 	mov.w	r8, #0
    1762:	e00d      	b.n	1780 <cbvprintf+0x220>
			} else if (length_mod == 'l') {
    1764:	296c      	cmp	r1, #108	; 0x6c
    1766:	d0f5      	beq.n	1754 <cbvprintf+0x1f4>
			} else if (length_mod == 'L') {
    1768:	294c      	cmp	r1, #76	; 0x4c
    176a:	d1f3      	bne.n	1754 <cbvprintf+0x1f4>
					unsigned long long llu =
    176c:	1deb      	adds	r3, r5, #7
    176e:	f023 0307 	bic.w	r3, r3, #7
    1772:	461e      	mov	r6, r3
				if (*fmt == 'u') {
    1774:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
    1776:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
    177a:	d107      	bne.n	178c <cbvprintf+0x22c>
					unsigned long long llu =
    177c:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
    1780:	f1bc 0f20 	cmp.w	ip, #32
    1784:	d151      	bne.n	182a <cbvprintf+0x2ca>
				prefix = " ";
    1786:	4b86      	ldr	r3, [pc, #536]	; (19a0 <cbvprintf+0x440>)
				min_width--;
    1788:	3c01      	subs	r4, #1
    178a:	e009      	b.n	17a0 <cbvprintf+0x240>
					d = (int_value_type) lld;
    178c:	4605      	mov	r5, r0
    178e:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1790:	f1b8 0f00 	cmp.w	r8, #0
    1794:	daf4      	bge.n	1780 <cbvprintf+0x220>
				d = -d;
    1796:	426d      	negs	r5, r5
				prefix = "-";
    1798:	4b82      	ldr	r3, [pc, #520]	; (19a4 <cbvprintf+0x444>)
				d = -d;
    179a:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
    179e:	3c01      	subs	r4, #1
	prefix = "";
    17a0:	9300      	str	r3, [sp, #0]
	int i = 0;
    17a2:	ab0d      	add	r3, sp, #52	; 0x34
    17a4:	9305      	str	r3, [sp, #20]
    17a6:	f04f 0b00 	mov.w	fp, #0
		unsigned int c = num % base;
    17aa:	4628      	mov	r0, r5
    17ac:	4641      	mov	r1, r8
    17ae:	220a      	movs	r2, #10
    17b0:	2300      	movs	r3, #0
    17b2:	f8cd b010 	str.w	fp, [sp, #16]
    17b6:	f7fe fca3 	bl	100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    17ba:	9b05      	ldr	r3, [sp, #20]
    17bc:	f8cd 801c 	str.w	r8, [sp, #28]
    17c0:	3230      	adds	r2, #48	; 0x30
    17c2:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    17c6:	4628      	mov	r0, r5
    17c8:	e9cd 3505 	strd	r3, r5, [sp, #20]
    17cc:	4641      	mov	r1, r8
    17ce:	2300      	movs	r3, #0
    17d0:	220a      	movs	r2, #10
    17d2:	f7fe fc95 	bl	100 <__aeabi_uldivmod>
	} while (num);
    17d6:	9b06      	ldr	r3, [sp, #24]
    17d8:	2b0a      	cmp	r3, #10
    17da:	9b07      	ldr	r3, [sp, #28]
    17dc:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    17e0:	f10b 3bff 	add.w	fp, fp, #4294967295
		num /= base;
    17e4:	4605      	mov	r5, r0
    17e6:	4688      	mov	r8, r1
	} while (num);
    17e8:	d2df      	bcs.n	17aa <cbvprintf+0x24a>
	return -i;
    17ea:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    17ec:	9a04      	ldr	r2, [sp, #16]
	return -i;
    17ee:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    17f2:	ab0e      	add	r3, sp, #56	; 0x38
    17f4:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    17f6:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    17f8:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    17fc:	da04      	bge.n	1808 <cbvprintf+0x2a8>
    17fe:	9b03      	ldr	r3, [sp, #12]
    1800:	f013 0f01 	tst.w	r3, #1
    1804:	bf18      	it	ne
    1806:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1808:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    180a:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
    180e:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
    1812:	bfd4      	ite	le
    1814:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
    1818:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
    181a:	079b      	lsls	r3, r3, #30
    181c:	f100 8081 	bmi.w	1922 <cbvprintf+0x3c2>
    1820:	4627      	mov	r7, r4
    1822:	e077      	b.n	1914 <cbvprintf+0x3b4>
				d = va_arg(ap, int);
    1824:	ea4f 78e5 	mov.w	r8, r5, asr #31
    1828:	e7b2      	b.n	1790 <cbvprintf+0x230>
			} else if (special == '+') {
    182a:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    182e:	bf0a      	itet	eq
    1830:	4b5d      	ldreq	r3, [pc, #372]	; (19a8 <cbvprintf+0x448>)
	prefix = "";
    1832:	4b5e      	ldrne	r3, [pc, #376]	; (19ac <cbvprintf+0x44c>)
				min_width--;
    1834:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1838:	e7b2      	b.n	17a0 <cbvprintf+0x240>
			if (*fmt == 'p') {
    183a:	2a70      	cmp	r2, #112	; 0x70
    183c:	d128      	bne.n	1890 <cbvprintf+0x330>
				x = (uintptr_t)va_arg(ap, void *);
    183e:	462e      	mov	r6, r5
    1840:	2300      	movs	r3, #0
    1842:	f856 1b04 	ldr.w	r1, [r6], #4
				if (x == (uint_value_type)0) {
    1846:	2900      	cmp	r1, #0
    1848:	d05c      	beq.n	1904 <cbvprintf+0x3a4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    184a:	4859      	ldr	r0, [pc, #356]	; (19b0 <cbvprintf+0x450>)
    184c:	9000      	str	r0, [sp, #0]
				min_width -= 2;
    184e:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1850:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1854:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
    1858:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    185c:	2500      	movs	r5, #0
		unsigned int c = num % base;
    185e:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
    1862:	2a09      	cmp	r2, #9
			c += alpha;
    1864:	bf88      	it	hi
    1866:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
    1868:	3230      	adds	r2, #48	; 0x30
    186a:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    186e:	2910      	cmp	r1, #16
		num /= base;
    1870:	ea4f 1211 	mov.w	r2, r1, lsr #4
    1874:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    1878:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    187c:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1880:	f105 3cff 	add.w	ip, r5, #4294967295
	} while (num);
    1884:	d221      	bcs.n	18ca <cbvprintf+0x36a>
			data = buf + sizeof(buf) - data_len;
    1886:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    1888:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
    188c:	441d      	add	r5, r3
    188e:	e7b2      	b.n	17f6 <cbvprintf+0x296>
			} else if (length_mod == 'l') {
    1890:	296c      	cmp	r1, #108	; 0x6c
    1892:	d104      	bne.n	189e <cbvprintf+0x33e>
				x = va_arg(ap, unsigned int);
    1894:	462e      	mov	r6, r5
    1896:	2300      	movs	r3, #0
    1898:	f856 1b04 	ldr.w	r1, [r6], #4
    189c:	e008      	b.n	18b0 <cbvprintf+0x350>
			} else if (length_mod == 'L') {
    189e:	294c      	cmp	r1, #76	; 0x4c
    18a0:	d1f8      	bne.n	1894 <cbvprintf+0x334>
				unsigned long long llx =
    18a2:	3507      	adds	r5, #7
    18a4:	f025 0507 	bic.w	r5, r5, #7
    18a8:	462e      	mov	r6, r5
    18aa:	686b      	ldr	r3, [r5, #4]
    18ac:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
    18b0:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    18b4:	d106      	bne.n	18c4 <cbvprintf+0x364>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18b6:	4d3f      	ldr	r5, [pc, #252]	; (19b4 <cbvprintf+0x454>)
    18b8:	483d      	ldr	r0, [pc, #244]	; (19b0 <cbvprintf+0x450>)
    18ba:	f012 0f20 	tst.w	r2, #32
    18be:	bf08      	it	eq
    18c0:	4628      	moveq	r0, r5
    18c2:	e7c3      	b.n	184c <cbvprintf+0x2ec>
	prefix = "";
    18c4:	4839      	ldr	r0, [pc, #228]	; (19ac <cbvprintf+0x44c>)
    18c6:	9000      	str	r0, [sp, #0]
    18c8:	e7c2      	b.n	1850 <cbvprintf+0x2f0>
		buftop[--i] = c + '0';
    18ca:	4665      	mov	r5, ip
		num /= base;
    18cc:	4611      	mov	r1, r2
    18ce:	4603      	mov	r3, r0
    18d0:	e7c5      	b.n	185e <cbvprintf+0x2fe>
			data = va_arg(ap, char *);
    18d2:	462e      	mov	r6, r5
    18d4:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
    18d8:	4628      	mov	r0, r5
    18da:	f005 fb86 	bl	6fea <strlen>
			if (precision >= 0 && data_len > precision) {
    18de:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    18e0:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    18e2:	db02      	blt.n	18ea <cbvprintf+0x38a>
    18e4:	42b8      	cmp	r0, r7
    18e6:	bfa8      	it	ge
    18e8:	46bb      	movge	fp, r7
    18ea:	4b30      	ldr	r3, [pc, #192]	; (19ac <cbvprintf+0x44c>)
    18ec:	9300      	str	r3, [sp, #0]
    18ee:	2700      	movs	r7, #0
    18f0:	e78a      	b.n	1808 <cbvprintf+0x2a8>
			int c = va_arg(ap, int);
    18f2:	462e      	mov	r6, r5
			data_len = 1;
    18f4:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    18f8:	f856 3b04 	ldr.w	r3, [r6], #4
    18fc:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    1900:	ad08      	add	r5, sp, #32
    1902:	e7f2      	b.n	18ea <cbvprintf+0x38a>
					data = "(nil)";
    1904:	4d2c      	ldr	r5, [pc, #176]	; (19b8 <cbvprintf+0x458>)
					data_len = 5;
    1906:	f04f 0b05 	mov.w	fp, #5
    190a:	e7ee      	b.n	18ea <cbvprintf+0x38a>
			while (--min_width >= 0) {
				OUTC(' ');
    190c:	9b01      	ldr	r3, [sp, #4]
    190e:	4651      	mov	r1, sl
    1910:	2020      	movs	r0, #32
    1912:	4798      	blx	r3
			while (--min_width >= 0) {
    1914:	3f01      	subs	r7, #1
    1916:	d5f9      	bpl.n	190c <cbvprintf+0x3ac>
    1918:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    191c:	3c01      	subs	r4, #1
    191e:	4499      	add	r9, r3
    1920:	1ae4      	subs	r4, r4, r3
    1922:	9b00      	ldr	r3, [sp, #0]
    1924:	eba9 0903 	sub.w	r9, r9, r3
    1928:	e004      	b.n	1934 <cbvprintf+0x3d4>
    192a:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    192c:	4651      	mov	r1, sl
    192e:	9b01      	ldr	r3, [sp, #4]
    1930:	4798      	blx	r3
    1932:	9b00      	ldr	r3, [sp, #0]
    1934:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
    1938:	f813 0b01 	ldrb.w	r0, [r3], #1
    193c:	2800      	cmp	r0, #0
    193e:	d1f4      	bne.n	192a <cbvprintf+0x3ca>
		precision -= data_len;
    1940:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
    1942:	f1b9 0901 	subs.w	r9, r9, #1
    1946:	d513      	bpl.n	1970 <cbvprintf+0x410>
    1948:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    194c:	46d9      	mov	r9, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    194e:	f1b9 0901 	subs.w	r9, r9, #1
    1952:	d512      	bpl.n	197a <cbvprintf+0x41a>
    1954:	f1bb 0f00 	cmp.w	fp, #0
    1958:	bfa8      	it	ge
    195a:	44d8      	addge	r8, fp
    195c:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    195e:	3d01      	subs	r5, #1
    1960:	d511      	bpl.n	1986 <cbvprintf+0x426>
    1962:	2c00      	cmp	r4, #0
    1964:	bfa8      	it	ge
    1966:	44a0      	addge	r8, r4
    1968:	eb08 0907 	add.w	r9, r8, r7
    196c:	4635      	mov	r5, r6
    196e:	e601      	b.n	1574 <cbvprintf+0x14>
			OUTC('0');
    1970:	9b01      	ldr	r3, [sp, #4]
    1972:	4651      	mov	r1, sl
    1974:	2030      	movs	r0, #48	; 0x30
    1976:	4798      	blx	r3
    1978:	e7e3      	b.n	1942 <cbvprintf+0x3e2>
			OUTC(*data++);
    197a:	f815 0b01 	ldrb.w	r0, [r5], #1
    197e:	9b01      	ldr	r3, [sp, #4]
    1980:	4651      	mov	r1, sl
    1982:	4798      	blx	r3
    1984:	e7e3      	b.n	194e <cbvprintf+0x3ee>
			OUTC(' ');
    1986:	9b01      	ldr	r3, [sp, #4]
    1988:	4651      	mov	r1, sl
    198a:	2020      	movs	r0, #32
    198c:	4798      	blx	r3
    198e:	e7e6      	b.n	195e <cbvprintf+0x3fe>
				padding_mode = PAD_ZERO;
    1990:	2301      	movs	r3, #1
    1992:	e6cb      	b.n	172c <cbvprintf+0x1cc>
				length_mod = 'L';
    1994:	214c      	movs	r1, #76	; 0x4c
    1996:	e5fe      	b.n	1596 <cbvprintf+0x36>
		}

		goto start;
	}
}
    1998:	4648      	mov	r0, r9
    199a:	b00f      	add	sp, #60	; 0x3c
    199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19a0:	0000a6dd 	.word	0x0000a6dd
    19a4:	0000a359 	.word	0x0000a359
    19a8:	0000a35b 	.word	0x0000a35b
    19ac:	0000aaba 	.word	0x0000aaba
    19b0:	0000a360 	.word	0x0000a360
    19b4:	0000a35d 	.word	0x0000a35d
    19b8:	0000a363 	.word	0x0000a363

000019bc <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    19bc:	4b0c      	ldr	r3, [pc, #48]	; (19f0 <flash_area_open+0x34>)
    19be:	681b      	ldr	r3, [r3, #0]
{
    19c0:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    19c2:	b173      	cbz	r3, 19e2 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    19c4:	4a0b      	ldr	r2, [pc, #44]	; (19f4 <flash_area_open+0x38>)
    19c6:	6815      	ldr	r5, [r2, #0]
    19c8:	2200      	movs	r2, #0
    19ca:	42aa      	cmp	r2, r5
    19cc:	db02      	blt.n	19d4 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    19ce:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    19d2:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    19d4:	461c      	mov	r4, r3
    19d6:	f813 6b10 	ldrb.w	r6, [r3], #16
    19da:	4286      	cmp	r6, r0
    19dc:	d004      	beq.n	19e8 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    19de:	3201      	adds	r2, #1
    19e0:	e7f3      	b.n	19ca <flash_area_open+0xe>
		return -EACCES;
    19e2:	f06f 000c 	mvn.w	r0, #12
    19e6:	e7f4      	b.n	19d2 <flash_area_open+0x16>
	*fap = area;
    19e8:	600c      	str	r4, [r1, #0]
	return 0;
    19ea:	2000      	movs	r0, #0
    19ec:	e7f1      	b.n	19d2 <flash_area_open+0x16>
    19ee:	bf00      	nop
    19f0:	20000008 	.word	0x20000008
    19f4:	00009ad8 	.word	0x00009ad8

000019f8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    19f8:	b570      	push	{r4, r5, r6, lr}
    19fa:	b088      	sub	sp, #32
    19fc:	4605      	mov	r5, r0
    19fe:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1a00:	b2c0      	uxtb	r0, r0
    1a02:	4669      	mov	r1, sp
{
    1a04:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1a06:	f7ff ffd9 	bl	19bc <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1a0a:	2800      	cmp	r0, #0
    1a0c:	db1f      	blt.n	1a4e <flash_area_get_sectors+0x56>
    1a0e:	9b00      	ldr	r3, [sp, #0]
    1a10:	b1eb      	cbz	r3, 1a4e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1a12:	685a      	ldr	r2, [r3, #4]
    1a14:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1a16:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
    1a18:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1a1a:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
    1a1c:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1a1e:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1a22:	2200      	movs	r2, #0
	cb_data->status = 0;
    1a24:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1a28:	9205      	str	r2, [sp, #20]
    1a2a:	f003 fd0f 	bl	544c <z_impl_device_get_binding>
    1a2e:	4605      	mov	r5, r0
	flash_area_close(fa);
    1a30:	9800      	ldr	r0, [sp, #0]
    1a32:	f005 fa41 	bl	6eb8 <flash_area_close>
	if (flash_dev == NULL) {
    1a36:	b16d      	cbz	r5, 1a54 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1a38:	4628      	mov	r0, r5
    1a3a:	4908      	ldr	r1, [pc, #32]	; (1a5c <flash_area_get_sectors+0x64>)
    1a3c:	aa01      	add	r2, sp, #4
    1a3e:	f005 fddf 	bl	7600 <flash_page_foreach>
	if (cb_data->status == 0) {
    1a42:	9807      	ldr	r0, [sp, #28]
    1a44:	b908      	cbnz	r0, 1a4a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1a46:	9b05      	ldr	r3, [sp, #20]
    1a48:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1a4a:	b008      	add	sp, #32
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1a4e:	f06f 0015 	mvn.w	r0, #21
    1a52:	e7fa      	b.n	1a4a <flash_area_get_sectors+0x52>
		return -ENODEV;
    1a54:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1a58:	e7f7      	b.n	1a4a <flash_area_get_sectors+0x52>
    1a5a:	bf00      	nop
    1a5c:	00006f7d 	.word	0x00006f7d

00001a60 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1a60:	4901      	ldr	r1, [pc, #4]	; (1a68 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1a62:	2210      	movs	r2, #16
	str	r2, [r1]
    1a64:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1a66:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1a68:	e000ed10 	.word	0xe000ed10

00001a6c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1a6c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1a6e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1a70:	f380 8811 	msr	BASEPRI, r0
	isb
    1a74:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1a78:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1a7c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1a7e:	b662      	cpsie	i
	isb
    1a80:	f3bf 8f6f 	isb	sy

	bx	lr
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop

00001a88 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1a88:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1a8a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1a8c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1a90:	bf20      	wfe

	msr	BASEPRI, r0
    1a92:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1a96:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1a98:	4770      	bx	lr
    1a9a:	bf00      	nop

00001a9c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1a9e:	4605      	mov	r5, r0

	if (esf != NULL) {
    1aa0:	460c      	mov	r4, r1
    1aa2:	b1c9      	cbz	r1, 1ad8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1aa4:	688b      	ldr	r3, [r1, #8]
    1aa6:	9300      	str	r3, [sp, #0]
    1aa8:	e9d1 2300 	ldrd	r2, r3, [r1]
    1aac:	480e      	ldr	r0, [pc, #56]	; (1ae8 <z_arm_fatal_error+0x4c>)
    1aae:	2145      	movs	r1, #69	; 0x45
    1ab0:	f005 f9f5 	bl	6e9e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1ab4:	6963      	ldr	r3, [r4, #20]
    1ab6:	9300      	str	r3, [sp, #0]
    1ab8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1abc:	480b      	ldr	r0, [pc, #44]	; (1aec <z_arm_fatal_error+0x50>)
    1abe:	2145      	movs	r1, #69	; 0x45
    1ac0:	f005 f9ed 	bl	6e9e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1ac4:	69e2      	ldr	r2, [r4, #28]
    1ac6:	480a      	ldr	r0, [pc, #40]	; (1af0 <z_arm_fatal_error+0x54>)
    1ac8:	2145      	movs	r1, #69	; 0x45
    1aca:	f005 f9e8 	bl	6e9e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1ace:	69a2      	ldr	r2, [r4, #24]
    1ad0:	4808      	ldr	r0, [pc, #32]	; (1af4 <z_arm_fatal_error+0x58>)
    1ad2:	2145      	movs	r1, #69	; 0x45
    1ad4:	f005 f9e3 	bl	6e9e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1ad8:	4621      	mov	r1, r4
    1ada:	4628      	mov	r0, r5
}
    1adc:	b003      	add	sp, #12
    1ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1ae2:	f003 bcdd 	b.w	54a0 <z_fatal_error>
    1ae6:	bf00      	nop
    1ae8:	0000a371 	.word	0x0000a371
    1aec:	0000a3a5 	.word	0x0000a3a5
    1af0:	0000a3d9 	.word	0x0000a3d9
    1af4:	0000a3ed 	.word	0x0000a3ed

00001af8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1af8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1afa:	2b00      	cmp	r3, #0
    1afc:	db08      	blt.n	1b10 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afe:	2201      	movs	r2, #1
    1b00:	f000 001f 	and.w	r0, r0, #31
    1b04:	fa02 f000 	lsl.w	r0, r2, r0
    1b08:	095b      	lsrs	r3, r3, #5
    1b0a:	4a02      	ldr	r2, [pc, #8]	; (1b14 <arch_irq_enable+0x1c>)
    1b0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1b10:	4770      	bx	lr
    1b12:	bf00      	nop
    1b14:	e000e100 	.word	0xe000e100

00001b18 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1b18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	db0d      	blt.n	1b3a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b1e:	2201      	movs	r2, #1
    1b20:	095b      	lsrs	r3, r3, #5
    1b22:	f000 001f 	and.w	r0, r0, #31
    1b26:	fa02 f000 	lsl.w	r0, r2, r0
    1b2a:	3320      	adds	r3, #32
    1b2c:	4a03      	ldr	r2, [pc, #12]	; (1b3c <arch_irq_disable+0x24>)
    1b2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b36:	f3bf 8f6f 	isb	sy
}
    1b3a:	4770      	bx	lr
    1b3c:	e000e100 	.word	0xe000e100

00001b40 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b40:	4b05      	ldr	r3, [pc, #20]	; (1b58 <arch_irq_is_enabled+0x18>)
    1b42:	0942      	lsrs	r2, r0, #5
    1b44:	f000 001f 	and.w	r0, r0, #31
    1b48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b4c:	2301      	movs	r3, #1
    1b4e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b52:	4010      	ands	r0, r2
    1b54:	4770      	bx	lr
    1b56:	bf00      	nop
    1b58:	e000e100 	.word	0xe000e100

00001b5c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b5c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b5e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b60:	bfa8      	it	ge
    1b62:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1b66:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b6a:	bfb8      	it	lt
    1b6c:	4b06      	ldrlt	r3, [pc, #24]	; (1b88 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b6e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1b72:	bfac      	ite	ge
    1b74:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b78:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b7c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b7e:	bfb4      	ite	lt
    1b80:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b82:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1b86:	4770      	bx	lr
    1b88:	e000ed14 	.word	0xe000ed14

00001b8c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1b8c:	bf30      	wfi
    b z_SysNmiOnReset
    1b8e:	f7ff bffd 	b.w	1b8c <z_SysNmiOnReset>
    1b92:	bf00      	nop

00001b94 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b94:	4a0b      	ldr	r2, [pc, #44]	; (1bc4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1b96:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b98:	4b0b      	ldr	r3, [pc, #44]	; (1bc8 <z_arm_prep_c+0x34>)
    1b9a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1b9e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1ba0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ba4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1ba8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1bac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1bb4:	f003 fcda 	bl	556c <z_bss_zero>
	z_data_copy();
    1bb8:	f004 fbbc 	bl	6334 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1bbc:	f000 fa7c 	bl	20b8 <z_arm_interrupt_init>
	z_cstart();
    1bc0:	f003 fd14 	bl	55ec <z_cstart>
    1bc4:	00000000 	.word	0x00000000
    1bc8:	e000ed00 	.word	0xe000ed00

00001bcc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1bcc:	4a09      	ldr	r2, [pc, #36]	; (1bf4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1bce:	490a      	ldr	r1, [pc, #40]	; (1bf8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1bd0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1bd2:	6809      	ldr	r1, [r1, #0]
    1bd4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1bd6:	4909      	ldr	r1, [pc, #36]	; (1bfc <arch_swap+0x30>)
	_current->arch.basepri = key;
    1bd8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1bda:	684b      	ldr	r3, [r1, #4]
    1bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1be0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1be2:	2300      	movs	r3, #0
    1be4:	f383 8811 	msr	BASEPRI, r3
    1be8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1bec:	6893      	ldr	r3, [r2, #8]
}
    1bee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	200039c4 	.word	0x200039c4
    1bf8:	00009de4 	.word	0x00009de4
    1bfc:	e000ed00 	.word	0xe000ed00

00001c00 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1c00:	490f      	ldr	r1, [pc, #60]	; (1c40 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1c02:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1c04:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1c08:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1c0a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1c0e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1c12:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1c14:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1c18:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1c1c:	4f09      	ldr	r7, [pc, #36]	; (1c44 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1c1e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1c22:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    1c24:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1c26:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1c28:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1c2a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1c2c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1c2e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1c32:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1c36:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1c3a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1c3e:	4770      	bx	lr
    ldr r1, =_kernel
    1c40:	200039c4 	.word	0x200039c4
    ldr v4, =_SCS_ICSR
    1c44:	e000ed04 	.word	0xe000ed04

00001c48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1c56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1c58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1c5c:	2902      	cmp	r1, #2
    beq _oops
    1c5e:	d0ff      	beq.n	1c60 <_oops>

00001c60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1c60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1c62:	f005 f9a9 	bl	6fb8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1c66:	bd01      	pop	{r0, pc}

00001c68 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1c68:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1c6c:	9b00      	ldr	r3, [sp, #0]
    1c6e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1c72:	490a      	ldr	r1, [pc, #40]	; (1c9c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1c74:	9b01      	ldr	r3, [sp, #4]
    1c76:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1c7a:	9b02      	ldr	r3, [sp, #8]
    1c7c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1c80:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1c88:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1c8c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1c90:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1c92:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1c94:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1c96:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1c98:	4770      	bx	lr
    1c9a:	bf00      	nop
    1c9c:	00006e89 	.word	0x00006e89

00001ca0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1ca0:	4b07      	ldr	r3, [pc, #28]	; (1cc0 <arch_switch_to_main_thread+0x20>)
    1ca2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1ca4:	4610      	mov	r0, r2
    1ca6:	f381 8809 	msr	PSP, r1
    1caa:	2100      	movs	r1, #0
    1cac:	b663      	cpsie	if
    1cae:	f381 8811 	msr	BASEPRI, r1
    1cb2:	f3bf 8f6f 	isb	sy
    1cb6:	2200      	movs	r2, #0
    1cb8:	2300      	movs	r3, #0
    1cba:	f005 f8e5 	bl	6e88 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1cbe:	bf00      	nop
    1cc0:	200039c4 	.word	0x200039c4

00001cc4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1cc4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1cc6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1cca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1cce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1cd2:	4904      	ldr	r1, [pc, #16]	; (1ce4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1cd4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1cd6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1cd8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1cda:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1cde:	4902      	ldr	r1, [pc, #8]	; (1ce8 <_isr_wrapper+0x24>)
	bx r1
    1ce0:	4708      	bx	r1
    1ce2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1ce4:	00009820 	.word	0x00009820
	ldr r1, =z_arm_int_exit
    1ce8:	00001ced 	.word	0x00001ced

00001cec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1cec:	4b04      	ldr	r3, [pc, #16]	; (1d00 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1cee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1cf0:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    1cf2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1cf4:	d003      	beq.n	1cfe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1cf6:	4903      	ldr	r1, [pc, #12]	; (1d04 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1cfc:	600a      	str	r2, [r1, #0]

00001cfe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1cfe:	4770      	bx	lr
	ldr r3, =_kernel
    1d00:	200039c4 	.word	0x200039c4
	ldr r1, =_SCS_ICSR
    1d04:	e000ed04 	.word	0xe000ed04

00001d08 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1d08:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d0a:	4c1d      	ldr	r4, [pc, #116]	; (1d80 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1d0c:	481d      	ldr	r0, [pc, #116]	; (1d84 <usage_fault.constprop.0+0x7c>)
    1d0e:	2145      	movs	r1, #69	; 0x45
    1d10:	f005 f8c5 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d16:	019b      	lsls	r3, r3, #6
    1d18:	d503      	bpl.n	1d22 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1d1a:	481b      	ldr	r0, [pc, #108]	; (1d88 <usage_fault.constprop.0+0x80>)
    1d1c:	2145      	movs	r1, #69	; 0x45
    1d1e:	f005 f8be 	bl	6e9e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d24:	01dc      	lsls	r4, r3, #7
    1d26:	d503      	bpl.n	1d30 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1d28:	4818      	ldr	r0, [pc, #96]	; (1d8c <usage_fault.constprop.0+0x84>)
    1d2a:	2145      	movs	r1, #69	; 0x45
    1d2c:	f005 f8b7 	bl	6e9e <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d30:	4c13      	ldr	r4, [pc, #76]	; (1d80 <usage_fault.constprop.0+0x78>)
    1d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d34:	0318      	lsls	r0, r3, #12
    1d36:	d503      	bpl.n	1d40 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    1d38:	4815      	ldr	r0, [pc, #84]	; (1d90 <usage_fault.constprop.0+0x88>)
    1d3a:	2145      	movs	r1, #69	; 0x45
    1d3c:	f005 f8af 	bl	6e9e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d42:	0359      	lsls	r1, r3, #13
    1d44:	d503      	bpl.n	1d4e <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1d46:	4813      	ldr	r0, [pc, #76]	; (1d94 <usage_fault.constprop.0+0x8c>)
    1d48:	2145      	movs	r1, #69	; 0x45
    1d4a:	f005 f8a8 	bl	6e9e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d4e:	4c0c      	ldr	r4, [pc, #48]	; (1d80 <usage_fault.constprop.0+0x78>)
    1d50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d52:	039a      	lsls	r2, r3, #14
    1d54:	d503      	bpl.n	1d5e <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1d56:	4810      	ldr	r0, [pc, #64]	; (1d98 <usage_fault.constprop.0+0x90>)
    1d58:	2145      	movs	r1, #69	; 0x45
    1d5a:	f005 f8a0 	bl	6e9e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d60:	03db      	lsls	r3, r3, #15
    1d62:	d503      	bpl.n	1d6c <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1d64:	480d      	ldr	r0, [pc, #52]	; (1d9c <usage_fault.constprop.0+0x94>)
    1d66:	2145      	movs	r1, #69	; 0x45
    1d68:	f005 f899 	bl	6e9e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d6c:	4a04      	ldr	r2, [pc, #16]	; (1d80 <usage_fault.constprop.0+0x78>)
    1d6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d70:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1d74:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1d78:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1d7a:	2000      	movs	r0, #0
    1d7c:	bd10      	pop	{r4, pc}
    1d7e:	bf00      	nop
    1d80:	e000ed00 	.word	0xe000ed00
    1d84:	0000a420 	.word	0x0000a420
    1d88:	0000a43d 	.word	0x0000a43d
    1d8c:	0000a455 	.word	0x0000a455
    1d90:	0000a474 	.word	0x0000a474
    1d94:	0000a497 	.word	0x0000a497
    1d98:	0000a4c1 	.word	0x0000a4c1
    1d9c:	0000a4e0 	.word	0x0000a4e0

00001da0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1da0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1da2:	4c23      	ldr	r4, [pc, #140]	; (1e30 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1da4:	4606      	mov	r6, r0
    1da6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1da8:	4822      	ldr	r0, [pc, #136]	; (1e34 <bus_fault.constprop.0+0x94>)
    1daa:	2145      	movs	r1, #69	; 0x45
    1dac:	f005 f877 	bl	6e9e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1db0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1db2:	04d9      	lsls	r1, r3, #19
    1db4:	d503      	bpl.n	1dbe <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1db6:	4820      	ldr	r0, [pc, #128]	; (1e38 <bus_fault.constprop.0+0x98>)
    1db8:	2145      	movs	r1, #69	; 0x45
    1dba:	f005 f870 	bl	6e9e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dc0:	051a      	lsls	r2, r3, #20
    1dc2:	d503      	bpl.n	1dcc <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1dc4:	481d      	ldr	r0, [pc, #116]	; (1e3c <bus_fault.constprop.0+0x9c>)
    1dc6:	2145      	movs	r1, #69	; 0x45
    1dc8:	f005 f869 	bl	6e9e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1dcc:	4c18      	ldr	r4, [pc, #96]	; (1e30 <bus_fault.constprop.0+0x90>)
    1dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dd0:	059b      	lsls	r3, r3, #22
    1dd2:	d510      	bpl.n	1df6 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1dd4:	481a      	ldr	r0, [pc, #104]	; (1e40 <bus_fault.constprop.0+0xa0>)
    1dd6:	2145      	movs	r1, #69	; 0x45
    1dd8:	f005 f861 	bl	6e9e <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1ddc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1de0:	0418      	lsls	r0, r3, #16
    1de2:	d508      	bpl.n	1df6 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1de4:	4817      	ldr	r0, [pc, #92]	; (1e44 <bus_fault.constprop.0+0xa4>)
    1de6:	2145      	movs	r1, #69	; 0x45
    1de8:	f005 f859 	bl	6e9e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1dec:	b11e      	cbz	r6, 1df6 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1df4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1df6:	4c0e      	ldr	r4, [pc, #56]	; (1e30 <bus_fault.constprop.0+0x90>)
    1df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dfa:	0559      	lsls	r1, r3, #21
    1dfc:	d503      	bpl.n	1e06 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1dfe:	4812      	ldr	r0, [pc, #72]	; (1e48 <bus_fault.constprop.0+0xa8>)
    1e00:	2145      	movs	r1, #69	; 0x45
    1e02:	f005 f84c 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e08:	05da      	lsls	r2, r3, #23
    1e0a:	d50b      	bpl.n	1e24 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1e0c:	480f      	ldr	r0, [pc, #60]	; (1e4c <bus_fault.constprop.0+0xac>)
    1e0e:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e10:	f005 f845 	bl	6e9e <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e14:	4a06      	ldr	r2, [pc, #24]	; (1e30 <bus_fault.constprop.0+0x90>)
    1e16:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e18:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e1a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e1e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e20:	7028      	strb	r0, [r5, #0]
}
    1e22:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e26:	049b      	lsls	r3, r3, #18
    1e28:	d5f4      	bpl.n	1e14 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e2a:	4809      	ldr	r0, [pc, #36]	; (1e50 <bus_fault.constprop.0+0xb0>)
    1e2c:	2145      	movs	r1, #69	; 0x45
    1e2e:	e7ef      	b.n	1e10 <bus_fault.constprop.0+0x70>
    1e30:	e000ed00 	.word	0xe000ed00
    1e34:	0000a510 	.word	0x0000a510
    1e38:	0000a52b 	.word	0x0000a52b
    1e3c:	0000a541 	.word	0x0000a541
    1e40:	0000a559 	.word	0x0000a559
    1e44:	0000a577 	.word	0x0000a577
    1e48:	0000a591 	.word	0x0000a591
    1e4c:	0000a5b1 	.word	0x0000a5b1
    1e50:	0000a5ce 	.word	0x0000a5ce

00001e54 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e54:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e56:	4c26      	ldr	r4, [pc, #152]	; (1ef0 <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e58:	4606      	mov	r6, r0
    1e5a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1e5c:	4825      	ldr	r0, [pc, #148]	; (1ef4 <mem_manage_fault.constprop.0+0xa0>)
    1e5e:	2145      	movs	r1, #69	; 0x45
    1e60:	f005 f81d 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e66:	06d8      	lsls	r0, r3, #27
    1e68:	d503      	bpl.n	1e72 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1e6a:	4823      	ldr	r0, [pc, #140]	; (1ef8 <mem_manage_fault.constprop.0+0xa4>)
    1e6c:	2145      	movs	r1, #69	; 0x45
    1e6e:	f005 f816 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1e72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e74:	0719      	lsls	r1, r3, #28
    1e76:	d503      	bpl.n	1e80 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1e78:	4820      	ldr	r0, [pc, #128]	; (1efc <mem_manage_fault.constprop.0+0xa8>)
    1e7a:	2145      	movs	r1, #69	; 0x45
    1e7c:	f005 f80f 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1e80:	4c1b      	ldr	r4, [pc, #108]	; (1ef0 <mem_manage_fault.constprop.0+0x9c>)
    1e82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e84:	079a      	lsls	r2, r3, #30
    1e86:	d510      	bpl.n	1eaa <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1e88:	481d      	ldr	r0, [pc, #116]	; (1f00 <mem_manage_fault.constprop.0+0xac>)
    1e8a:	2145      	movs	r1, #69	; 0x45
    1e8c:	f005 f807 	bl	6e9e <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1e90:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1e92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e94:	061b      	lsls	r3, r3, #24
    1e96:	d508      	bpl.n	1eaa <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1e98:	481a      	ldr	r0, [pc, #104]	; (1f04 <mem_manage_fault.constprop.0+0xb0>)
    1e9a:	2145      	movs	r1, #69	; 0x45
    1e9c:	f004 ffff 	bl	6e9e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1ea0:	b11e      	cbz	r6, 1eaa <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1ea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1ea8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1eaa:	4c11      	ldr	r4, [pc, #68]	; (1ef0 <mem_manage_fault.constprop.0+0x9c>)
    1eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eae:	07de      	lsls	r6, r3, #31
    1eb0:	d503      	bpl.n	1eba <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    1eb2:	4815      	ldr	r0, [pc, #84]	; (1f08 <mem_manage_fault.constprop.0+0xb4>)
    1eb4:	2145      	movs	r1, #69	; 0x45
    1eb6:	f004 fff2 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ebc:	0698      	lsls	r0, r3, #26
    1ebe:	d503      	bpl.n	1ec8 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    1ec0:	4812      	ldr	r0, [pc, #72]	; (1f0c <mem_manage_fault.constprop.0+0xb8>)
    1ec2:	2145      	movs	r1, #69	; 0x45
    1ec4:	f004 ffeb 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1ec8:	4b09      	ldr	r3, [pc, #36]	; (1ef0 <mem_manage_fault.constprop.0+0x9c>)
    1eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ecc:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1ece:	bf58      	it	pl
    1ed0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ed4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1ed6:	bf42      	ittt	mi
    1ed8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1eda:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1ede:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1ee0:	4a03      	ldr	r2, [pc, #12]	; (1ef0 <mem_manage_fault.constprop.0+0x9c>)
    1ee2:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1ee4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1ee6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1eea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1eec:	7028      	strb	r0, [r5, #0]
}
    1eee:	bd70      	pop	{r4, r5, r6, pc}
    1ef0:	e000ed00 	.word	0xe000ed00
    1ef4:	0000a602 	.word	0x0000a602
    1ef8:	0000a61d 	.word	0x0000a61d
    1efc:	0000a541 	.word	0x0000a541
    1f00:	0000a655 	.word	0x0000a655
    1f04:	0000a672 	.word	0x0000a672
    1f08:	0000a68d 	.word	0x0000a68d
    1f0c:	0000a5ce 	.word	0x0000a5ce

00001f10 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f14:	4b54      	ldr	r3, [pc, #336]	; (2068 <z_arm_fault+0x158>)
    1f16:	685e      	ldr	r6, [r3, #4]
{
    1f18:	b08a      	sub	sp, #40	; 0x28
    1f1a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f1c:	f3c6 0408 	ubfx	r4, r6, #0, #9
    1f20:	2500      	movs	r5, #0
    1f22:	f385 8811 	msr	BASEPRI, r5
    1f26:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1f2a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1f2e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1f32:	d107      	bne.n	1f44 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1f34:	f002 030c 	and.w	r3, r2, #12
    1f38:	2b08      	cmp	r3, #8
    1f3a:	d105      	bne.n	1f48 <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1f3c:	484b      	ldr	r0, [pc, #300]	; (206c <z_arm_fault+0x15c>)
    1f3e:	2145      	movs	r1, #69	; 0x45
    1f40:	f004 ffad 	bl	6e9e <z_log_minimal_printk>
		return NULL;
    1f44:	462f      	mov	r7, r5
    1f46:	e003      	b.n	1f50 <z_arm_fault+0x40>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1f48:	0712      	lsls	r2, r2, #28
    1f4a:	d401      	bmi.n	1f50 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    1f4c:	4607      	mov	r7, r0
			*nested_exc = true;
    1f4e:	2501      	movs	r5, #1
	*recoverable = false;
    1f50:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1f54:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    1f56:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1f5a:	2b09      	cmp	r3, #9
    1f5c:	d872      	bhi.n	2044 <z_arm_fault+0x134>
    1f5e:	e8df f003 	tbb	[pc, r3]
    1f62:	6605      	.short	0x6605
    1f64:	7171636a 	.word	0x7171636a
    1f68:	6e717171 	.word	0x6e717171
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f6c:	4e3e      	ldr	r6, [pc, #248]	; (2068 <z_arm_fault+0x158>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1f6e:	4840      	ldr	r0, [pc, #256]	; (2070 <z_arm_fault+0x160>)
    1f70:	2145      	movs	r1, #69	; 0x45
    1f72:	f004 ff94 	bl	6e9e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f76:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    1f78:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f7c:	f014 0402 	ands.w	r4, r4, #2
    1f80:	d005      	beq.n	1f8e <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    1f82:	483c      	ldr	r0, [pc, #240]	; (2074 <z_arm_fault+0x164>)
    1f84:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    1f86:	f004 ff8a 	bl	6e9e <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f8a:	2400      	movs	r4, #0
}
    1f8c:	e006      	b.n	1f9c <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1f8e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1f90:	2b00      	cmp	r3, #0
    1f92:	da1d      	bge.n	1fd0 <z_arm_fault+0xc0>
		PR_EXC("  Debug event");
    1f94:	4838      	ldr	r0, [pc, #224]	; (2078 <z_arm_fault+0x168>)
    1f96:	2145      	movs	r1, #69	; 0x45
    1f98:	f004 ff81 	bl	6e9e <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1f9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1fa0:	b99b      	cbnz	r3, 1fca <z_arm_fault+0xba>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1fa2:	2220      	movs	r2, #32
    1fa4:	4639      	mov	r1, r7
    1fa6:	a802      	add	r0, sp, #8
    1fa8:	f005 f843 	bl	7032 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fae:	2d00      	cmp	r5, #0
    1fb0:	d055      	beq.n	205e <z_arm_fault+0x14e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1fb6:	b922      	cbnz	r2, 1fc2 <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1fb8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1fbc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1fc0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1fc2:	a902      	add	r1, sp, #8
    1fc4:	4620      	mov	r0, r4
    1fc6:	f7ff fd69 	bl	1a9c <z_arm_fatal_error>
}
    1fca:	b00a      	add	sp, #40	; 0x28
    1fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1fd0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1fd2:	005b      	lsls	r3, r3, #1
    1fd4:	d5e2      	bpl.n	1f9c <z_arm_fault+0x8c>
		PR_EXC("  Fault escalation (see below)");
    1fd6:	4829      	ldr	r0, [pc, #164]	; (207c <z_arm_fault+0x16c>)
    1fd8:	2145      	movs	r1, #69	; 0x45
    1fda:	f004 ff60 	bl	6e9e <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1fde:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1fe0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1fe4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1fe8:	429a      	cmp	r2, r3
    1fea:	d009      	beq.n	2000 <z_arm_fault+0xf0>
		} else if (SCB_MMFSR != 0) {
    1fec:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    1ff0:	b16b      	cbz	r3, 200e <z_arm_fault+0xfe>
			reason = mem_manage_fault(esf, 1, recoverable);
    1ff2:	f10d 0107 	add.w	r1, sp, #7
    1ff6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1ff8:	f7ff ff2c 	bl	1e54 <mem_manage_fault.constprop.0>
    1ffc:	4604      	mov	r4, r0
		break;
    1ffe:	e7cd      	b.n	1f9c <z_arm_fault+0x8c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2000:	683a      	ldr	r2, [r7, #0]
    2002:	481f      	ldr	r0, [pc, #124]	; (2080 <z_arm_fault+0x170>)
    2004:	2145      	movs	r1, #69	; 0x45
    2006:	f004 ff4a 	bl	6e9e <z_log_minimal_printk>
			reason = esf->basic.r0;
    200a:	683c      	ldr	r4, [r7, #0]
    200c:	e7c6      	b.n	1f9c <z_arm_fault+0x8c>
		} else if (SCB_BFSR != 0) {
    200e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    2012:	b12b      	cbz	r3, 2020 <z_arm_fault+0x110>
			reason = bus_fault(esf, 1, recoverable);
    2014:	f10d 0107 	add.w	r1, sp, #7
    2018:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    201a:	f7ff fec1 	bl	1da0 <bus_fault.constprop.0>
    201e:	e7ed      	b.n	1ffc <z_arm_fault+0xec>
		} else if (SCB_UFSR != 0) {
    2020:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    2022:	b29b      	uxth	r3, r3
    2024:	2b00      	cmp	r3, #0
    2026:	d0b9      	beq.n	1f9c <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    2028:	f7ff fe6e 	bl	1d08 <usage_fault.constprop.0>
    202c:	e7e6      	b.n	1ffc <z_arm_fault+0xec>
		reason = mem_manage_fault(esf, 0, recoverable);
    202e:	f10d 0107 	add.w	r1, sp, #7
    2032:	2000      	movs	r0, #0
    2034:	e7e0      	b.n	1ff8 <z_arm_fault+0xe8>
		reason = bus_fault(esf, 0, recoverable);
    2036:	f10d 0107 	add.w	r1, sp, #7
    203a:	2000      	movs	r0, #0
    203c:	e7ed      	b.n	201a <z_arm_fault+0x10a>
	PR_FAULT_INFO(
    203e:	4811      	ldr	r0, [pc, #68]	; (2084 <z_arm_fault+0x174>)
    2040:	2145      	movs	r1, #69	; 0x45
    2042:	e7a0      	b.n	1f86 <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    2044:	4910      	ldr	r1, [pc, #64]	; (2088 <z_arm_fault+0x178>)
    2046:	4a11      	ldr	r2, [pc, #68]	; (208c <z_arm_fault+0x17c>)
    2048:	4811      	ldr	r0, [pc, #68]	; (2090 <z_arm_fault+0x180>)
    204a:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    204e:	bf08      	it	eq
    2050:	460a      	moveq	r2, r1
    2052:	f1a4 0310 	sub.w	r3, r4, #16
    2056:	2145      	movs	r1, #69	; 0x45
    2058:	f004 ff21 	bl	6e9e <z_log_minimal_printk>
    205c:	e795      	b.n	1f8a <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    205e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2062:	f023 0301 	bic.w	r3, r3, #1
    2066:	e7ab      	b.n	1fc0 <z_arm_fault+0xb0>
    2068:	e000ed00 	.word	0xe000ed00
    206c:	0000a6df 	.word	0x0000a6df
    2070:	0000a70f 	.word	0x0000a70f
    2074:	0000a72b 	.word	0x0000a72b
    2078:	0000a751 	.word	0x0000a751
    207c:	0000a764 	.word	0x0000a764
    2080:	0000a788 	.word	0x0000a788
    2084:	0000a7a9 	.word	0x0000a7a9
    2088:	0000a6b1 	.word	0x0000a6b1
    208c:	0000a6c6 	.word	0x0000a6c6
    2090:	0000a7d2 	.word	0x0000a7d2

00002094 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2094:	4a02      	ldr	r2, [pc, #8]	; (20a0 <z_arm_fault_init+0xc>)
    2096:	6953      	ldr	r3, [r2, #20]
    2098:	f043 0310 	orr.w	r3, r3, #16
    209c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    209e:	4770      	bx	lr
    20a0:	e000ed00 	.word	0xe000ed00

000020a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    20a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    20a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    20ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    20ae:	4672      	mov	r2, lr
	bl z_arm_fault
    20b0:	f7ff ff2e 	bl	1f10 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    20b4:	bd01      	pop	{r0, pc}
    20b6:	bf00      	nop

000020b8 <z_arm_interrupt_init>:
    20b8:	4804      	ldr	r0, [pc, #16]	; (20cc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    20ba:	2300      	movs	r3, #0
    20bc:	2120      	movs	r1, #32
    20be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    20c0:	3301      	adds	r3, #1
    20c2:	2b30      	cmp	r3, #48	; 0x30
    20c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    20c8:	d1f9      	bne.n	20be <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    20ca:	4770      	bx	lr
    20cc:	e000e100 	.word	0xe000e100

000020d0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    20d0:	2000      	movs	r0, #0
    msr CONTROL, r0
    20d2:	f380 8814 	msr	CONTROL, r0
    isb
    20d6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    20da:	f007 faff 	bl	96dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    20de:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    20e0:	490d      	ldr	r1, [pc, #52]	; (2118 <__start+0x48>)
    str r0, [r1]
    20e2:	6008      	str	r0, [r1, #0]
    dsb
    20e4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    20e8:	480c      	ldr	r0, [pc, #48]	; (211c <__start+0x4c>)
    msr msp, r0
    20ea:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    20ee:	f000 f82b 	bl	2148 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    20f2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    20f4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    20f8:	4809      	ldr	r0, [pc, #36]	; (2120 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    20fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    20fe:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2100:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2104:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2108:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    210a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    210c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2110:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2114:	f7ff fd3e 	bl	1b94 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2118:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    211c:	20007f18 	.word	0x20007f18
    ldr r0, =z_interrupt_stacks
    2120:	20008058 	.word	0x20008058

00002124 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2124:	4907      	ldr	r1, [pc, #28]	; (2144 <z_arm_clear_arm_mpu_config+0x20>)
    2126:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    212a:	2300      	movs	r3, #0
	int num_regions =
    212c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2130:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2132:	4293      	cmp	r3, r2
    2134:	d100      	bne.n	2138 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2136:	4770      	bx	lr
  MPU->RNR = rnr;
    2138:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    213c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2140:	3301      	adds	r3, #1
    2142:	e7f6      	b.n	2132 <z_arm_clear_arm_mpu_config+0xe>
    2144:	e000ed00 	.word	0xe000ed00

00002148 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2148:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    214a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    214c:	2300      	movs	r3, #0
    214e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2152:	f7ff ffe7 	bl	2124 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2156:	4b14      	ldr	r3, [pc, #80]	; (21a8 <z_arm_init_arch_hw_at_boot+0x60>)
    2158:	f04f 32ff 	mov.w	r2, #4294967295
    215c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    216c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2170:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2174:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    217c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2180:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2184:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2188:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    218c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2190:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2194:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2198:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    219c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    219e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21a2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    21a6:	bd08      	pop	{r3, pc}
    21a8:	e000e100 	.word	0xe000e100

000021ac <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    21ac:	4b08      	ldr	r3, [pc, #32]	; (21d0 <z_impl_k_thread_abort+0x24>)
    21ae:	689b      	ldr	r3, [r3, #8]
    21b0:	4283      	cmp	r3, r0
    21b2:	d10b      	bne.n	21cc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    21b4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    21b8:	b143      	cbz	r3, 21cc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21ba:	4b06      	ldr	r3, [pc, #24]	; (21d4 <z_impl_k_thread_abort+0x28>)
    21bc:	685a      	ldr	r2, [r3, #4]
    21be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    21c2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    21c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    21c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    21ca:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    21cc:	f004 b84e 	b.w	626c <z_thread_abort>
    21d0:	200039c4 	.word	0x200039c4
    21d4:	e000ed00 	.word	0xe000ed00

000021d8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    21d8:	4b02      	ldr	r3, [pc, #8]	; (21e4 <z_arm_configure_static_mpu_regions+0xc>)
    21da:	4a03      	ldr	r2, [pc, #12]	; (21e8 <z_arm_configure_static_mpu_regions+0x10>)
    21dc:	4803      	ldr	r0, [pc, #12]	; (21ec <z_arm_configure_static_mpu_regions+0x14>)
    21de:	2101      	movs	r1, #1
    21e0:	f000 b86c 	b.w	22bc <arm_core_mpu_configure_static_mpu_regions>
    21e4:	20020000 	.word	0x20020000
    21e8:	20000000 	.word	0x20000000
    21ec:	00009adc 	.word	0x00009adc

000021f0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    21f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    21f2:	4f24      	ldr	r7, [pc, #144]	; (2284 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
    21f4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    21f6:	2200      	movs	r2, #0
    21f8:	428a      	cmp	r2, r1
    21fa:	da0e      	bge.n	221a <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    21fc:	6844      	ldr	r4, [r0, #4]
    21fe:	2c00      	cmp	r4, #0
    2200:	d03c      	beq.n	227c <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2202:	b193      	cbz	r3, 222a <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2204:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2208:	ea14 0f0c 	tst.w	r4, ip
    220c:	d007      	beq.n	221e <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    220e:	481e      	ldr	r0, [pc, #120]	; (2288 <mpu_configure_regions+0x98>)
    2210:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2212:	f004 fe44 	bl	6e9e <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2216:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    221a:	4628      	mov	r0, r5
    221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    221e:	2c1f      	cmp	r4, #31
    2220:	d9f5      	bls.n	220e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    2222:	6806      	ldr	r6, [r0, #0]
		&&
    2224:	ea1c 0f06 	tst.w	ip, r6
    2228:	d1f1      	bne.n	220e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    222a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    222c:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    222e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2232:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
    2234:	d910      	bls.n	2258 <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
    2236:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    223a:	d80f      	bhi.n	225c <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    223c:	3c01      	subs	r4, #1
    223e:	fab4 f484 	clz	r4, r4
    2242:	f1c4 041f 	rsb	r4, r4, #31
    2246:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2248:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    224a:	ea4c 0404 	orr.w	r4, ip, r4
    224e:	d907      	bls.n	2260 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2250:	480e      	ldr	r0, [pc, #56]	; (228c <mpu_configure_regions+0x9c>)
    2252:	462a      	mov	r2, r5
    2254:	2145      	movs	r1, #69	; 0x45
    2256:	e7dc      	b.n	2212 <mpu_configure_regions+0x22>
		return REGION_32B;
    2258:	2408      	movs	r4, #8
    225a:	e7f5      	b.n	2248 <mpu_configure_regions+0x58>
		return REGION_4G;
    225c:	243e      	movs	r4, #62	; 0x3e
    225e:	e7f3      	b.n	2248 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2260:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2264:	432e      	orrs	r6, r5
    2266:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    226a:	f044 0401 	orr.w	r4, r4, #1
    226e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2272:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
    2276:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2278:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    227c:	3201      	adds	r2, #1
    227e:	300c      	adds	r0, #12
    2280:	e7ba      	b.n	21f8 <mpu_configure_regions+0x8>
    2282:	bf00      	nop
    2284:	e000ed00 	.word	0xe000ed00
    2288:	0000a7ee 	.word	0x0000a7ee
    228c:	0000a816 	.word	0x0000a816

00002290 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2290:	4b04      	ldr	r3, [pc, #16]	; (22a4 <arm_core_mpu_enable+0x14>)
    2292:	2205      	movs	r2, #5
    2294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    229c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    22a0:	4770      	bx	lr
    22a2:	bf00      	nop
    22a4:	e000ed00 	.word	0xe000ed00

000022a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    22a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    22ac:	4b02      	ldr	r3, [pc, #8]	; (22b8 <arm_core_mpu_disable+0x10>)
    22ae:	2200      	movs	r2, #0
    22b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    22b4:	4770      	bx	lr
    22b6:	bf00      	nop
    22b8:	e000ed00 	.word	0xe000ed00

000022bc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    22bc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    22be:	4c03      	ldr	r4, [pc, #12]	; (22cc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    22c0:	2301      	movs	r3, #1
    22c2:	7822      	ldrb	r2, [r4, #0]
    22c4:	f7ff ff94 	bl	21f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22c8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    22ca:	bd10      	pop	{r4, pc}
    22cc:	20005302 	.word	0x20005302

000022d0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    22d0:	4914      	ldr	r1, [pc, #80]	; (2324 <z_arm_mpu_init+0x54>)
    22d2:	6808      	ldr	r0, [r1, #0]
    22d4:	2808      	cmp	r0, #8
{
    22d6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    22d8:	d821      	bhi.n	231e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    22da:	f7ff ffe5 	bl	22a8 <arm_core_mpu_disable>
    22de:	4c12      	ldr	r4, [pc, #72]	; (2328 <z_arm_mpu_init+0x58>)
    22e0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    22e2:	2200      	movs	r2, #0
    22e4:	4290      	cmp	r0, r2
    22e6:	f101 010c 	add.w	r1, r1, #12
    22ea:	d105      	bne.n	22f8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    22ec:	4b0f      	ldr	r3, [pc, #60]	; (232c <z_arm_mpu_init+0x5c>)
    22ee:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    22f0:	f7ff ffce 	bl	2290 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    22f4:	2000      	movs	r0, #0
}
    22f6:	bd10      	pop	{r4, pc}
    22f8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22fc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2300:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2304:	4313      	orrs	r3, r2
    2306:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    230a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    230e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2312:	f043 0301 	orr.w	r3, r3, #1
    2316:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    231a:	3201      	adds	r2, #1
    231c:	e7e2      	b.n	22e4 <z_arm_mpu_init+0x14>
		return -1;
    231e:	f04f 30ff 	mov.w	r0, #4294967295
    2322:	e7e8      	b.n	22f6 <z_arm_mpu_init+0x26>
    2324:	00009ae8 	.word	0x00009ae8
    2328:	e000ed00 	.word	0xe000ed00
    232c:	20005302 	.word	0x20005302

00002330 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2330:	4b01      	ldr	r3, [pc, #4]	; (2338 <__stdout_hook_install+0x8>)
    2332:	6018      	str	r0, [r3, #0]
}
    2334:	4770      	bx	lr
    2336:	bf00      	nop
    2338:	2000000c 	.word	0x2000000c

0000233c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    233c:	f04f 0320 	mov.w	r3, #32
    2340:	f3ef 8211 	mrs	r2, BASEPRI
    2344:	f383 8812 	msr	BASEPRI_MAX, r3
    2348:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    234c:	4906      	ldr	r1, [pc, #24]	; (2368 <nordicsemi_nrf52_init+0x2c>)
    234e:	2301      	movs	r3, #1
    2350:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2354:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2358:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    235c:	f382 8811 	msr	BASEPRI, r2
    2360:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2364:	2000      	movs	r0, #0
    2366:	4770      	bx	lr
    2368:	4001e000 	.word	0x4001e000

0000236c <sys_arch_reboot>:
    *p_gpregret = val;
    236c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2370:	b2c0      	uxtb	r0, r0
    2372:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2376:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    237a:	4905      	ldr	r1, [pc, #20]	; (2390 <sys_arch_reboot+0x24>)
    237c:	4b05      	ldr	r3, [pc, #20]	; (2394 <sys_arch_reboot+0x28>)
    237e:	68ca      	ldr	r2, [r1, #12]
    2380:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2384:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2386:	60cb      	str	r3, [r1, #12]
    2388:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    238c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    238e:	e7fd      	b.n	238c <sys_arch_reboot+0x20>
    2390:	e000ed00 	.word	0xe000ed00
    2394:	05fa0004 	.word	0x05fa0004

00002398 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2398:	b120      	cbz	r0, 23a4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    239a:	4b03      	ldr	r3, [pc, #12]	; (23a8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    239c:	0180      	lsls	r0, r0, #6
    239e:	f043 0301 	orr.w	r3, r3, #1
    23a2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    23a4:	4770      	bx	lr
    23a6:	bf00      	nop
    23a8:	00009a30 	.word	0x00009a30

000023ac <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    23ac:	4b08      	ldr	r3, [pc, #32]	; (23d0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    23ae:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    23b0:	1ac3      	subs	r3, r0, r3
{
    23b2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23b4:	4907      	ldr	r1, [pc, #28]	; (23d4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    23b6:	109b      	asrs	r3, r3, #2
{
    23b8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23ba:	4359      	muls	r1, r3
    23bc:	4806      	ldr	r0, [pc, #24]	; (23d8 <onoff_stop+0x2c>)
    23be:	2240      	movs	r2, #64	; 0x40
    23c0:	f004 fe6a 	bl	7098 <stop>
	notify(mgr, res);
    23c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23c6:	4601      	mov	r1, r0
	notify(mgr, res);
    23c8:	4620      	mov	r0, r4
}
    23ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    23ce:	4718      	bx	r3
    23d0:	200037d0 	.word	0x200037d0
    23d4:	b6db6db7 	.word	0xb6db6db7
    23d8:	00009760 	.word	0x00009760

000023dc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    23dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    23de:	4c0c      	ldr	r4, [pc, #48]	; (2410 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    23e0:	4a0c      	ldr	r2, [pc, #48]	; (2414 <onoff_start+0x38>)
    23e2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    23e4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    23e6:	9300      	str	r3, [sp, #0]
{
    23e8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    23ea:	460b      	mov	r3, r1
    23ec:	490a      	ldr	r1, [pc, #40]	; (2418 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    23ee:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    23f0:	4361      	muls	r1, r4
{
    23f2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    23f4:	4809      	ldr	r0, [pc, #36]	; (241c <onoff_start+0x40>)
    23f6:	f004 fe7c 	bl	70f2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    23fa:	1e01      	subs	r1, r0, #0
    23fc:	da05      	bge.n	240a <onoff_start+0x2e>
		notify(mgr, err);
    23fe:	4630      	mov	r0, r6
    2400:	462b      	mov	r3, r5
	}
}
    2402:	b002      	add	sp, #8
    2404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2408:	4718      	bx	r3
}
    240a:	b002      	add	sp, #8
    240c:	bd70      	pop	{r4, r5, r6, pc}
    240e:	bf00      	nop
    2410:	200037d0 	.word	0x200037d0
    2414:	00007161 	.word	0x00007161
    2418:	b6db6db7 	.word	0xb6db6db7
    241c:	00009760 	.word	0x00009760

00002420 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2420:	2200      	movs	r2, #0
{
    2422:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2424:	2101      	movs	r1, #1
{
    2426:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2428:	4610      	mov	r0, r2
    242a:	f7ff fb97 	bl	1b5c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    242e:	4811      	ldr	r0, [pc, #68]	; (2474 <clk_init+0x54>)
    2430:	f002 f9f4 	bl	481c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2434:	4b10      	ldr	r3, [pc, #64]	; (2478 <clk_init+0x58>)
    2436:	4298      	cmp	r0, r3
    2438:	d118      	bne.n	246c <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    243a:	6920      	ldr	r0, [r4, #16]
    243c:	f000 f9ca 	bl	27d4 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    2440:	f006 feb7 	bl	91b2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2444:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2446:	490d      	ldr	r1, [pc, #52]	; (247c <clk_init+0x5c>)
    2448:	4630      	mov	r0, r6
    244a:	f004 fc9c 	bl	6d86 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    244e:	2800      	cmp	r0, #0
    2450:	db0b      	blt.n	246a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    2452:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2454:	4909      	ldr	r1, [pc, #36]	; (247c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2456:	2501      	movs	r5, #1
    2458:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    245a:	f104 001c 	add.w	r0, r4, #28
    245e:	f004 fc92 	bl	6d86 <onoff_manager_init>
		if (err < 0) {
    2462:	2800      	cmp	r0, #0
    2464:	db01      	blt.n	246a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2466:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2468:	2000      	movs	r0, #0
}
    246a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    246c:	f06f 0004 	mvn.w	r0, #4
    2470:	e7fb      	b.n	246a <clk_init+0x4a>
    2472:	bf00      	nop
    2474:	000024b5 	.word	0x000024b5
    2478:	0bad0000 	.word	0x0bad0000
    247c:	00009b38 	.word	0x00009b38

00002480 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2480:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2482:	230c      	movs	r3, #12
    2484:	4809      	ldr	r0, [pc, #36]	; (24ac <clkstarted_handle.constprop.0+0x2c>)
    2486:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2488:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    248a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    248c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2490:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2492:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2494:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2496:	4418      	add	r0, r3
    2498:	f004 fdeb 	bl	7072 <set_on_state>
	if (callback) {
    249c:	b12d      	cbz	r5, 24aa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    249e:	4632      	mov	r2, r6
    24a0:	462b      	mov	r3, r5
    24a2:	4803      	ldr	r0, [pc, #12]	; (24b0 <clkstarted_handle.constprop.0+0x30>)
}
    24a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    24a8:	4718      	bx	r3
}
    24aa:	bd70      	pop	{r4, r5, r6, pc}
    24ac:	200037d0 	.word	0x200037d0
    24b0:	00009760 	.word	0x00009760

000024b4 <clock_event_handler>:
	switch (event) {
    24b4:	2801      	cmp	r0, #1
{
    24b6:	b510      	push	{r4, lr}
    24b8:	4604      	mov	r4, r0
	switch (event) {
    24ba:	d00a      	beq.n	24d2 <clock_event_handler+0x1e>
    24bc:	2803      	cmp	r0, #3
    24be:	d00c      	beq.n	24da <clock_event_handler+0x26>
    24c0:	b978      	cbnz	r0, 24e2 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    24c2:	4b08      	ldr	r3, [pc, #32]	; (24e4 <clock_event_handler+0x30>)
    24c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    24c6:	075b      	lsls	r3, r3, #29
    24c8:	d10b      	bne.n	24e2 <clock_event_handler+0x2e>
}
    24ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    24ce:	f7ff bfd7 	b.w	2480 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    24d2:	f000 f98d 	bl	27f0 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    24d6:	4620      	mov	r0, r4
    24d8:	e7f7      	b.n	24ca <clock_event_handler+0x16>
}
    24da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    24de:	f000 b995 	b.w	280c <z_nrf_clock_calibration_done_handler>
}
    24e2:	bd10      	pop	{r4, pc}
    24e4:	200037d0 	.word	0x200037d0

000024e8 <generic_hfclk_start>:
{
    24e8:	b508      	push	{r3, lr}
	__asm__ volatile(
    24ea:	f04f 0320 	mov.w	r3, #32
    24ee:	f3ef 8111 	mrs	r1, BASEPRI
    24f2:	f383 8812 	msr	BASEPRI_MAX, r3
    24f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    24fa:	4a12      	ldr	r2, [pc, #72]	; (2544 <generic_hfclk_start+0x5c>)
    24fc:	6813      	ldr	r3, [r2, #0]
    24fe:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2502:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2506:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2508:	d00c      	beq.n	2524 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    250a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    250e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2512:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2516:	f013 0301 	ands.w	r3, r3, #1
    251a:	d003      	beq.n	2524 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    251c:	480a      	ldr	r0, [pc, #40]	; (2548 <generic_hfclk_start+0x60>)
    251e:	f004 fda8 	bl	7072 <set_on_state>
			already_started = true;
    2522:	2301      	movs	r3, #1
	__asm__ volatile(
    2524:	f381 8811 	msr	BASEPRI, r1
    2528:	f3bf 8f6f 	isb	sy
	if (already_started) {
    252c:	b123      	cbz	r3, 2538 <generic_hfclk_start+0x50>
}
    252e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2532:	2000      	movs	r0, #0
    2534:	f7ff bfa4 	b.w	2480 <clkstarted_handle.constprop.0>
}
    2538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    253c:	2001      	movs	r0, #1
    253e:	f006 be45 	b.w	91cc <nrfx_clock_start>
    2542:	bf00      	nop
    2544:	20003820 	.word	0x20003820
    2548:	20003810 	.word	0x20003810

0000254c <api_blocking_start>:
{
    254c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    254e:	2200      	movs	r2, #0
    2550:	2301      	movs	r3, #1
    2552:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2556:	4a09      	ldr	r2, [pc, #36]	; (257c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2558:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    255c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    255e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2562:	f004 fdf6 	bl	7152 <api_start>
	if (err < 0) {
    2566:	2800      	cmp	r0, #0
    2568:	db05      	blt.n	2576 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    256a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    256e:	2300      	movs	r3, #0
    2570:	4668      	mov	r0, sp
    2572:	f003 fa37 	bl	59e4 <z_impl_k_sem_take>
}
    2576:	b005      	add	sp, #20
    2578:	f85d fb04 	ldr.w	pc, [sp], #4
    257c:	00007179 	.word	0x00007179

00002580 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2580:	4b09      	ldr	r3, [pc, #36]	; (25a8 <generic_hfclk_stop+0x28>)
    2582:	f3bf 8f5b 	dmb	ish
    2586:	e853 2f00 	ldrex	r2, [r3]
    258a:	f022 0102 	bic.w	r1, r2, #2
    258e:	e843 1000 	strex	r0, r1, [r3]
    2592:	2800      	cmp	r0, #0
    2594:	d1f7      	bne.n	2586 <generic_hfclk_stop+0x6>
    2596:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    259a:	07d3      	lsls	r3, r2, #31
    259c:	d402      	bmi.n	25a4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    259e:	2001      	movs	r0, #1
    25a0:	f006 be4c 	b.w	923c <nrfx_clock_stop>
}
    25a4:	4770      	bx	lr
    25a6:	bf00      	nop
    25a8:	20003820 	.word	0x20003820

000025ac <z_nrf_clock_control_get_onoff>:
}
    25ac:	4a02      	ldr	r2, [pc, #8]	; (25b8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    25ae:	b2c3      	uxtb	r3, r0
}
    25b0:	201c      	movs	r0, #28
    25b2:	fb03 2000 	mla	r0, r3, r0, r2
    25b6:	4770      	bx	lr
    25b8:	200037d0 	.word	0x200037d0

000025bc <z_nrf_clock_control_lf_on>:
{
    25bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    25be:	4928      	ldr	r1, [pc, #160]	; (2660 <z_nrf_clock_control_lf_on+0xa4>)
    25c0:	f3bf 8f5b 	dmb	ish
    25c4:	4606      	mov	r6, r0
    25c6:	2201      	movs	r2, #1
    25c8:	e851 3f00 	ldrex	r3, [r1]
    25cc:	e841 2000 	strex	r0, r2, [r1]
    25d0:	2800      	cmp	r0, #0
    25d2:	d1f9      	bne.n	25c8 <z_nrf_clock_control_lf_on+0xc>
    25d4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    25d8:	b933      	cbnz	r3, 25e8 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    25da:	4922      	ldr	r1, [pc, #136]	; (2664 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    25dc:	4822      	ldr	r0, [pc, #136]	; (2668 <z_nrf_clock_control_lf_on+0xac>)
    25de:	604b      	str	r3, [r1, #4]
    25e0:	60cb      	str	r3, [r1, #12]
    25e2:	608a      	str	r2, [r1, #8]
    25e4:	f004 fbe2 	bl	6dac <onoff_request>
	switch (start_mode) {
    25e8:	1e73      	subs	r3, r6, #1
    25ea:	2b01      	cmp	r3, #1
    25ec:	d820      	bhi.n	2630 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    25ee:	f006 fed1 	bl	9394 <k_is_in_isr>
    25f2:	4604      	mov	r4, r0
    25f4:	b910      	cbnz	r0, 25fc <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    25f6:	4b1d      	ldr	r3, [pc, #116]	; (266c <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	bb53      	cbnz	r3, 2652 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    25fc:	f04f 0320 	mov.w	r3, #32
    2600:	f3ef 8511 	mrs	r5, BASEPRI
    2604:	f383 8812 	msr	BASEPRI_MAX, r3
    2608:	f3bf 8f6f 	isb	sy
    260c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    260e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    2612:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2616:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    261a:	03d2      	lsls	r2, r2, #15
    261c:	d509      	bpl.n	2632 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    261e:	079b      	lsls	r3, r3, #30
    2620:	d001      	beq.n	2626 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2622:	2e01      	cmp	r6, #1
    2624:	d105      	bne.n	2632 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    2626:	b174      	cbz	r4, 2646 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    2628:	f385 8811 	msr	BASEPRI, r5
    262c:	f3bf 8f6f 	isb	sy
}
    2630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2632:	b11c      	cbz	r4, 263c <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2634:	4628      	mov	r0, r5
    2636:	f7ff fa27 	bl	1a88 <arch_cpu_atomic_idle>
}
    263a:	e7ea      	b.n	2612 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    263c:	2100      	movs	r1, #0
    263e:	2021      	movs	r0, #33	; 0x21
    2640:	f003 fdf4 	bl	622c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2644:	e7e5      	b.n	2612 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    2646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    264a:	2202      	movs	r2, #2
    264c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2650:	e7ee      	b.n	2630 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    2652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2656:	2202      	movs	r2, #2
    2658:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    265c:	4605      	mov	r5, r0
}
    265e:	e7d6      	b.n	260e <z_nrf_clock_control_lf_on+0x52>
    2660:	20003824 	.word	0x20003824
    2664:	200037c0 	.word	0x200037c0
    2668:	200037ec 	.word	0x200037ec
    266c:	20005714 	.word	0x20005714

00002670 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2670:	4b0d      	ldr	r3, [pc, #52]	; (26a8 <start_cal_process+0x38>)
    2672:	f3bf 8f5b 	dmb	ish
    2676:	2201      	movs	r2, #1
    2678:	e853 1f00 	ldrex	r1, [r3]
    267c:	2900      	cmp	r1, #0
    267e:	d103      	bne.n	2688 <start_cal_process+0x18>
    2680:	e843 2000 	strex	r0, r2, [r3]
    2684:	2800      	cmp	r0, #0
    2686:	d1f7      	bne.n	2678 <start_cal_process+0x8>
    2688:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    268c:	d10a      	bne.n	26a4 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    268e:	4907      	ldr	r1, [pc, #28]	; (26ac <start_cal_process+0x3c>)
    2690:	2300      	movs	r3, #0
    2692:	60cb      	str	r3, [r1, #12]
    2694:	4b06      	ldr	r3, [pc, #24]	; (26b0 <start_cal_process+0x40>)
    2696:	604b      	str	r3, [r1, #4]
    2698:	2303      	movs	r3, #3
    269a:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    269c:	4b05      	ldr	r3, [pc, #20]	; (26b4 <start_cal_process+0x44>)
    269e:	6818      	ldr	r0, [r3, #0]
    26a0:	f004 bb84 	b.w	6dac <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
    26a4:	4770      	bx	lr
    26a6:	bf00      	nop
    26a8:	20003828 	.word	0x20003828
    26ac:	2000382c 	.word	0x2000382c
    26b0:	000027a9 	.word	0x000027a9
    26b4:	2000383c 	.word	0x2000383c

000026b8 <temp_sensor_init>:
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
{
    26b8:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    26ba:	4b07      	ldr	r3, [pc, #28]	; (26d8 <temp_sensor_init+0x20>)
    26bc:	4807      	ldr	r0, [pc, #28]	; (26dc <temp_sensor_init+0x24>)
    26be:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    26c0:	f006 fe5a 	bl	9378 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    26c4:	b930      	cbnz	r0, 26d4 <temp_sensor_init+0x1c>
		LOG_ERR("Temperature sensor not ready");
    26c6:	4806      	ldr	r0, [pc, #24]	; (26e0 <temp_sensor_init+0x28>)
    26c8:	2145      	movs	r1, #69	; 0x45
    26ca:	f004 fbe8 	bl	6e9e <z_log_minimal_printk>
    26ce:	f06f 0012 	mvn.w	r0, #18
		return -ENODEV;
	}

	return 0;
}
    26d2:	bd08      	pop	{r3, pc}
	return 0;
    26d4:	2000      	movs	r0, #0
    26d6:	e7fc      	b.n	26d2 <temp_sensor_init+0x1a>
    26d8:	20003840 	.word	0x20003840
    26dc:	00009808 	.word	0x00009808
    26e0:	0000a874 	.word	0x0000a874

000026e4 <start_cycle>:
{
    26e4:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    26e6:	2200      	movs	r2, #0
    26e8:	2300      	movs	r3, #0
    26ea:	e9cd 2300 	strd	r2, r3, [sp]
    26ee:	4808      	ldr	r0, [pc, #32]	; (2710 <start_cycle+0x2c>)
    26f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    26f4:	2300      	movs	r3, #0
    26f6:	f003 ffb5 	bl	6664 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <start_cycle+0x30>)
	err = onoff_release(mgr);
    26fc:	6818      	ldr	r0, [r3, #0]
    26fe:	f004 fb9e 	bl	6e3e <onoff_release>
	cal_process_in_progress = 0;
    2702:	4b05      	ldr	r3, [pc, #20]	; (2718 <start_cycle+0x34>)
    2704:	2200      	movs	r2, #0
    2706:	601a      	str	r2, [r3, #0]
}
    2708:	b003      	add	sp, #12
    270a:	f85d fb04 	ldr.w	pc, [sp], #4
    270e:	bf00      	nop
    2710:	20000148 	.word	0x20000148
    2714:	2000383c 	.word	0x2000383c
    2718:	20003828 	.word	0x20003828

0000271c <measure_temperature>:
{
    271c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    271e:	4d1d      	ldr	r5, [pc, #116]	; (2794 <measure_temperature+0x78>)
    2720:	6828      	ldr	r0, [r5, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    2722:	6883      	ldr	r3, [r0, #8]
    2724:	4c1c      	ldr	r4, [pc, #112]	; (2798 <measure_temperature+0x7c>)
    2726:	68db      	ldr	r3, [r3, #12]
    2728:	2139      	movs	r1, #57	; 0x39
    272a:	4798      	blx	r3
	if (rc == 0) {
    272c:	b170      	cbz	r0, 274c <measure_temperature+0x30>
		calib_skip_cnt = 0;
    272e:	2300      	movs	r3, #0
    2730:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    2732:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    2734:	7821      	ldrb	r1, [r4, #0]
    2736:	b109      	cbz	r1, 273c <measure_temperature+0x20>
    2738:	2a01      	cmp	r2, #1
    273a:	dd20      	ble.n	277e <measure_temperature+0x62>
		prev_temperature = temperature;
    273c:	4a17      	ldr	r2, [pc, #92]	; (279c <measure_temperature+0x80>)
    273e:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    2740:	f002 f87e 	bl	4840 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    2744:	2301      	movs	r3, #1
    2746:	7023      	strb	r3, [r4, #0]
}
    2748:	b003      	add	sp, #12
    274a:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    274c:	6828      	ldr	r0, [r5, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    274e:	6883      	ldr	r3, [r0, #8]
    2750:	466a      	mov	r2, sp
    2752:	691b      	ldr	r3, [r3, #16]
    2754:	210c      	movs	r1, #12
    2756:	4798      	blx	r3
	if (rc == 0) {
    2758:	2800      	cmp	r0, #0
    275a:	d1e8      	bne.n	272e <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    275c:	4a10      	ldr	r2, [pc, #64]	; (27a0 <measure_temperature+0x84>)
    275e:	9b01      	ldr	r3, [sp, #4]
    2760:	fb93 f3f2 	sdiv	r3, r3, r2
    2764:	9a00      	ldr	r2, [sp, #0]
    2766:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    276a:	4a0c      	ldr	r2, [pc, #48]	; (279c <measure_temperature+0x80>)
    276c:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    2770:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    2772:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    2774:	2a00      	cmp	r2, #0
    2776:	bfb8      	it	lt
    2778:	4252      	neglt	r2, r2
    277a:	b212      	sxth	r2, r2
    277c:	e7da      	b.n	2734 <measure_temperature+0x18>
		total_skips_cnt++;
    277e:	4a09      	ldr	r2, [pc, #36]	; (27a4 <measure_temperature+0x88>)
    2780:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    2782:	3901      	subs	r1, #1
		total_skips_cnt++;
    2784:	3301      	adds	r3, #1
		calib_skip_cnt--;
    2786:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    2788:	6013      	str	r3, [r2, #0]
}
    278a:	b003      	add	sp, #12
    278c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    2790:	f7ff bfa8 	b.w	26e4 <start_cycle>
    2794:	20003840 	.word	0x20003840
    2798:	20005303 	.word	0x20005303
    279c:	20003a00 	.word	0x20003a00
    27a0:	0003d090 	.word	0x0003d090
    27a4:	20003848 	.word	0x20003848

000027a8 <cal_hf_callback>:
{
    27a8:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    27aa:	4b07      	ldr	r3, [pc, #28]	; (27c8 <cal_hf_callback+0x20>)
    27ac:	681b      	ldr	r3, [r3, #0]
    27ae:	b92b      	cbnz	r3, 27bc <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    27b0:	f002 f846 	bl	4840 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    27b4:	4b05      	ldr	r3, [pc, #20]	; (27cc <cal_hf_callback+0x24>)
    27b6:	2201      	movs	r2, #1
    27b8:	701a      	strb	r2, [r3, #0]
}
    27ba:	bd08      	pop	{r3, pc}
    27bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    27c0:	4803      	ldr	r0, [pc, #12]	; (27d0 <cal_hf_callback+0x28>)
    27c2:	f003 ba1d 	b.w	5c00 <k_work_submit>
    27c6:	bf00      	nop
    27c8:	20003840 	.word	0x20003840
    27cc:	20005303 	.word	0x20005303
    27d0:	20000010 	.word	0x20000010

000027d4 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    27d4:	4b03      	ldr	r3, [pc, #12]	; (27e4 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    27d6:	4a04      	ldr	r2, [pc, #16]	; (27e8 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    27d8:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    27da:	2300      	movs	r3, #0
    27dc:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    27de:	4a03      	ldr	r2, [pc, #12]	; (27ec <z_nrf_clock_calibration_init+0x18>)
    27e0:	6013      	str	r3, [r2, #0]
}
    27e2:	4770      	bx	lr
    27e4:	2000383c 	.word	0x2000383c
    27e8:	20003844 	.word	0x20003844
    27ec:	20003848 	.word	0x20003848

000027f0 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    27f0:	4b02      	ldr	r3, [pc, #8]	; (27fc <z_nrf_clock_calibration_lfclk_started+0xc>)
    27f2:	2200      	movs	r2, #0
    27f4:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    27f6:	f7ff bf3b 	b.w	2670 <start_cal_process>
    27fa:	bf00      	nop
    27fc:	20005303 	.word	0x20005303

00002800 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    2800:	4801      	ldr	r0, [pc, #4]	; (2808 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    2802:	f006 bf4d 	b.w	96a0 <z_impl_k_timer_stop>
    2806:	bf00      	nop
    2808:	20000148 	.word	0x20000148

0000280c <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    280c:	4a02      	ldr	r2, [pc, #8]	; (2818 <z_nrf_clock_calibration_done_handler+0xc>)
    280e:	6813      	ldr	r3, [r2, #0]
    2810:	3301      	adds	r3, #1
    2812:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    2814:	f7ff bf66 	b.w	26e4 <start_cycle>
    2818:	20003844 	.word	0x20003844

0000281c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    281c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    281e:	4b08      	ldr	r3, [pc, #32]	; (2840 <uart_console_init+0x24>)
    2820:	4808      	ldr	r0, [pc, #32]	; (2844 <uart_console_init+0x28>)
    2822:	6018      	str	r0, [r3, #0]
    2824:	f006 fda8 	bl	9378 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2828:	b138      	cbz	r0, 283a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    282a:	4807      	ldr	r0, [pc, #28]	; (2848 <uart_console_init+0x2c>)
    282c:	f7ff fd80 	bl	2330 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2830:	4805      	ldr	r0, [pc, #20]	; (2848 <uart_console_init+0x2c>)
    2832:	f7fe fda1 	bl	1378 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2836:	2000      	movs	r0, #0
}
    2838:	bd08      	pop	{r3, pc}
		return -ENODEV;
    283a:	f06f 0012 	mvn.w	r0, #18
    283e:	e7fb      	b.n	2838 <uart_console_init+0x1c>
    2840:	2000384c 	.word	0x2000384c
    2844:	000097a8 	.word	0x000097a8
    2848:	0000284d 	.word	0x0000284d

0000284c <console_out>:
	if ('\n' == c) {
    284c:	280a      	cmp	r0, #10
{
    284e:	b538      	push	{r3, r4, r5, lr}
    2850:	4d07      	ldr	r5, [pc, #28]	; (2870 <console_out+0x24>)
    2852:	4604      	mov	r4, r0
	if ('\n' == c) {
    2854:	d104      	bne.n	2860 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2856:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2858:	6883      	ldr	r3, [r0, #8]
    285a:	210d      	movs	r1, #13
    285c:	685b      	ldr	r3, [r3, #4]
    285e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2860:	6828      	ldr	r0, [r5, #0]
    2862:	6883      	ldr	r3, [r0, #8]
    2864:	b2e1      	uxtb	r1, r4
    2866:	685b      	ldr	r3, [r3, #4]
    2868:	4798      	blx	r3
}
    286a:	4620      	mov	r0, r4
    286c:	bd38      	pop	{r3, r4, r5, pc}
    286e:	bf00      	nop
    2870:	2000384c 	.word	0x2000384c

00002874 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2874:	b530      	push	{r4, r5, lr}
	return port->config;
    2876:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2878:	7b04      	ldrb	r4, [r0, #12]
    287a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    287e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2882:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2886:	b085      	sub	sp, #20
    2888:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    288c:	d104      	bne.n	2898 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    288e:	4628      	mov	r0, r5
    2890:	f002 fa7e 	bl	4d90 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2894:	2000      	movs	r0, #0
    2896:	e032      	b.n	28fe <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2898:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    289c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    28a0:	d12f      	bne.n	2902 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    28a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    28a6:	bf0c      	ite	eq
    28a8:	2304      	moveq	r3, #4
    28aa:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    28ac:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    28b0:	6883      	ldr	r3, [r0, #8]
    28b2:	fa23 f101 	lsr.w	r1, r3, r1
    28b6:	07c9      	lsls	r1, r1, #31
    28b8:	d42f      	bmi.n	291a <gpio_nrfx_pin_interrupt_configure+0xa6>
    28ba:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    28be:	d12c      	bne.n	291a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    28c0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    28c2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    28c4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    28c8:	4a1c      	ldr	r2, [pc, #112]	; (293c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    28ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    28ce:	bf18      	it	ne
    28d0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    28d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    28d8:	07db      	lsls	r3, r3, #31
    28da:	d41e      	bmi.n	291a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28dc:	f10d 0407 	add.w	r4, sp, #7
    28e0:	4621      	mov	r1, r4
    28e2:	4628      	mov	r0, r5
    28e4:	f002 f9b8 	bl	4c58 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    28e8:	4b15      	ldr	r3, [pc, #84]	; (2940 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    28ea:	4298      	cmp	r0, r3
    28ec:	d114      	bne.n	2918 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    28ee:	4620      	mov	r0, r4
    28f0:	f002 fa00 	bl	4cf4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    28f4:	4b13      	ldr	r3, [pc, #76]	; (2944 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    28f6:	4298      	cmp	r0, r3
    28f8:	d00e      	beq.n	2918 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    28fa:	f06f 000b 	mvn.w	r0, #11
}
    28fe:	b005      	add	sp, #20
    2900:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2902:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2906:	d005      	beq.n	2914 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    290c:	bf0c      	ite	eq
    290e:	2302      	moveq	r3, #2
    2910:	2301      	movne	r3, #1
    2912:	e7cb      	b.n	28ac <gpio_nrfx_pin_interrupt_configure+0x38>
    2914:	2303      	movs	r3, #3
    2916:	e7c9      	b.n	28ac <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2918:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    291a:	2300      	movs	r3, #0
    291c:	4619      	mov	r1, r3
    291e:	aa02      	add	r2, sp, #8
    2920:	4628      	mov	r0, r5
    2922:	f002 f873 	bl	4a0c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2926:	4b07      	ldr	r3, [pc, #28]	; (2944 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2928:	4298      	cmp	r0, r3
    292a:	d104      	bne.n	2936 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    292c:	2101      	movs	r1, #1
    292e:	4628      	mov	r0, r5
    2930:	f002 f9e6 	bl	4d00 <nrfx_gpiote_trigger_enable>
    2934:	e7ae      	b.n	2894 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2936:	f06f 0004 	mvn.w	r0, #4
    293a:	e7e0      	b.n	28fe <gpio_nrfx_pin_interrupt_configure+0x8a>
    293c:	50000300 	.word	0x50000300
    2940:	0bad0004 	.word	0x0bad0004
    2944:	0bad0000 	.word	0x0bad0000

00002948 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2948:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    294a:	f002 f9c3 	bl	4cd4 <nrfx_gpiote_is_init>
    294e:	4604      	mov	r4, r0
    2950:	b968      	cbnz	r0, 296e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2952:	f002 f997 	bl	4c84 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2956:	4b08      	ldr	r3, [pc, #32]	; (2978 <gpio_nrfx_init+0x30>)
    2958:	4298      	cmp	r0, r3
    295a:	d10a      	bne.n	2972 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    295c:	4807      	ldr	r0, [pc, #28]	; (297c <gpio_nrfx_init+0x34>)
    295e:	4621      	mov	r1, r4
    2960:	f002 f974 	bl	4c4c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2964:	4622      	mov	r2, r4
    2966:	2105      	movs	r1, #5
    2968:	2006      	movs	r0, #6
    296a:	f7ff f8f7 	bl	1b5c <z_arm_irq_priority_set>
		return 0;
    296e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2970:	bd10      	pop	{r4, pc}
		return -EIO;
    2972:	f06f 0004 	mvn.w	r0, #4
    2976:	e7fb      	b.n	2970 <gpio_nrfx_init+0x28>
    2978:	0bad0000 	.word	0x0bad0000
    297c:	00002981 	.word	0x00002981

00002980 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2980:	0942      	lsrs	r2, r0, #5
{
    2982:	b570      	push	{r4, r5, r6, lr}
    2984:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2986:	d002      	beq.n	298e <nrfx_gpio_handler+0xe>
    2988:	2a01      	cmp	r2, #1
    298a:	d015      	beq.n	29b8 <nrfx_gpio_handler+0x38>
}
    298c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    298e:	4e0b      	ldr	r6, [pc, #44]	; (29bc <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2990:	6932      	ldr	r2, [r6, #16]
    2992:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2994:	2900      	cmp	r1, #0
    2996:	d0f9      	beq.n	298c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2998:	f003 031f 	and.w	r3, r3, #31
    299c:	2501      	movs	r5, #1
    299e:	680c      	ldr	r4, [r1, #0]
    29a0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    29a2:	688a      	ldr	r2, [r1, #8]
    29a4:	402a      	ands	r2, r5
    29a6:	d002      	beq.n	29ae <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    29a8:	684b      	ldr	r3, [r1, #4]
    29aa:	4630      	mov	r0, r6
    29ac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29ae:	2c00      	cmp	r4, #0
    29b0:	d0ec      	beq.n	298c <nrfx_gpio_handler+0xc>
    29b2:	4621      	mov	r1, r4
    29b4:	6824      	ldr	r4, [r4, #0]
    29b6:	e7f4      	b.n	29a2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29b8:	4e01      	ldr	r6, [pc, #4]	; (29c0 <nrfx_gpio_handler+0x40>)
    29ba:	e7e9      	b.n	2990 <nrfx_gpio_handler+0x10>
    29bc:	00009778 	.word	0x00009778
    29c0:	00009790 	.word	0x00009790

000029c4 <gpio_nrfx_pin_configure>:
{
    29c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    29c8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29ca:	7b3b      	ldrb	r3, [r7, #12]
    29cc:	f001 051f 	and.w	r5, r1, #31
{
    29d0:	b085      	sub	sp, #20
    29d2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29d4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    29d8:	4614      	mov	r4, r2
    29da:	b9ca      	cbnz	r2, 2a10 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    29dc:	a902      	add	r1, sp, #8
    29de:	4628      	mov	r0, r5
    29e0:	f002 f93a 	bl	4c58 <nrfx_gpiote_channel_get>
    29e4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    29e6:	4628      	mov	r0, r5
    29e8:	f002 f9fa 	bl	4de0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    29ec:	4b4a      	ldr	r3, [pc, #296]	; (2b18 <gpio_nrfx_pin_configure+0x154>)
    29ee:	4298      	cmp	r0, r3
    29f0:	d004      	beq.n	29fc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    29f2:	f06f 0004 	mvn.w	r0, #4
}
    29f6:	b005      	add	sp, #20
    29f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    29fc:	4284      	cmp	r4, r0
    29fe:	d105      	bne.n	2a0c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2a00:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2a04:	f002 f970 	bl	4ce8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2a08:	42a0      	cmp	r0, r4
    2a0a:	d1f2      	bne.n	29f2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a0c:	2000      	movs	r0, #0
    2a0e:	e7f2      	b.n	29f6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a10:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a14:	f10d 0103 	add.w	r1, sp, #3
    2a18:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a1a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a1e:	f002 f91b 	bl	4c58 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2a22:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2a24:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2a26:	aa02      	add	r2, sp, #8
    2a28:	4649      	mov	r1, r9
    2a2a:	4628      	mov	r0, r5
    2a2c:	f001 ffee 	bl	4a0c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2a30:	4b39      	ldr	r3, [pc, #228]	; (2b18 <gpio_nrfx_pin_configure+0x154>)
    2a32:	4298      	cmp	r0, r3
    2a34:	d002      	beq.n	2a3c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2a36:	f06f 0015 	mvn.w	r0, #21
    2a3a:	e7dc      	b.n	29f6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2a3c:	4580      	cmp	r8, r0
    2a3e:	d103      	bne.n	2a48 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2a40:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2a44:	f002 f950 	bl	4ce8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2a48:	03a3      	lsls	r3, r4, #14
    2a4a:	d551      	bpl.n	2af0 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2a4c:	f240 6306 	movw	r3, #1542	; 0x606
    2a50:	4023      	ands	r3, r4
    2a52:	f240 2206 	movw	r2, #518	; 0x206
    2a56:	4293      	cmp	r3, r2
    2a58:	d03b      	beq.n	2ad2 <gpio_nrfx_pin_configure+0x10e>
    2a5a:	d80c      	bhi.n	2a76 <gpio_nrfx_pin_configure+0xb2>
    2a5c:	2b06      	cmp	r3, #6
    2a5e:	d015      	beq.n	2a8c <gpio_nrfx_pin_configure+0xc8>
    2a60:	d804      	bhi.n	2a6c <gpio_nrfx_pin_configure+0xa8>
    2a62:	b19b      	cbz	r3, 2a8c <gpio_nrfx_pin_configure+0xc8>
    2a64:	2b02      	cmp	r3, #2
    2a66:	d1e6      	bne.n	2a36 <gpio_nrfx_pin_configure+0x72>
    2a68:	2304      	movs	r3, #4
    2a6a:	e00f      	b.n	2a8c <gpio_nrfx_pin_configure+0xc8>
    2a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2a70:	d1e1      	bne.n	2a36 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2a72:	2301      	movs	r3, #1
    2a74:	e00a      	b.n	2a8c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2a76:	f240 4202 	movw	r2, #1026	; 0x402
    2a7a:	4293      	cmp	r3, r2
    2a7c:	d02b      	beq.n	2ad6 <gpio_nrfx_pin_configure+0x112>
    2a7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2a82:	d02a      	beq.n	2ada <gpio_nrfx_pin_configure+0x116>
    2a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2a88:	d1d5      	bne.n	2a36 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2a8a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2a8c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2a90:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2a94:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2a98:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2a9a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2a9e:	bf54      	ite	pl
    2aa0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2aa4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2aa6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2aa8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2aac:	d517      	bpl.n	2ade <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	2101      	movs	r1, #1
    2ab2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2ab6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2aba:	2200      	movs	r2, #0
    2abc:	a901      	add	r1, sp, #4
    2abe:	4628      	mov	r0, r5
    2ac0:	f002 f852 	bl	4b68 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ac4:	4b14      	ldr	r3, [pc, #80]	; (2b18 <gpio_nrfx_pin_configure+0x154>)
    2ac6:	4298      	cmp	r0, r3
    2ac8:	bf14      	ite	ne
    2aca:	f06f 0015 	mvnne.w	r0, #21
    2ace:	2000      	moveq	r0, #0
    2ad0:	e791      	b.n	29f6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2ad2:	2307      	movs	r3, #7
    2ad4:	e7da      	b.n	2a8c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2ad6:	2305      	movs	r3, #5
    2ad8:	e7d8      	b.n	2a8c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2ada:	2303      	movs	r3, #3
    2adc:	e7d6      	b.n	2a8c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2ade:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2ae0:	bf41      	itttt	mi
    2ae2:	687b      	ldrmi	r3, [r7, #4]
    2ae4:	2101      	movmi	r1, #1
    2ae6:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2aea:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2aee:	e7e4      	b.n	2aba <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2af0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2af2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2af6:	bf54      	ite	pl
    2af8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2afc:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2afe:	461a      	mov	r2, r3
    2b00:	a901      	add	r1, sp, #4
    2b02:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2b04:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2b08:	f001 ff80 	bl	4a0c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b0c:	4b02      	ldr	r3, [pc, #8]	; (2b18 <gpio_nrfx_pin_configure+0x154>)
    2b0e:	4298      	cmp	r0, r3
    2b10:	f43f af7c 	beq.w	2a0c <gpio_nrfx_pin_configure+0x48>
    2b14:	e78f      	b.n	2a36 <gpio_nrfx_pin_configure+0x72>
    2b16:	bf00      	nop
    2b18:	0bad0000 	.word	0x0bad0000

00002b1c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    2b1c:	4b01      	ldr	r3, [pc, #4]	; (2b24 <hfclk_on_callback+0x8>)
    2b1e:	2201      	movs	r2, #1
    2b20:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    2b22:	4770      	bx	lr
    2b24:	4000c000 	.word	0x4000c000

00002b28 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    2b28:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    2b2a:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    2b2c:	d10b      	bne.n	2b46 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    2b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b30:	4906      	ldr	r1, [pc, #24]	; (2b4c <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    2b32:	4807      	ldr	r0, [pc, #28]	; (2b50 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    2b34:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    2b36:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    2b3a:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    2b3e:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    2b40:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    2b42:	2000      	movs	r0, #0
    2b44:	4770      	bx	lr
		return -ENOTSUP;
    2b46:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2b4a:	4770      	bx	lr
    2b4c:	0003d090 	.word	0x0003d090
    2b50:	000f4240 	.word	0x000f4240

00002b54 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b54:	4b04      	ldr	r3, [pc, #16]	; (2b68 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    2b56:	6900      	ldr	r0, [r0, #16]
    2b58:	2200      	movs	r2, #0
    2b5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2b5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2b62:	f002 bf1f 	b.w	59a4 <z_impl_k_sem_give>
    2b66:	bf00      	nop
    2b68:	4000c000 	.word	0x4000c000

00002b6c <temp_nrf5_sample_fetch>:
{
    2b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    2b6e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    2b70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b72:	b363      	cbz	r3, 2bce <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    2b74:	2939      	cmp	r1, #57	; 0x39
    2b76:	d001      	beq.n	2b7c <temp_nrf5_sample_fetch+0x10>
    2b78:	290c      	cmp	r1, #12
    2b7a:	d12b      	bne.n	2bd4 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    2b7c:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    2b80:	f04f 32ff 	mov.w	r2, #4294967295
    2b84:	f04f 33ff 	mov.w	r3, #4294967295
    2b88:	4630      	mov	r0, r6
    2b8a:	f002 fe51 	bl	5830 <z_impl_k_mutex_lock>
    2b8e:	4b13      	ldr	r3, [pc, #76]	; (2bdc <temp_nrf5_sample_fetch+0x70>)
    2b90:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    2b92:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2b94:	2303      	movs	r3, #3
    2b96:	2400      	movs	r4, #0
    2b98:	4669      	mov	r1, sp
    2b9a:	9403      	str	r4, [sp, #12]
    2b9c:	9302      	str	r3, [sp, #8]
    2b9e:	f004 f905 	bl	6dac <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    2ba2:	f04f 32ff 	mov.w	r2, #4294967295
    2ba6:	f04f 33ff 	mov.w	r3, #4294967295
    2baa:	4628      	mov	r0, r5
    2bac:	f002 ff1a 	bl	59e4 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    2bb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2bb2:	f004 f944 	bl	6e3e <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    2bb6:	4b0a      	ldr	r3, [pc, #40]	; (2be0 <temp_nrf5_sample_fetch+0x74>)
    2bb8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    2bbc:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    2bbe:	2201      	movs	r2, #1
    2bc0:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    2bc2:	4630      	mov	r0, r6
    2bc4:	f002 feac 	bl	5920 <z_impl_k_mutex_unlock>
	return 0;
    2bc8:	4620      	mov	r0, r4
}
    2bca:	b004      	add	sp, #16
    2bcc:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    2bce:	f06f 000a 	mvn.w	r0, #10
    2bd2:	e7fa      	b.n	2bca <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    2bd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2bd8:	e7f7      	b.n	2bca <temp_nrf5_sample_fetch+0x5e>
    2bda:	bf00      	nop
    2bdc:	00002b1d 	.word	0x00002b1d
    2be0:	4000c000 	.word	0x4000c000

00002be4 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    2be4:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    2be6:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    2be8:	2000      	movs	r0, #0
    2bea:	f7ff fcdf 	bl	25ac <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    2bee:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    2bf0:	f04f 32ff 	mov.w	r2, #4294967295
    2bf4:	2100      	movs	r1, #0
    2bf6:	4620      	mov	r0, r4
    2bf8:	f006 fbf4 	bl	93e4 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    2bfc:	f104 0010 	add.w	r0, r4, #16
    2c00:	f006 fbe9 	bl	93d6 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    2c04:	2200      	movs	r2, #0
    2c06:	2101      	movs	r1, #1
    2c08:	200c      	movs	r0, #12
    2c0a:	f7fe ffa7 	bl	1b5c <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    2c0e:	200c      	movs	r0, #12
    2c10:	f7fe ff72 	bl	1af8 <arch_irq_enable>
    p_reg->INTENSET = mask;
    2c14:	4b02      	ldr	r3, [pc, #8]	; (2c20 <temp_nrf5_init+0x3c>)
    2c16:	2201      	movs	r2, #1
    2c18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    2c1c:	2000      	movs	r0, #0
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	4000c000 	.word	0x4000c000

00002c24 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(1);
    2c24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2c28:	4604      	mov	r4, r0
    2c2a:	6905      	ldr	r5, [r0, #16]
    2c2c:	2200      	movs	r2, #0
    2c2e:	2101      	movs	r1, #1
    2c30:	2004      	movs	r0, #4
    2c32:	f7fe ff93 	bl	1b5c <z_arm_irq_priority_set>
    2c36:	6863      	ldr	r3, [r4, #4]
    2c38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2c3a:	aa01      	add	r2, sp, #4
    2c3c:	2100      	movs	r1, #0
    2c3e:	4620      	mov	r0, r4
    2c40:	f004 fd25 	bl	768e <pinctrl_lookup_state>
	if (ret < 0) {
    2c44:	2800      	cmp	r0, #0
    2c46:	db21      	blt.n	2c8c <spi_1_init+0x68>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2c48:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2c4a:	6822      	ldr	r2, [r4, #0]
    2c4c:	7919      	ldrb	r1, [r3, #4]
    2c4e:	6818      	ldr	r0, [r3, #0]
    2c50:	f004 fd3a 	bl	76c8 <pinctrl_configure_pins>
    2c54:	2800      	cmp	r0, #0
    2c56:	db19      	blt.n	2c8c <spi_1_init+0x68>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    2c58:	68ac      	ldr	r4, [r5, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2c5a:	2601      	movs	r6, #1
    2c5c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    2c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2c64:	429c      	cmp	r4, r3
    2c66:	d304      	bcc.n	2c72 <spi_1_init+0x4e>
    2c68:	4628      	mov	r0, r5
    2c6a:	f004 fb2a 	bl	72c2 <spi_context_unlock_unconditionally>
    2c6e:	2000      	movs	r0, #0
    2c70:	e00c      	b.n	2c8c <spi_1_init+0x68>
		if (!device_is_ready(cs_gpio->port)) {
    2c72:	6820      	ldr	r0, [r4, #0]
    2c74:	f006 fb80 	bl	9378 <z_device_is_ready>
    2c78:	b958      	cbnz	r0, 2c92 <spi_1_init+0x6e>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    2c7a:	6822      	ldr	r2, [r4, #0]
    2c7c:	4816      	ldr	r0, [pc, #88]	; (2cd8 <spi_1_init+0xb4>)
    2c7e:	7923      	ldrb	r3, [r4, #4]
    2c80:	6812      	ldr	r2, [r2, #0]
    2c82:	2145      	movs	r1, #69	; 0x45
    2c84:	f004 f90b 	bl	6e9e <z_log_minimal_printk>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
    2c88:	f06f 0012 	mvn.w	r0, #18
    2c8c:	b002      	add	sp, #8
    2c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    2c92:	6820      	ldr	r0, [r4, #0]
    2c94:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    2c96:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    2c98:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    2c9c:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2ca0:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    2ca4:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    2ca6:	bf54      	ite	pl
    2ca8:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    2cac:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    2cb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2cb4:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    2cb8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2cba:	bf4c      	ite	mi
    2cbc:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2cc0:	ea27 070e 	bicpl.w	r7, r7, lr
	return api->pin_configure(port, pin, flags);
    2cc4:	f8d8 3000 	ldr.w	r3, [r8]
    2cc8:	f8cc 7000 	str.w	r7, [ip]
    2ccc:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
    2cce:	2800      	cmp	r0, #0
    2cd0:	dbdc      	blt.n	2c8c <spi_1_init+0x68>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    2cd2:	3408      	adds	r4, #8
    2cd4:	e7c2      	b.n	2c5c <spi_1_init+0x38>
    2cd6:	bf00      	nop
    2cd8:	0000a8b5 	.word	0x0000a8b5

00002cdc <transfer_next_chunk>:
{
    2cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    2cde:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    2ce0:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
    2ce2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
{
    2ce4:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    2ce6:	b97b      	cbnz	r3, 2d08 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    2ce8:	b99c      	cbnz	r4, 2d12 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    2cea:	2200      	movs	r2, #0
    2cec:	4611      	mov	r1, r2
    2cee:	4628      	mov	r0, r5
    2cf0:	f004 fac5 	bl	727e <_spi_context_cs_control>
	ctx->sync_status = status;
    2cf4:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    2cf6:	f105 0020 	add.w	r0, r5, #32
    2cfa:	f002 fe53 	bl	59a4 <z_impl_k_sem_give>
	dev_data->busy = false;
    2cfe:	2300      	movs	r3, #0
    2d00:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    2d04:	b005      	add	sp, #20
    2d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
    2d08:	2c00      	cmp	r4, #0
    2d0a:	d035      	beq.n	2d78 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    2d0c:	429c      	cmp	r4, r3
    2d0e:	bf28      	it	cs
    2d10:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    2d12:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    2d14:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    2d16:	b179      	cbz	r1, 2d38 <transfer_next_chunk+0x5c>
    2d18:	b173      	cbz	r3, 2d38 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2d1a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    2d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2d22:	d009      	beq.n	2d38 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    2d24:	2c08      	cmp	r4, #8
    2d26:	bf28      	it	cs
    2d28:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    2d2a:	f105 075e 	add.w	r7, r5, #94	; 0x5e
    2d2e:	4622      	mov	r2, r4
    2d30:	4638      	mov	r0, r7
    2d32:	f004 f97e 	bl	7032 <memcpy>
			tx_buf = dev_data->buffer;
    2d36:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    2d38:	68b2      	ldr	r2, [r6, #8]
    2d3a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    2d3c:	9100      	str	r1, [sp, #0]
    2d3e:	4294      	cmp	r4, r2
    2d40:	bf28      	it	cs
    2d42:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
    2d44:	65ac      	str	r4, [r5, #88]	; 0x58
    2d46:	b11b      	cbz	r3, 2d50 <transfer_next_chunk+0x74>
    2d48:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	bf18      	it	ne
    2d4e:	4623      	movne	r3, r4
    2d50:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    2d52:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    2d54:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    2d56:	b11b      	cbz	r3, 2d60 <transfer_next_chunk+0x84>
    2d58:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	bf18      	it	ne
    2d5e:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2d60:	2200      	movs	r2, #0
    2d62:	4669      	mov	r1, sp
    2d64:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2d66:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2d68:	f002 fa86 	bl	5278 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <transfer_next_chunk+0xa0>)
    2d6e:	4298      	cmp	r0, r3
    2d70:	d0c8      	beq.n	2d04 <transfer_next_chunk+0x28>
			error = -EIO;
    2d72:	f06f 0404 	mvn.w	r4, #4
    2d76:	e7b8      	b.n	2cea <transfer_next_chunk+0xe>
    2d78:	461c      	mov	r4, r3
    2d7a:	e7ca      	b.n	2d12 <transfer_next_chunk+0x36>
    2d7c:	0bad0000 	.word	0x0bad0000

00002d80 <event_handler>:
{
    2d80:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    2d82:	7803      	ldrb	r3, [r0, #0]
{
    2d84:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    2d86:	2b00      	cmp	r3, #0
    2d88:	d147      	bne.n	2e1a <event_handler+0x9a>
	if (!ctx->tx_len) {
    2d8a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    2d8c:	b133      	cbz	r3, 2d9c <event_handler+0x1c>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    2d8e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    2d90:	429a      	cmp	r2, r3
    2d92:	d911      	bls.n	2db8 <event_handler+0x38>
		LOG_ERR("Update exceeds current buffer");
    2d94:	4821      	ldr	r0, [pc, #132]	; (2e1c <event_handler+0x9c>)
    2d96:	2145      	movs	r1, #69	; 0x45
    2d98:	f004 f881 	bl	6e9e <z_log_minimal_printk>
	if (!ctx->rx_len) {
    2d9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2d9e:	b133      	cbz	r3, 2dae <event_handler+0x2e>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    2da0:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    2da2:	429a      	cmp	r2, r3
    2da4:	d920      	bls.n	2de8 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
    2da6:	481d      	ldr	r0, [pc, #116]	; (2e1c <event_handler+0x9c>)
    2da8:	2145      	movs	r1, #69	; 0x45
    2daa:	f004 f878 	bl	6e9e <z_log_minimal_printk>
		transfer_next_chunk(dev_data->dev);
    2dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    2db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    2db4:	f7ff bf92 	b.w	2cdc <transfer_next_chunk>
	ctx->tx_len -= len;
    2db8:	1a9b      	subs	r3, r3, r2
    2dba:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    2dbc:	b973      	cbnz	r3, 2ddc <event_handler+0x5c>
		++ctx->current_tx;
    2dbe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    2dc0:	3308      	adds	r3, #8
    2dc2:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    2dc4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    2dc6:	3b01      	subs	r3, #1
    2dc8:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    2dca:	f101 0248 	add.w	r2, r1, #72	; 0x48
    2dce:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2dd2:	3138      	adds	r1, #56	; 0x38
    2dd4:	f004 fa2e 	bl	7234 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    2dd8:	6460      	str	r0, [r4, #68]	; 0x44
    2dda:	e7df      	b.n	2d9c <event_handler+0x1c>
	} else if (ctx->tx_buf) {
    2ddc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    2dde:	2b00      	cmp	r3, #0
    2de0:	d0dc      	beq.n	2d9c <event_handler+0x1c>
		ctx->tx_buf += dfs * len;
    2de2:	4413      	add	r3, r2
    2de4:	644b      	str	r3, [r1, #68]	; 0x44
    2de6:	e7d9      	b.n	2d9c <event_handler+0x1c>
	ctx->rx_len -= len;
    2de8:	1a9b      	subs	r3, r3, r2
    2dea:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    2dec:	b97b      	cbnz	r3, 2e0e <event_handler+0x8e>
		++ctx->current_rx;
    2dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2df0:	3308      	adds	r3, #8
    2df2:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    2df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2df6:	3b01      	subs	r3, #1
    2df8:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    2dfa:	f104 0250 	add.w	r2, r4, #80	; 0x50
    2dfe:	f104 0140 	add.w	r1, r4, #64	; 0x40
    2e02:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    2e06:	f004 fa15 	bl	7234 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    2e0a:	64e0      	str	r0, [r4, #76]	; 0x4c
    2e0c:	e7cf      	b.n	2dae <event_handler+0x2e>
	} else if (ctx->rx_buf) {
    2e0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2e10:	2b00      	cmp	r3, #0
    2e12:	d0cc      	beq.n	2dae <event_handler+0x2e>
		ctx->rx_buf += dfs * len;
    2e14:	4413      	add	r3, r2
    2e16:	64e3      	str	r3, [r4, #76]	; 0x4c
    2e18:	e7c9      	b.n	2dae <event_handler+0x2e>
}
    2e1a:	bd10      	pop	{r4, pc}
    2e1c:	0000a8de 	.word	0x0000a8de

00002e20 <spi_nrfx_transceive>:
{
    2e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e24:	b08b      	sub	sp, #44	; 0x2c
	struct spi_nrfx_data *dev_data = dev->data;
    2e26:	6904      	ldr	r4, [r0, #16]
{
    2e28:	9301      	str	r3, [sp, #4]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    2e2a:	888b      	ldrh	r3, [r1, #4]
    2e2c:	049f      	lsls	r7, r3, #18
    2e2e:	4680      	mov	r8, r0
    2e30:	460e      	mov	r6, r1
    2e32:	4691      	mov	r9, r2
    2e34:	d42f      	bmi.n	2e96 <spi_nrfx_transceive+0x76>
	return z_impl_k_sem_take(sem, timeout);
    2e36:	f04f 32ff 	mov.w	r2, #4294967295
    2e3a:	f04f 33ff 	mov.w	r3, #4294967295
    2e3e:	f104 0010 	add.w	r0, r4, #16
    2e42:	f002 fdcf 	bl	59e4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    2e46:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    2e48:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    2e4c:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
    2e50:	f8db 300c 	ldr.w	r3, [fp, #12]
    2e54:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    2e56:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    2e5a:	9302      	str	r3, [sp, #8]
    2e5c:	b123      	cbz	r3, 2e68 <spi_nrfx_transceive+0x48>
    2e5e:	f8da 3000 	ldr.w	r3, [sl]
    2e62:	429e      	cmp	r6, r3
    2e64:	f000 80b1 	beq.w	2fca <spi_nrfx_transceive+0x1aa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    2e68:	88b7      	ldrh	r7, [r6, #4]
    2e6a:	053d      	lsls	r5, r7, #20
    2e6c:	d51a      	bpl.n	2ea4 <spi_nrfx_transceive+0x84>
		LOG_ERR("Half-duplex not supported");
    2e6e:	4889      	ldr	r0, [pc, #548]	; (3094 <spi_nrfx_transceive+0x274>)
    2e70:	2145      	movs	r1, #69	; 0x45
    2e72:	f004 f814 	bl	6e9e <z_log_minimal_printk>
		return -ENOTSUP;
    2e76:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    2e7a:	6823      	ldr	r3, [r4, #0]
    2e7c:	889b      	ldrh	r3, [r3, #4]
    2e7e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    2e82:	d104      	bne.n	2e8e <spi_nrfx_transceive+0x6e>
		ctx->owner = NULL;
    2e84:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    2e86:	f104 0010 	add.w	r0, r4, #16
    2e8a:	f002 fd8b 	bl	59a4 <z_impl_k_sem_give>
}
    2e8e:	4628      	mov	r0, r5
    2e90:	b00b      	add	sp, #44	; 0x2c
    2e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    2e96:	69a3      	ldr	r3, [r4, #24]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d1cc      	bne.n	2e36 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
    2e9c:	6863      	ldr	r3, [r4, #4]
    2e9e:	4299      	cmp	r1, r3
    2ea0:	d1c9      	bne.n	2e36 <spi_nrfx_transceive+0x16>
    2ea2:	e7d1      	b.n	2e48 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    2ea4:	07f8      	lsls	r0, r7, #31
    2ea6:	d508      	bpl.n	2eba <spi_nrfx_transceive+0x9a>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    2ea8:	f8d8 2000 	ldr.w	r2, [r8]
    2eac:	487a      	ldr	r0, [pc, #488]	; (3098 <spi_nrfx_transceive+0x278>)
    2eae:	2145      	movs	r1, #69	; 0x45
    2eb0:	f003 fff5 	bl	6e9e <z_log_minimal_printk>
		return -EINVAL;
    2eb4:	f06f 0515 	mvn.w	r5, #21
    2eb8:	e7df      	b.n	2e7a <spi_nrfx_transceive+0x5a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    2eba:	0739      	lsls	r1, r7, #28
    2ebc:	d504      	bpl.n	2ec8 <spi_nrfx_transceive+0xa8>
		LOG_ERR("Loopback mode is not supported");
    2ebe:	4877      	ldr	r0, [pc, #476]	; (309c <spi_nrfx_transceive+0x27c>)
    2ec0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    2ec2:	f003 ffec 	bl	6e9e <z_log_minimal_printk>
    2ec6:	e7f5      	b.n	2eb4 <spi_nrfx_transceive+0x94>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    2ec8:	f3c7 1345 	ubfx	r3, r7, #5, #6
    2ecc:	2b08      	cmp	r3, #8
    2ece:	d002      	beq.n	2ed6 <spi_nrfx_transceive+0xb6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    2ed0:	4873      	ldr	r0, [pc, #460]	; (30a0 <spi_nrfx_transceive+0x280>)
    2ed2:	2145      	movs	r1, #69	; 0x45
    2ed4:	e7f5      	b.n	2ec2 <spi_nrfx_transceive+0xa2>
	if (spi_cfg->frequency < 125000) {
    2ed6:	6835      	ldr	r5, [r6, #0]
    2ed8:	4b72      	ldr	r3, [pc, #456]	; (30a4 <spi_nrfx_transceive+0x284>)
    2eda:	429d      	cmp	r5, r3
    2edc:	d802      	bhi.n	2ee4 <spi_nrfx_transceive+0xc4>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    2ede:	4872      	ldr	r0, [pc, #456]	; (30a8 <spi_nrfx_transceive+0x288>)
    2ee0:	2145      	movs	r1, #69	; 0x45
    2ee2:	e7ee      	b.n	2ec2 <spi_nrfx_transceive+0xa2>
	config = dev_config->def_config;
    2ee4:	f10b 0e10 	add.w	lr, fp, #16
    2ee8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2eec:	f10d 0c14 	add.w	ip, sp, #20
    2ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2ef4:	f8de 3000 	ldr.w	r3, [lr]
    2ef8:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    2efc:	9b03      	ldr	r3, [sp, #12]
    2efe:	42ab      	cmp	r3, r5
    2f00:	bf28      	it	cs
    2f02:	462b      	movcs	r3, r5
    2f04:	461d      	mov	r5, r3
	if (frequency < 250000) {
    2f06:	4b69      	ldr	r3, [pc, #420]	; (30ac <spi_nrfx_transceive+0x28c>)
    2f08:	429d      	cmp	r5, r3
    2f0a:	d940      	bls.n	2f8e <spi_nrfx_transceive+0x16e>
	} else if (frequency < 500000) {
    2f0c:	4b68      	ldr	r3, [pc, #416]	; (30b0 <spi_nrfx_transceive+0x290>)
    2f0e:	429d      	cmp	r5, r3
    2f10:	d940      	bls.n	2f94 <spi_nrfx_transceive+0x174>
	} else if (frequency < 1000000) {
    2f12:	4b68      	ldr	r3, [pc, #416]	; (30b4 <spi_nrfx_transceive+0x294>)
    2f14:	429d      	cmp	r5, r3
    2f16:	d940      	bls.n	2f9a <spi_nrfx_transceive+0x17a>
	} else if (frequency < 2000000) {
    2f18:	4b67      	ldr	r3, [pc, #412]	; (30b8 <spi_nrfx_transceive+0x298>)
    2f1a:	429d      	cmp	r5, r3
    2f1c:	d940      	bls.n	2fa0 <spi_nrfx_transceive+0x180>
	} else if (frequency < 4000000) {
    2f1e:	4b67      	ldr	r3, [pc, #412]	; (30bc <spi_nrfx_transceive+0x29c>)
    2f20:	429d      	cmp	r5, r3
    2f22:	d940      	bls.n	2fa6 <spi_nrfx_transceive+0x186>
	} else if (frequency < 8000000) {
    2f24:	4b66      	ldr	r3, [pc, #408]	; (30c0 <spi_nrfx_transceive+0x2a0>)
    2f26:	429d      	cmp	r5, r3
    2f28:	d340      	bcc.n	2fac <spi_nrfx_transceive+0x18c>
	} else if (frequency < 16000000) {
    2f2a:	4b66      	ldr	r3, [pc, #408]	; (30c4 <spi_nrfx_transceive+0x2a4>)
    2f2c:	429d      	cmp	r5, r3
    2f2e:	d340      	bcc.n	2fb2 <spi_nrfx_transceive+0x192>
		return NRF_SPIM_FREQ_32M;
    2f30:	4b65      	ldr	r3, [pc, #404]	; (30c8 <spi_nrfx_transceive+0x2a8>)
    2f32:	429d      	cmp	r5, r3
    2f34:	bf34      	ite	cc
    2f36:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
    2f3a:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2f3e:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    2f40:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2f42:	f007 0304 	and.w	r3, r7, #4
    2f46:	d537      	bpl.n	2fb8 <spi_nrfx_transceive+0x198>
			return NRF_SPIM_MODE_2;
    2f48:	2b00      	cmp	r3, #0
    2f4a:	bf14      	ite	ne
    2f4c:	2303      	movne	r3, #3
    2f4e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    2f50:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    2f54:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
    2f56:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    2f5a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    2f5e:	b12b      	cbz	r3, 2f6c <spi_nrfx_transceive+0x14c>
		nrfx_spim_uninit(&dev_config->spim);
    2f60:	4658      	mov	r0, fp
    2f62:	f002 f941 	bl	51e8 <nrfx_spim_uninit>
		dev_data->initialized = false;
    2f66:	2300      	movs	r3, #0
    2f68:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    2f6c:	4a57      	ldr	r2, [pc, #348]	; (30cc <spi_nrfx_transceive+0x2ac>)
    2f6e:	4653      	mov	r3, sl
    2f70:	a905      	add	r1, sp, #20
    2f72:	4658      	mov	r0, fp
    2f74:	f002 f876 	bl	5064 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    2f78:	4b55      	ldr	r3, [pc, #340]	; (30d0 <spi_nrfx_transceive+0x2b0>)
    2f7a:	4298      	cmp	r0, r3
	result = nrfx_spim_init(&dev_config->spim, &config,
    2f7c:	4602      	mov	r2, r0
	if (result != NRFX_SUCCESS) {
    2f7e:	d01f      	beq.n	2fc0 <spi_nrfx_transceive+0x1a0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    2f80:	4854      	ldr	r0, [pc, #336]	; (30d4 <spi_nrfx_transceive+0x2b4>)
    2f82:	2145      	movs	r1, #69	; 0x45
    2f84:	f003 ff8b 	bl	6e9e <z_log_minimal_printk>
		return -EIO;
    2f88:	f06f 0504 	mvn.w	r5, #4
    2f8c:	e775      	b.n	2e7a <spi_nrfx_transceive+0x5a>
		return NRF_SPIM_FREQ_125K;
    2f8e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    2f92:	e7d4      	b.n	2f3e <spi_nrfx_transceive+0x11e>
		return NRF_SPIM_FREQ_250K;
    2f94:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    2f98:	e7d1      	b.n	2f3e <spi_nrfx_transceive+0x11e>
		return NRF_SPIM_FREQ_500K;
    2f9a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    2f9e:	e7ce      	b.n	2f3e <spi_nrfx_transceive+0x11e>
		return NRF_SPIM_FREQ_1M;
    2fa0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    2fa4:	e7cb      	b.n	2f3e <spi_nrfx_transceive+0x11e>
		return NRF_SPIM_FREQ_2M;
    2fa6:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    2faa:	e7c8      	b.n	2f3e <spi_nrfx_transceive+0x11e>
		return NRF_SPIM_FREQ_4M;
    2fac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2fb0:	e7c5      	b.n	2f3e <spi_nrfx_transceive+0x11e>
		return NRF_SPIM_FREQ_8M;
    2fb2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    2fb6:	e7c2      	b.n	2f3e <spi_nrfx_transceive+0x11e>
			return NRF_SPIM_MODE_0;
    2fb8:	3b00      	subs	r3, #0
    2fba:	bf18      	it	ne
    2fbc:	2301      	movne	r3, #1
    2fbe:	e7c7      	b.n	2f50 <spi_nrfx_transceive+0x130>
	dev_data->initialized = true;
    2fc0:	2301      	movs	r3, #1
    2fc2:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
    2fc6:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
    2fca:	2301      	movs	r3, #1
    2fcc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    2fd0:	f1b9 0f00 	cmp.w	r9, #0
    2fd4:	d14c      	bne.n	3070 <spi_nrfx_transceive+0x250>
    2fd6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    2fda:	464a      	mov	r2, r9
    2fdc:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    2fde:	f104 0138 	add.w	r1, r4, #56	; 0x38
    2fe2:	f104 0248 	add.w	r2, r4, #72	; 0x48
    2fe6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2fea:	f004 f923 	bl	7234 <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2fee:	9b01      	ldr	r3, [sp, #4]
	ctx->tx_buf = (const uint8_t *)
    2ff0:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d144      	bne.n	3080 <spi_nrfx_transceive+0x260>
    2ff6:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    2ff8:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    2ffa:	f104 0250 	add.w	r2, r4, #80	; 0x50
    2ffe:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3002:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3006:	f004 f915 	bl	7234 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    300a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    300c:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    300e:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    3010:	2101      	movs	r1, #1
    3012:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    3014:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    3016:	f004 f932 	bl	727e <_spi_context_cs_control>
		transfer_next_chunk(dev);
    301a:	4640      	mov	r0, r8
    301c:	f7ff fe5e 	bl	2cdc <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3020:	6d25      	ldr	r5, [r4, #80]	; 0x50
    3022:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    3024:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3026:	429d      	cmp	r5, r3
    3028:	bf38      	it	cc
    302a:	461d      	movcc	r5, r3
    302c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    3030:	435d      	muls	r5, r3
			     ctx->config->frequency;
    3032:	f857 3b20 	ldr.w	r3, [r7], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3036:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	fbb5 f5f3 	udiv	r5, r5, r3
    3040:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    3042:	35c8      	adds	r5, #200	; 0xc8
    3044:	f240 30e7 	movw	r0, #999	; 0x3e7
    3048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    304c:	2300      	movs	r3, #0
    304e:	fbe5 010c 	umlal	r0, r1, r5, ip
    3052:	f7fd f855 	bl	100 <__aeabi_uldivmod>
    3056:	4602      	mov	r2, r0
    3058:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    305a:	4638      	mov	r0, r7
    305c:	f002 fcc2 	bl	59e4 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    3060:	b1b0      	cbz	r0, 3090 <spi_nrfx_transceive+0x270>
		LOG_ERR("Timeout waiting for transfer complete");
    3062:	481d      	ldr	r0, [pc, #116]	; (30d8 <spi_nrfx_transceive+0x2b8>)
    3064:	2145      	movs	r1, #69	; 0x45
    3066:	f003 ff1a 	bl	6e9e <z_log_minimal_printk>
		return -ETIMEDOUT;
    306a:	f06f 0573 	mvn.w	r5, #115	; 0x73
    306e:	e704      	b.n	2e7a <spi_nrfx_transceive+0x5a>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3070:	f8d9 2000 	ldr.w	r2, [r9]
    3074:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3076:	2a00      	cmp	r2, #0
    3078:	d0b0      	beq.n	2fdc <spi_nrfx_transceive+0x1bc>
    307a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    307e:	e7ad      	b.n	2fdc <spi_nrfx_transceive+0x1bc>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3080:	9b01      	ldr	r3, [sp, #4]
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3086:	2b00      	cmp	r3, #0
    3088:	d0b6      	beq.n	2ff8 <spi_nrfx_transceive+0x1d8>
    308a:	9b01      	ldr	r3, [sp, #4]
    308c:	685b      	ldr	r3, [r3, #4]
    308e:	e7b3      	b.n	2ff8 <spi_nrfx_transceive+0x1d8>
	status = ctx->sync_status;
    3090:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    3092:	e6f2      	b.n	2e7a <spi_nrfx_transceive+0x5a>
    3094:	0000a901 	.word	0x0000a901
    3098:	0000a920 	.word	0x0000a920
    309c:	0000a947 	.word	0x0000a947
    30a0:	0000a96b 	.word	0x0000a96b
    30a4:	0001e847 	.word	0x0001e847
    30a8:	0000a99f 	.word	0x0000a99f
    30ac:	0003d08f 	.word	0x0003d08f
    30b0:	0007a11f 	.word	0x0007a11f
    30b4:	000f423f 	.word	0x000f423f
    30b8:	001e847f 	.word	0x001e847f
    30bc:	003d08ff 	.word	0x003d08ff
    30c0:	007a1200 	.word	0x007a1200
    30c4:	00f42400 	.word	0x00f42400
    30c8:	01e84800 	.word	0x01e84800
    30cc:	00002d81 	.word	0x00002d81
    30d0:	0bad0000 	.word	0x0bad0000
    30d4:	0000a9d5 	.word	0x0000a9d5
    30d8:	0000aa01 	.word	0x0000aa01

000030dc <flash_nor_get_parameters>:
flash_nor_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nor_parameters;
}
    30dc:	4800      	ldr	r0, [pc, #0]	; (30e0 <flash_nor_get_parameters+0x4>)
    30de:	4770      	bx	lr
    30e0:	00009c34 	.word	0x00009c34

000030e4 <spi_nor_init>:
{
    30e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30e8:	4604      	mov	r4, r0
    30ea:	b089      	sub	sp, #36	; 0x24
		k_sem_init(&driver_data->sem, 1, K_SEM_MAX_LIMIT);
    30ec:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    30ee:	f04f 32ff 	mov.w	r2, #4294967295
    30f2:	2101      	movs	r1, #1
    30f4:	f006 f976 	bl	93e4 <z_impl_k_sem_init>
	const struct spi_nor_config *cfg = dev->config;
    30f8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 * @retval false if the SPI bus is not ready for use.
 */
static inline bool spi_is_ready(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
    30fc:	f8d8 0000 	ldr.w	r0, [r8]
    3100:	f006 f93a 	bl	9378 <z_device_is_ready>
    3104:	b910      	cbnz	r0, 310c <spi_nor_init+0x28>
		return -ENODEV;
    3106:	f06f 0712 	mvn.w	r7, #18
	return spi_nor_configure(dev);
    310a:	e05e      	b.n	31ca <spi_nor_init+0xe6>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
    310c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    3110:	bbbb      	cbnz	r3, 3182 <spi_nor_init+0x9e>
		delay_until_exit_dpd_ok(dev);
    3112:	6925      	ldr	r5, [r4, #16]
	return z_impl_k_uptime_ticks();
    3114:	f006 fabe 	bl	9694 <z_impl_k_uptime_ticks>
    3118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    311c:	fba0 0302 	umull	r0, r3, r0, r2
    3120:	fb02 3301 	mla	r3, r2, r1, r3
    3124:	0bc0      	lsrs	r0, r0, #15
    3126:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
		if (since < 0) {
    312a:	692b      	ldr	r3, [r5, #16]
    312c:	4283      	cmp	r3, r0
    312e:	d103      	bne.n	3138 <spi_nor_init+0x54>
	return z_impl_k_sleep(timeout);
    3130:	2021      	movs	r0, #33	; 0x21
    3132:	2100      	movs	r1, #0
    3134:	f003 f87a 	bl	622c <z_impl_k_sleep>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_RDPD);
    3138:	2300      	movs	r3, #0
    313a:	e9cd 3300 	strd	r3, r3, [sp]
    313e:	2280      	movs	r2, #128	; 0x80
    3140:	21ab      	movs	r1, #171	; 0xab
    3142:	4620      	mov	r0, r4
    3144:	f004 f8ed 	bl	7322 <spi_nor_access>
		if (ret == 0) {
    3148:	b918      	cbnz	r0, 3152 <spi_nor_init+0x6e>
    314a:	2021      	movs	r0, #33	; 0x21
    314c:	2100      	movs	r1, #0
    314e:	f003 f86d 	bl	622c <z_impl_k_sleep>
	acquire_device(dev);
    3152:	6920      	ldr	r0, [r4, #16]
    3154:	f004 f8df 	bl	7316 <acquire_device.isra.0>
	int ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDID, id, SPI_NOR_MAX_ID_LEN);
    3158:	2703      	movs	r7, #3
    315a:	2300      	movs	r3, #0
    315c:	ae04      	add	r6, sp, #16
    315e:	9701      	str	r7, [sp, #4]
    3160:	9600      	str	r6, [sp, #0]
    3162:	461a      	mov	r2, r3
    3164:	219f      	movs	r1, #159	; 0x9f
    3166:	4620      	mov	r0, r4
    3168:	f004 f8db 	bl	7322 <spi_nor_access>
    316c:	4605      	mov	r5, r0
	release_device(dev);
    316e:	6920      	ldr	r0, [r4, #16]
    3170:	f004 f8cf 	bl	7312 <release_device.isra.0>
	if (rc != 0) {
    3174:	b15d      	cbz	r5, 318e <spi_nor_init+0xaa>
		LOG_ERR("JEDEC ID read failed: %d", rc);
    3176:	488d      	ldr	r0, [pc, #564]	; (33ac <spi_nor_init+0x2c8>)
    3178:	462a      	mov	r2, r5
    317a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("layout setup failed: %d", rc);
    317c:	f003 fe8f 	bl	6e9e <z_log_minimal_printk>
    3180:	e7c1      	b.n	3106 <spi_nor_init+0x22>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    3182:	6818      	ldr	r0, [r3, #0]
    3184:	f006 f8f8 	bl	9378 <z_device_is_ready>
	if (spec->config.cs &&
    3188:	2800      	cmp	r0, #0
    318a:	d1c2      	bne.n	3112 <spi_nor_init+0x2e>
    318c:	e7bb      	b.n	3106 <spi_nor_init+0x22>
	if (memcmp(jedec_id, cfg->jedec_id, sizeof(jedec_id)) != 0) {
    318e:	463a      	mov	r2, r7
    3190:	f108 011c 	add.w	r1, r8, #28
    3194:	4630      	mov	r0, r6
    3196:	f003 ff3b 	bl	7010 <memcmp>
    319a:	4607      	mov	r7, r0
    319c:	b1c8      	cbz	r0, 31d2 <spi_nor_init+0xee>
		LOG_ERR("Device id %02x %02x %02x does not match config %02x %02x %02x",
    319e:	f898 301e 	ldrb.w	r3, [r8, #30]
    31a2:	9303      	str	r3, [sp, #12]
    31a4:	f898 301d 	ldrb.w	r3, [r8, #29]
    31a8:	9302      	str	r3, [sp, #8]
    31aa:	f898 301c 	ldrb.w	r3, [r8, #28]
    31ae:	9301      	str	r3, [sp, #4]
    31b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
    31b4:	9300      	str	r3, [sp, #0]
    31b6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    31ba:	f89d 3011 	ldrb.w	r3, [sp, #17]
    31be:	487c      	ldr	r0, [pc, #496]	; (33b0 <spi_nor_init+0x2cc>)
    31c0:	2145      	movs	r1, #69	; 0x45
    31c2:	f003 fe6c 	bl	6e9e <z_log_minimal_printk>
		return -EINVAL;
    31c6:	f06f 0715 	mvn.w	r7, #21
}
    31ca:	4638      	mov	r0, r7
    31cc:	b009      	add	sp, #36	; 0x24
    31ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (cfg->has_lock != 0) {
    31d2:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
    31d6:	ae06      	add	r6, sp, #24
    31d8:	b3ab      	cbz	r3, 3246 <spi_nor_init+0x162>
		acquire_device(dev);
    31da:	6920      	ldr	r0, [r4, #16]
    31dc:	f004 f89b 	bl	7316 <acquire_device.isra.0>
	int ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDSR, &reg, sizeof(reg));
    31e0:	2301      	movs	r3, #1
    31e2:	e9cd 6300 	strd	r6, r3, [sp]
    31e6:	463a      	mov	r2, r7
    31e8:	463b      	mov	r3, r7
    31ea:	2105      	movs	r1, #5
    31ec:	4620      	mov	r0, r4
    31ee:	f004 f898 	bl	7322 <spi_nor_access>
	if (ret == 0) {
    31f2:	1e05      	subs	r5, r0, #0
    31f4:	f040 80d7 	bne.w	33a6 <spi_nor_init+0x2c2>
		ret = reg;
    31f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		if (rc > 0) {
    31fc:	b305      	cbz	r5, 3240 <spi_nor_init+0x15c>
			rc = spi_nor_wrsr(dev, rc & ~cfg->has_lock);
    31fe:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
    3202:	ea25 0503 	bic.w	r5, r5, r3
	int ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
    3206:	2300      	movs	r3, #0
    3208:	e9cd 3300 	strd	r3, r3, [sp]
    320c:	2280      	movs	r2, #128	; 0x80
    320e:	2106      	movs	r1, #6
    3210:	4620      	mov	r0, r4
    3212:	f88d 5018 	strb.w	r5, [sp, #24]
    3216:	f004 f884 	bl	7322 <spi_nor_access>
	if (ret == 0) {
    321a:	4605      	mov	r5, r0
    321c:	b960      	cbnz	r0, 3238 <spi_nor_init+0x154>
		ret = spi_nor_access(dev, SPI_NOR_CMD_WRSR, NOR_ACCESS_WRITE, 0, &sr,
    321e:	2101      	movs	r1, #1
    3220:	4603      	mov	r3, r0
    3222:	e9cd 6100 	strd	r6, r1, [sp]
    3226:	2280      	movs	r2, #128	; 0x80
    3228:	4620      	mov	r0, r4
    322a:	f004 f87a 	bl	7322 <spi_nor_access>
    322e:	4605      	mov	r5, r0
		spi_nor_wait_until_ready(dev);
    3230:	4620      	mov	r0, r4
    3232:	f004 f8ed 	bl	7410 <spi_nor_wait_until_ready.isra.0>
		if (rc != 0) {
    3236:	b11d      	cbz	r5, 3240 <spi_nor_init+0x15c>
			LOG_ERR("BP clear failed: %d\n", rc);
    3238:	485e      	ldr	r0, [pc, #376]	; (33b4 <spi_nor_init+0x2d0>)
    323a:	462a      	mov	r2, r5
    323c:	2145      	movs	r1, #69	; 0x45
    323e:	e79d      	b.n	317c <spi_nor_init+0x98>
		release_device(dev);
    3240:	6920      	ldr	r0, [r4, #16]
    3242:	f004 f866 	bl	7312 <release_device.isra.0>
	const struct spi_nor_config *cfg = dev->config;
    3246:	6863      	ldr	r3, [r4, #4]
	struct spi_nor_data *data = dev->data;
    3248:	f8d4 9010 	ldr.w	r9, [r4, #16]
	struct jesd216_param_header bfp_hdr = {
    324c:	2100      	movs	r1, #0
    324e:	9106      	str	r1, [sp, #24]
    3250:	6071      	str	r1, [r6, #4]
    3252:	7fda      	ldrb	r2, [r3, #31]
    3254:	f88d 201b 	strb.w	r2, [sp, #27]
	rc = spi_nor_process_bfp(dev, &bfp_hdr, cfg->bfp);
    3258:	6a1d      	ldr	r5, [r3, #32]
}

/* Extract the density of the chip in bits from BFP DW2. */
static inline uint64_t jesd216_bfp_density(const struct jesd216_bfp *hp)
{
	uint32_t dw = sys_le32_to_cpu(hp->dw2);
    325a:	686b      	ldr	r3, [r5, #4]

	if (dw & BIT(31)) {
    325c:	428b      	cmp	r3, r1
	struct jesd216_erase_type *etp = data->erase_types;
    325e:	f109 0815 	add.w	r8, r9, #21
    3262:	da49      	bge.n	32f8 <spi_nor_init+0x214>
		return BIT64(dw & BIT_MASK(31));
    3264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    3268:	2201      	movs	r2, #1
    326a:	f1a3 0a20 	sub.w	sl, r3, #32
    326e:	f1c3 0120 	rsb	r1, r3, #32
    3272:	fa02 fa0a 	lsl.w	sl, r2, sl
    3276:	fa22 f101 	lsr.w	r1, r2, r1
    327a:	ea4a 0a01 	orr.w	sl, sl, r1
    327e:	fa02 f303 	lsl.w	r3, r2, r3
	const size_t flash_size = jesd216_bfp_density(bfp) / 8U;
    3282:	08db      	lsrs	r3, r3, #3
    3284:	ea43 7a4a 	orr.w	sl, r3, sl, lsl #29
	LOG_INF("%s: %u MiBy flash", dev->name, (uint32_t)(flash_size >> 20));
    3288:	6822      	ldr	r2, [r4, #0]
    328a:	484b      	ldr	r0, [pc, #300]	; (33b8 <spi_nor_init+0x2d4>)
    328c:	ea4f 531a 	mov.w	r3, sl, lsr #20
    3290:	2149      	movs	r1, #73	; 0x49
    3292:	f003 fe04 	bl	6e9e <z_log_minimal_printk>
	memset(data->erase_types, 0, sizeof(data->erase_types));
    3296:	2208      	movs	r2, #8
    3298:	2100      	movs	r1, #0
    329a:	4640      	mov	r0, r8
    329c:	f003 fed4 	bl	7048 <memset>
	for (uint8_t ti = 1; ti <= ARRAY_SIZE(data->erase_types); ++ti) {
    32a0:	f04f 0b01 	mov.w	fp, #1
		if (jesd216_bfp_erase(bfp, ti, etp) == 0) {
    32a4:	4659      	mov	r1, fp
	for (uint8_t ti = 1; ti <= ARRAY_SIZE(data->erase_types); ++ti) {
    32a6:	f10b 0b01 	add.w	fp, fp, #1
		if (jesd216_bfp_erase(bfp, ti, etp) == 0) {
    32aa:	4642      	mov	r2, r8
    32ac:	4628      	mov	r0, r5
	for (uint8_t ti = 1; ti <= ARRAY_SIZE(data->erase_types); ++ti) {
    32ae:	fa5f fb8b 	uxtb.w	fp, fp
		if (jesd216_bfp_erase(bfp, ti, etp) == 0) {
    32b2:	f004 f9d1 	bl	7658 <jesd216_bfp_erase>
	for (uint8_t ti = 1; ti <= ARRAY_SIZE(data->erase_types); ++ti) {
    32b6:	f1bb 0f05 	cmp.w	fp, #5
		++etp;
    32ba:	f108 0802 	add.w	r8, r8, #2
	for (uint8_t ti = 1; ti <= ARRAY_SIZE(data->erase_types); ++ti) {
    32be:	d1f1      	bne.n	32a4 <spi_nor_init+0x1c0>
 */
static inline uint32_t jesd216_bfp_page_size(const struct jesd216_param_header *php,
					     const struct jesd216_bfp *bfp)
{
	/* Page size introduced in JESD216A */
	if (php->len_dw < 11) {
    32c0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    32c4:	2b0a      	cmp	r3, #10
		return 256;
	}

	uint32_t dw11 = sys_le32_to_cpu(bfp->dw10[1]);
    32c6:	bf81      	itttt	hi
    32c8:	6aab      	ldrhi	r3, [r5, #40]	; 0x28
	uint8_t exp = (dw11 >> 4) & 0x0F;

	return BIT(exp);
    32ca:	f3c3 1203 	ubfxhi	r2, r3, #4, #4
    32ce:	2301      	movhi	r3, #1
    32d0:	4093      	lslhi	r3, r2
		return 256;
    32d2:	bf98      	it	ls
    32d4:	f44f 7380 	movls.w	r3, #256	; 0x100
	data->page_size = jesd216_bfp_page_size(php, bfp);
    32d8:	f8a9 301e 	strh.w	r3, [r9, #30]
	return cfg->flash_size;
    32dc:	6863      	ldr	r3, [r4, #4]
	if (flash_size != dev_flash_size(dev)) {
    32de:	691b      	ldr	r3, [r3, #16]
    32e0:	459a      	cmp	sl, r3
    32e2:	d00c      	beq.n	32fe <spi_nor_init+0x21a>
		LOG_ERR("BFP flash size mismatch with devicetree");
    32e4:	4835      	ldr	r0, [pc, #212]	; (33bc <spi_nor_init+0x2d8>)
    32e6:	2145      	movs	r1, #69	; 0x45
    32e8:	f003 fdd9 	bl	6e9e <z_log_minimal_printk>
		return -EINVAL;
    32ec:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("SFDP read failed: %d", rc);
    32f0:	4833      	ldr	r0, [pc, #204]	; (33c0 <spi_nor_init+0x2dc>)
    32f2:	462a      	mov	r2, r5
    32f4:	2145      	movs	r1, #69	; 0x45
    32f6:	e741      	b.n	317c <spi_nor_init+0x98>
	return 1U + (uint64_t)dw;
    32f8:	3301      	adds	r3, #1
    32fa:	468a      	mov	sl, r1
    32fc:	e7c1      	b.n	3282 <spi_nor_init+0x19e>
	uint32_t dw1 = sys_le32_to_cpu(hp->dw1);
    32fe:	682b      	ldr	r3, [r5, #0]
	if (jesd216_bfp_addrbytes(bfp) != JESD216_SFDP_BFP_DW1_ADDRBYTES_VAL_3B) {
    3300:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
    3304:	d03c      	beq.n	3380 <spi_nor_init+0x29c>
		if (jesd216_bfp_decode_dw16(php, bfp, &dw16) == 0) {
    3306:	4629      	mov	r1, r5
    3308:	aa05      	add	r2, sp, #20
    330a:	4630      	mov	r0, r6
    330c:	f000 f924 	bl	3558 <jesd216_bfp_decode_dw16>
    3310:	4605      	mov	r5, r0
    3312:	bba8      	cbnz	r0, 3380 <spi_nor_init+0x29c>
			rc = spi_nor_set_address_mode(dev, dw16.enter_4ba);
    3314:	f89d 6014 	ldrb.w	r6, [sp, #20]
	    || (enter_4byte_addr == 0xff)) {
    3318:	1e73      	subs	r3, r6, #1
	if ((enter_4byte_addr == 0)
    331a:	b2db      	uxtb	r3, r3
    331c:	2bfd      	cmp	r3, #253	; 0xfd
    331e:	d82f      	bhi.n	3380 <spi_nor_init+0x29c>
	if ((enter_4byte_addr & 0x03) == 0) {
    3320:	07b2      	lsls	r2, r6, #30
    3322:	d02a      	beq.n	337a <spi_nor_init+0x296>
	acquire_device(dev);
    3324:	6920      	ldr	r0, [r4, #16]
    3326:	f003 fff6 	bl	7316 <acquire_device.isra.0>
	if ((enter_4byte_addr & 0x02) != 0) {
    332a:	07b3      	lsls	r3, r6, #30
    332c:	d413      	bmi.n	3356 <spi_nor_init+0x272>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_4BA);
    332e:	2300      	movs	r3, #0
    3330:	e9cd 3300 	strd	r3, r3, [sp]
    3334:	2280      	movs	r2, #128	; 0x80
    3336:	21b7      	movs	r1, #183	; 0xb7
    3338:	4620      	mov	r0, r4
    333a:	f003 fff2 	bl	7322 <spi_nor_access>
	if (ret == 0) {
    333e:	4605      	mov	r5, r0
    3340:	b1a8      	cbz	r0, 336e <spi_nor_init+0x28a>
	release_device(dev);
    3342:	6920      	ldr	r0, [r4, #16]
    3344:	f003 ffe5 	bl	7312 <release_device.isra.0>
		if (rc != 0) {
    3348:	b1d5      	cbz	r5, 3380 <spi_nor_init+0x29c>
			LOG_ERR("Unable to enter 4-byte mode: %d\n", rc);
    334a:	481e      	ldr	r0, [pc, #120]	; (33c4 <spi_nor_init+0x2e0>)
    334c:	462a      	mov	r2, r5
    334e:	2145      	movs	r1, #69	; 0x45
    3350:	f003 fda5 	bl	6e9e <z_log_minimal_printk>
	if (rc != 0) {
    3354:	e7cc      	b.n	32f0 <spi_nor_init+0x20c>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
    3356:	e9cd 5500 	strd	r5, r5, [sp]
    335a:	462b      	mov	r3, r5
    335c:	2280      	movs	r2, #128	; 0x80
    335e:	2106      	movs	r1, #6
    3360:	4620      	mov	r0, r4
    3362:	f003 ffde 	bl	7322 <spi_nor_access>
	if (ret == 0) {
    3366:	4605      	mov	r5, r0
    3368:	2800      	cmp	r0, #0
    336a:	d0e0      	beq.n	332e <spi_nor_init+0x24a>
    336c:	e7e9      	b.n	3342 <spi_nor_init+0x25e>
		data->flag_access_32bit = true;
    336e:	6922      	ldr	r2, [r4, #16]
    3370:	7d13      	ldrb	r3, [r2, #20]
    3372:	f043 0301 	orr.w	r3, r3, #1
    3376:	7513      	strb	r3, [r2, #20]
    3378:	e7e3      	b.n	3342 <spi_nor_init+0x25e>
		return -ENOTSUP;
    337a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    337e:	e7e4      	b.n	334a <spi_nor_init+0x266>
	rc = setup_pages_layout(dev);
    3380:	6863      	ldr	r3, [r4, #4]
	return cfg->flash_size;
    3382:	691a      	ldr	r2, [r3, #16]
	size_t layout_size = layout->pages_size * layout->pages_count;
    3384:	e9d3 3105 	ldrd	r3, r1, [r3, #20]
    3388:	fb03 f001 	mul.w	r0, r3, r1
	if (flash_size != layout_size) {
    338c:	4282      	cmp	r2, r0
    338e:	f43f af1c 	beq.w	31ca <spi_nor_init+0xe6>
		LOG_ERR("device size %u mismatch %zu * %zu By pages",
    3392:	480d      	ldr	r0, [pc, #52]	; (33c8 <spi_nor_init+0x2e4>)
    3394:	9100      	str	r1, [sp, #0]
    3396:	2145      	movs	r1, #69	; 0x45
    3398:	f003 fd81 	bl	6e9e <z_log_minimal_printk>
		LOG_ERR("layout setup failed: %d", rc);
    339c:	480b      	ldr	r0, [pc, #44]	; (33cc <spi_nor_init+0x2e8>)
    339e:	f06f 0215 	mvn.w	r2, #21
    33a2:	2145      	movs	r1, #69	; 0x45
    33a4:	e6ea      	b.n	317c <spi_nor_init+0x98>
		if (rc > 0) {
    33a6:	f73f af2a 	bgt.w	31fe <spi_nor_init+0x11a>
    33aa:	e745      	b.n	3238 <spi_nor_init+0x154>
    33ac:	0000aa40 	.word	0x0000aa40
    33b0:	0000aa5e 	.word	0x0000aa5e
    33b4:	0000aaa1 	.word	0x0000aaa1
    33b8:	0000aabb 	.word	0x0000aabb
    33bc:	0000aad2 	.word	0x0000aad2
    33c0:	0000ab25 	.word	0x0000ab25
    33c4:	0000aaff 	.word	0x0000aaff
    33c8:	0000ab3f 	.word	0x0000ab3f
    33cc:	0000ab6f 	.word	0x0000ab6f

000033d0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    33d0:	4b02      	ldr	r3, [pc, #8]	; (33dc <flash_nrf_pages_layout+0xc>)
    33d2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    33d4:	2301      	movs	r3, #1
    33d6:	6013      	str	r3, [r2, #0]
}
    33d8:	4770      	bx	lr
    33da:	bf00      	nop
    33dc:	200038b4 	.word	0x200038b4

000033e0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    33e0:	4800      	ldr	r0, [pc, #0]	; (33e4 <flash_nrf_get_parameters+0x4>)
    33e2:	4770      	bx	lr
    33e4:	00009c8c 	.word	0x00009c8c

000033e8 <flash_nrf_read>:
{
    33e8:	b570      	push	{r4, r5, r6, lr}
    33ea:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    33ec:	4628      	mov	r0, r5
    33ee:	4619      	mov	r1, r3
{
    33f0:	4616      	mov	r6, r2
    33f2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    33f4:	f004 f8f3 	bl	75de <is_regular_addr_valid>
    33f8:	b940      	cbnz	r0, 340c <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    33fa:	4809      	ldr	r0, [pc, #36]	; (3420 <flash_nrf_read+0x38>)
    33fc:	4623      	mov	r3, r4
    33fe:	462a      	mov	r2, r5
    3400:	2145      	movs	r1, #69	; 0x45
    3402:	f003 fd4c 	bl	6e9e <z_log_minimal_printk>
    3406:	f06f 0015 	mvn.w	r0, #21
}
    340a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    340c:	b134      	cbz	r4, 341c <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
    340e:	4622      	mov	r2, r4
    3410:	4629      	mov	r1, r5
    3412:	4630      	mov	r0, r6
    3414:	f003 fe0d 	bl	7032 <memcpy>
	return 0;
    3418:	2000      	movs	r0, #0
    341a:	e7f6      	b.n	340a <flash_nrf_read+0x22>
		return 0;
    341c:	4620      	mov	r0, r4
    341e:	e7f4      	b.n	340a <flash_nrf_read+0x22>
    3420:	0000ab94 	.word	0x0000ab94

00003424 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3424:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    3426:	2201      	movs	r2, #1
    3428:	4611      	mov	r1, r2
    342a:	4806      	ldr	r0, [pc, #24]	; (3444 <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    342c:	4c06      	ldr	r4, [pc, #24]	; (3448 <nrf_flash_init+0x24>)
    342e:	f005 ffd9 	bl	93e4 <z_impl_k_sem_init>
    3432:	f005 ff65 	bl	9300 <nrfx_nvmc_flash_page_count_get>
    3436:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3438:	f005 ff5e 	bl	92f8 <nrfx_nvmc_flash_page_size_get>
    343c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    343e:	2000      	movs	r0, #0
    3440:	bd10      	pop	{r4, pc}
    3442:	bf00      	nop
    3444:	200038bc 	.word	0x200038bc
    3448:	200038b4 	.word	0x200038b4

0000344c <flash_nrf_erase>:
{
    344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    344e:	460e      	mov	r6, r1
    3450:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3452:	f005 ff51 	bl	92f8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    3456:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3458:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    345a:	4630      	mov	r0, r6
    345c:	f004 f8bf 	bl	75de <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3460:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    3462:	b348      	cbz	r0, 34b8 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3464:	fbb6 f3f5 	udiv	r3, r6, r5
    3468:	fb05 6313 	mls	r3, r5, r3, r6
    346c:	b923      	cbnz	r3, 3478 <flash_nrf_erase+0x2c>
    346e:	fbb4 f0f5 	udiv	r0, r4, r5
    3472:	fb05 4010 	mls	r0, r5, r0, r4
    3476:	b140      	cbz	r0, 348a <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    3478:	4812      	ldr	r0, [pc, #72]	; (34c4 <flash_nrf_erase+0x78>)
    347a:	4623      	mov	r3, r4
    347c:	4632      	mov	r2, r6
    347e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3480:	f003 fd0d 	bl	6e9e <z_log_minimal_printk>
		return -EINVAL;
    3484:	f06f 0015 	mvn.w	r0, #21
    3488:	e015      	b.n	34b6 <flash_nrf_erase+0x6a>
		if (!n_pages) {
    348a:	42a5      	cmp	r5, r4
    348c:	d813      	bhi.n	34b6 <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
    348e:	f04f 32ff 	mov.w	r2, #4294967295
    3492:	f04f 33ff 	mov.w	r3, #4294967295
    3496:	480c      	ldr	r0, [pc, #48]	; (34c8 <flash_nrf_erase+0x7c>)
    3498:	f002 faa4 	bl	59e4 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    349c:	f005 ff2c 	bl	92f8 <nrfx_nvmc_flash_page_size_get>
    34a0:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    34a2:	4638      	mov	r0, r7
    34a4:	f001 fda2 	bl	4fec <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    34a8:	1b64      	subs	r4, r4, r5
    34aa:	442f      	add	r7, r5
    34ac:	d1f9      	bne.n	34a2 <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
    34ae:	4806      	ldr	r0, [pc, #24]	; (34c8 <flash_nrf_erase+0x7c>)
    34b0:	f002 fa78 	bl	59a4 <z_impl_k_sem_give>
	return ret;
    34b4:	4620      	mov	r0, r4
}
    34b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    34b8:	4804      	ldr	r0, [pc, #16]	; (34cc <flash_nrf_erase+0x80>)
    34ba:	4623      	mov	r3, r4
    34bc:	4632      	mov	r2, r6
    34be:	2145      	movs	r1, #69	; 0x45
    34c0:	e7de      	b.n	3480 <flash_nrf_erase+0x34>
    34c2:	bf00      	nop
    34c4:	0000abb6 	.word	0x0000abb6
    34c8:	200038bc 	.word	0x200038bc
    34cc:	0000ab94 	.word	0x0000ab94

000034d0 <flash_nrf_write>:
{
    34d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34d2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    34d4:	4630      	mov	r0, r6
    34d6:	4619      	mov	r1, r3
{
    34d8:	4617      	mov	r7, r2
    34da:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    34dc:	f004 f87f 	bl	75de <is_regular_addr_valid>
    34e0:	b940      	cbnz	r0, 34f4 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    34e2:	4819      	ldr	r0, [pc, #100]	; (3548 <flash_nrf_write+0x78>)
    34e4:	4623      	mov	r3, r4
    34e6:	4632      	mov	r2, r6
    34e8:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    34ea:	f003 fcd8 	bl	6e9e <z_log_minimal_printk>
		return -EINVAL;
    34ee:	f06f 0015 	mvn.w	r0, #21
}
    34f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    34f4:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    34f8:	f015 0503 	ands.w	r5, r5, #3
    34fc:	d004      	beq.n	3508 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    34fe:	4813      	ldr	r0, [pc, #76]	; (354c <flash_nrf_write+0x7c>)
    3500:	4623      	mov	r3, r4
    3502:	4632      	mov	r2, r6
    3504:	2145      	movs	r1, #69	; 0x45
    3506:	e7f0      	b.n	34ea <flash_nrf_write+0x1a>
	if (!len) {
    3508:	b1dc      	cbz	r4, 3542 <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
    350a:	4811      	ldr	r0, [pc, #68]	; (3550 <flash_nrf_write+0x80>)
    350c:	f04f 32ff 	mov.w	r2, #4294967295
    3510:	f04f 33ff 	mov.w	r3, #4294967295
    3514:	f002 fa66 	bl	59e4 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    3518:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    351c:	42ac      	cmp	r4, r5
    351e:	eb05 0006 	add.w	r0, r5, r6
    3522:	d109      	bne.n	3538 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3524:	4a0b      	ldr	r2, [pc, #44]	; (3554 <flash_nrf_write+0x84>)
    3526:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    352a:	07db      	lsls	r3, r3, #31
    352c:	d5fb      	bpl.n	3526 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
    352e:	4808      	ldr	r0, [pc, #32]	; (3550 <flash_nrf_write+0x80>)
    3530:	f002 fa38 	bl	59a4 <z_impl_k_sem_give>
	return ret;
    3534:	2000      	movs	r0, #0
}
    3536:	e7dc      	b.n	34f2 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    3538:	5979      	ldr	r1, [r7, r5]
    353a:	f001 fd77 	bl	502c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    353e:	3504      	adds	r5, #4
}
    3540:	e7ec      	b.n	351c <flash_nrf_write+0x4c>
		return 0;
    3542:	4620      	mov	r0, r4
    3544:	e7d5      	b.n	34f2 <flash_nrf_write+0x22>
    3546:	bf00      	nop
    3548:	0000ab94 	.word	0x0000ab94
    354c:	0000abda 	.word	0x0000abda
    3550:	200038bc 	.word	0x200038bc
    3554:	4001e000 	.word	0x4001e000

00003558 <jesd216_bfp_decode_dw16>:
int jesd216_bfp_decode_dw16(const struct jesd216_param_header *php,
			    const struct jesd216_bfp *bfp,
			    struct jesd216_bfp_dw16 *res)
{
	/* DW16 introduced in JESD216A */
	if (php->len_dw < 16) {
    3558:	78c3      	ldrb	r3, [r0, #3]
    355a:	2b0f      	cmp	r3, #15
    355c:	d914      	bls.n	3588 <jesd216_bfp_decode_dw16+0x30>
		return -ENOTSUP;
	}

	uint32_t dw16 = sys_le32_to_cpu(bfp->dw10[6]);
    355e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c

	res->enter_4ba = (dw16 >> 24) & 0xFF;
	res->exit_4ba = (dw16 >> 14) & 0x3FF;
    3560:	480b      	ldr	r0, [pc, #44]	; (3590 <jesd216_bfp_decode_dw16+0x38>)
	res->enter_4ba = (dw16 >> 24) & 0xFF;
    3562:	0e0b      	lsrs	r3, r1, #24
    3564:	7013      	strb	r3, [r2, #0]
	res->exit_4ba = (dw16 >> 14) & 0x3FF;
    3566:	028b      	lsls	r3, r1, #10
    3568:	ea00 1091 	and.w	r0, r0, r1, lsr #6
    356c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
    3570:	0609      	lsls	r1, r1, #24
    3572:	4303      	orrs	r3, r0
    3574:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
    3578:	6810      	ldr	r0, [r2, #0]
    357a:	430b      	orrs	r3, r1
    357c:	4905      	ldr	r1, [pc, #20]	; (3594 <jesd216_bfp_decode_dw16+0x3c>)
    357e:	4001      	ands	r1, r0
    3580:	430b      	orrs	r3, r1
    3582:	6013      	str	r3, [r2, #0]
	res->srrs_support = (dw16 >> 8) & 0x3F;
	res->sr1_interface = (dw16 >> 0) & 0x7F;

	return 0;
    3584:	2000      	movs	r0, #0
    3586:	4770      	bx	lr
		return -ENOTSUP;
    3588:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    358c:	4770      	bx	lr
    358e:	bf00      	nop
    3590:	0003ff00 	.word	0x0003ff00
    3594:	800000ff 	.word	0x800000ff

00003598 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3598:	4b07      	ldr	r3, [pc, #28]	; (35b8 <uart_nrfx_poll_in+0x20>)
    359a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    359e:	b142      	cbz	r2, 35b2 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35a0:	2000      	movs	r0, #0
    35a2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    35a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    35aa:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    35ae:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    35b0:	4770      	bx	lr
		return -1;
    35b2:	f04f 30ff 	mov.w	r0, #4294967295
}
    35b6:	4770      	bx	lr
    35b8:	40002000 	.word	0x40002000

000035bc <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    35bc:	4b02      	ldr	r3, [pc, #8]	; (35c8 <uart_nrfx_err_check+0xc>)
    35be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    35c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    35c6:	4770      	bx	lr
    35c8:	40002000 	.word	0x40002000

000035cc <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    35cc:	b570      	push	{r4, r5, r6, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    35ce:	794b      	ldrb	r3, [r1, #5]
    35d0:	2b01      	cmp	r3, #1
    35d2:	d024      	beq.n	361e <uart_nrfx_configure+0x52>
    35d4:	2b03      	cmp	r3, #3
    35d6:	d11f      	bne.n	3618 <uart_nrfx_configure+0x4c>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    35d8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    35da:	798b      	ldrb	r3, [r1, #6]
    35dc:	2b03      	cmp	r3, #3
    35de:	d11b      	bne.n	3618 <uart_nrfx_configure+0x4c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    35e0:	79cc      	ldrb	r4, [r1, #7]
    35e2:	b9cc      	cbnz	r4, 3618 <uart_nrfx_configure+0x4c>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    35e4:	790a      	ldrb	r2, [r1, #4]
    35e6:	2a01      	cmp	r2, #1
    35e8:	d01b      	beq.n	3622 <uart_nrfx_configure+0x56>
    35ea:	2a02      	cmp	r2, #2
    35ec:	d01b      	beq.n	3626 <uart_nrfx_configure+0x5a>
    35ee:	b99a      	cbnz	r2, 3618 <uart_nrfx_configure+0x4c>
    35f0:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    35f2:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    35f4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    35f8:	d066      	beq.n	36c8 <uart_nrfx_configure+0xfc>
    35fa:	d831      	bhi.n	3660 <uart_nrfx_configure+0x94>
    35fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3600:	d064      	beq.n	36cc <uart_nrfx_configure+0x100>
    3602:	d81a      	bhi.n	363a <uart_nrfx_configure+0x6e>
    3604:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3608:	d062      	beq.n	36d0 <uart_nrfx_configure+0x104>
    360a:	d80e      	bhi.n	362a <uart_nrfx_configure+0x5e>
    360c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3610:	d061      	beq.n	36d6 <uart_nrfx_configure+0x10a>
    3612:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3616:	d061      	beq.n	36dc <uart_nrfx_configure+0x110>
    3618:	f06f 0085 	mvn.w	r0, #133	; 0x85
    361c:	e053      	b.n	36c6 <uart_nrfx_configure+0xfa>
	switch (cfg->stop_bits) {
    361e:	2600      	movs	r6, #0
    3620:	e7db      	b.n	35da <uart_nrfx_configure+0xe>
		uart_cfg.paritytype = NRF_UART_PARITYTYPE_ODD;
    3622:	f44f 7480 	mov.w	r4, #256	; 0x100
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    3626:	220e      	movs	r2, #14
    3628:	e7e3      	b.n	35f2 <uart_nrfx_configure+0x26>
	switch (baudrate) {
    362a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    362e:	d058      	beq.n	36e2 <uart_nrfx_configure+0x116>
    3630:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3634:	d1f0      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3636:	4b35      	ldr	r3, [pc, #212]	; (370c <uart_nrfx_configure+0x140>)
    3638:	e039      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    363a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    363e:	d053      	beq.n	36e8 <uart_nrfx_configure+0x11c>
    3640:	d807      	bhi.n	3652 <uart_nrfx_configure+0x86>
    3642:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3646:	d051      	beq.n	36ec <uart_nrfx_configure+0x120>
    3648:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    364c:	d1e4      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    364e:	4b30      	ldr	r3, [pc, #192]	; (3710 <uart_nrfx_configure+0x144>)
    3650:	e02d      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    3652:	f647 2512 	movw	r5, #31250	; 0x7a12
    3656:	42ab      	cmp	r3, r5
    3658:	d1de      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    365a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    365e:	e026      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    3660:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3664:	d045      	beq.n	36f2 <uart_nrfx_configure+0x126>
    3666:	d811      	bhi.n	368c <uart_nrfx_configure+0xc0>
    3668:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    366c:	d043      	beq.n	36f6 <uart_nrfx_configure+0x12a>
    366e:	d808      	bhi.n	3682 <uart_nrfx_configure+0xb6>
    3670:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3674:	42ab      	cmp	r3, r5
    3676:	d040      	beq.n	36fa <uart_nrfx_configure+0x12e>
    3678:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    367c:	d1cc      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    367e:	4b25      	ldr	r3, [pc, #148]	; (3714 <uart_nrfx_configure+0x148>)
    3680:	e015      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    3682:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3686:	d1c7      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3688:	4b23      	ldr	r3, [pc, #140]	; (3718 <uart_nrfx_configure+0x14c>)
    368a:	e010      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    368c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3690:	d036      	beq.n	3700 <uart_nrfx_configure+0x134>
    3692:	d807      	bhi.n	36a4 <uart_nrfx_configure+0xd8>
    3694:	4d21      	ldr	r5, [pc, #132]	; (371c <uart_nrfx_configure+0x150>)
    3696:	42ab      	cmp	r3, r5
    3698:	d034      	beq.n	3704 <uart_nrfx_configure+0x138>
    369a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    369e:	d1bb      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    36a0:	4b1f      	ldr	r3, [pc, #124]	; (3720 <uart_nrfx_configure+0x154>)
    36a2:	e004      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    36a4:	4d1f      	ldr	r5, [pc, #124]	; (3724 <uart_nrfx_configure+0x158>)
    36a6:	42ab      	cmp	r3, r5
    36a8:	d1b6      	bne.n	3618 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    36aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
    36ae:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    36b0:	481d      	ldr	r0, [pc, #116]	; (3728 <uart_nrfx_configure+0x15c>)
                    | (uint32_t)p_cfg->stop
    36b2:	4332      	orrs	r2, r6
                    | (uint32_t)p_cfg->paritytype
    36b4:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    36b6:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    36ba:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
    36be:	c903      	ldmia	r1, {r0, r1}
    36c0:	e885 0003 	stmia.w	r5, {r0, r1}

	return 0;
    36c4:	2000      	movs	r0, #0
}
    36c6:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    36c8:	4b18      	ldr	r3, [pc, #96]	; (372c <uart_nrfx_configure+0x160>)
    36ca:	e7f0      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    36cc:	4b18      	ldr	r3, [pc, #96]	; (3730 <uart_nrfx_configure+0x164>)
    36ce:	e7ee      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    36d0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    36d4:	e7eb      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
    36d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    36da:	e7e8      	b.n	36ae <uart_nrfx_configure+0xe2>
	switch (baudrate) {
    36dc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    36e0:	e7e5      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    36e2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    36e6:	e7e2      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    36e8:	4b12      	ldr	r3, [pc, #72]	; (3734 <uart_nrfx_configure+0x168>)
    36ea:	e7e0      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    36ec:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    36f0:	e7dd      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    36f2:	4b11      	ldr	r3, [pc, #68]	; (3738 <uart_nrfx_configure+0x16c>)
    36f4:	e7db      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    36f6:	4b11      	ldr	r3, [pc, #68]	; (373c <uart_nrfx_configure+0x170>)
    36f8:	e7d9      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    36fa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    36fe:	e7d6      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3700:	4b0f      	ldr	r3, [pc, #60]	; (3740 <uart_nrfx_configure+0x174>)
    3702:	e7d4      	b.n	36ae <uart_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3704:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3708:	e7d1      	b.n	36ae <uart_nrfx_configure+0xe2>
    370a:	bf00      	nop
    370c:	0013b000 	.word	0x0013b000
    3710:	004ea000 	.word	0x004ea000
    3714:	00ebf000 	.word	0x00ebf000
    3718:	01d7e000 	.word	0x01d7e000
    371c:	0003d090 	.word	0x0003d090
    3720:	075f7000 	.word	0x075f7000
    3724:	000f4240 	.word	0x000f4240
    3728:	40002000 	.word	0x40002000
    372c:	009d5000 	.word	0x009d5000
    3730:	00275000 	.word	0x00275000
    3734:	0075f000 	.word	0x0075f000
    3738:	03afb000 	.word	0x03afb000
    373c:	013a9000 	.word	0x013a9000
    3740:	0ebed000 	.word	0x0ebed000

00003744 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    3744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
    3746:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    3748:	4c12      	ldr	r4, [pc, #72]	; (3794 <uart_nrfx_init+0x50>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    374a:	681e      	ldr	r6, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
    374c:	6907      	ldr	r7, [r0, #16]
    374e:	2100      	movs	r1, #0
{
    3750:	4605      	mov	r5, r0
    3752:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	ret = pinctrl_lookup_state(config, id, &state);
    3756:	aa01      	add	r2, sp, #4
    3758:	4630      	mov	r0, r6
    375a:	f003 ff98 	bl	768e <pinctrl_lookup_state>
	if (ret < 0) {
    375e:	2800      	cmp	r0, #0
    3760:	db15      	blt.n	378e <uart_nrfx_init+0x4a>
	return pinctrl_apply_state_direct(config, state);
    3762:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3764:	6832      	ldr	r2, [r6, #0]
    3766:	7919      	ldrb	r1, [r3, #4]
    3768:	6818      	ldr	r0, [r3, #0]
    376a:	f003 ffad 	bl	76c8 <pinctrl_configure_pins>
	if (err < 0) {
    376e:	2800      	cmp	r0, #0
    3770:	db0d      	blt.n	378e <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
    3772:	4639      	mov	r1, r7
    3774:	4628      	mov	r0, r5
    3776:	f7ff ff29 	bl	35cc <uart_nrfx_configure>
	if (err) {
    377a:	b940      	cbnz	r0, 378e <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    377c:	2304      	movs	r3, #4
    377e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3782:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    3786:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    378a:	2301      	movs	r3, #1
    378c:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    378e:	b003      	add	sp, #12
    3790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3792:	bf00      	nop
    3794:	40002000 	.word	0x40002000

00003798 <uart_nrfx_poll_out>:
{
    3798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    379a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    379c:	f005 fdfa 	bl	9394 <k_is_in_isr>
    37a0:	4d1a      	ldr	r5, [pc, #104]	; (380c <uart_nrfx_poll_out+0x74>)
    37a2:	bb78      	cbnz	r0, 3804 <uart_nrfx_poll_out+0x6c>
    37a4:	2464      	movs	r4, #100	; 0x64
    37a6:	2701      	movs	r7, #1
    37a8:	f3bf 8f5b 	dmb	ish
    37ac:	e855 3f00 	ldrex	r3, [r5]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d103      	bne.n	37bc <uart_nrfx_poll_out+0x24>
    37b4:	e845 7200 	strex	r2, r7, [r5]
    37b8:	2a00      	cmp	r2, #0
    37ba:	d1f7      	bne.n	37ac <uart_nrfx_poll_out+0x14>
    37bc:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    37c0:	d007      	beq.n	37d2 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    37c2:	2021      	movs	r0, #33	; 0x21
    37c4:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    37c6:	3c01      	subs	r4, #1
    37c8:	f002 fd30 	bl	622c <z_impl_k_sleep>
    37cc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    37d0:	d1ea      	bne.n	37a8 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37d2:	4c0f      	ldr	r4, [pc, #60]	; (3810 <uart_nrfx_poll_out+0x78>)
    37d4:	2300      	movs	r3, #0
    37d6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    37da:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37de:	2301      	movs	r3, #1
    37e0:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
    37e2:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
    37e6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37ea:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    37ee:	b923      	cbnz	r3, 37fa <uart_nrfx_poll_out+0x62>
    37f0:	2001      	movs	r0, #1
    37f2:	f005 fc91 	bl	9118 <nrfx_busy_wait>
    37f6:	3e01      	subs	r6, #1
    37f8:	d1f7      	bne.n	37ea <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37fa:	2301      	movs	r3, #1
    37fc:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    37fe:	2300      	movs	r3, #0
    3800:	602b      	str	r3, [r5, #0]
}
    3802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    3804:	2301      	movs	r3, #1
    3806:	602b      	str	r3, [r5, #0]
    3808:	e7e3      	b.n	37d2 <uart_nrfx_poll_out+0x3a>
    380a:	bf00      	nop
    380c:	200038cc 	.word	0x200038cc
    3810:	40002000 	.word	0x40002000

00003814 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3814:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3816:	2301      	movs	r3, #1
    3818:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    381a:	4a11      	ldr	r2, [pc, #68]	; (3860 <compare_int_lock+0x4c>)
    381c:	f3bf 8f5b 	dmb	ish
    3820:	43dc      	mvns	r4, r3
    3822:	e852 1f00 	ldrex	r1, [r2]
    3826:	ea01 0c04 	and.w	ip, r1, r4
    382a:	e842 ce00 	strex	lr, ip, [r2]
    382e:	f1be 0f00 	cmp.w	lr, #0
    3832:	d1f6      	bne.n	3822 <compare_int_lock+0xe>
    3834:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3838:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    383c:	fa02 f000 	lsl.w	r0, r2, r0
    3840:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3844:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3848:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    384c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3850:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3854:	420b      	tst	r3, r1
}
    3856:	bf14      	ite	ne
    3858:	2001      	movne	r0, #1
    385a:	2000      	moveq	r0, #0
    385c:	bd10      	pop	{r4, pc}
    385e:	bf00      	nop
    3860:	200038d4 	.word	0x200038d4

00003864 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3864:	4919      	ldr	r1, [pc, #100]	; (38cc <sys_clock_timeout_handler+0x68>)
{
    3866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3868:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    386a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    386e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3870:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3874:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3878:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    387a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    387e:	d222      	bcs.n	38c6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3880:	4b13      	ldr	r3, [pc, #76]	; (38d0 <sys_clock_timeout_handler+0x6c>)
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	0a1a      	lsrs	r2, r3, #8
    3886:	061b      	lsls	r3, r3, #24
    3888:	195e      	adds	r6, r3, r5
    388a:	4b12      	ldr	r3, [pc, #72]	; (38d4 <sys_clock_timeout_handler+0x70>)
    388c:	f142 0700 	adc.w	r7, r2, #0
    3890:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3894:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3896:	f002 fe2b 	bl	64f0 <sys_clock_announce>
    return p_reg->CC[ch];
    389a:	00a3      	lsls	r3, r4, #2
    389c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    38a0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    38a4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    38a8:	42aa      	cmp	r2, r5
    38aa:	d10b      	bne.n	38c4 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    38ac:	b91e      	cbnz	r6, 38b6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    38ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    38b2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
    38b6:	4b08      	ldr	r3, [pc, #32]	; (38d8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    38bc:	fa00 f404 	lsl.w	r4, r0, r4
    38c0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    38c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    38c6:	2600      	movs	r6, #0
    38c8:	e7e5      	b.n	3896 <sys_clock_timeout_handler+0x32>
    38ca:	bf00      	nop
    38cc:	20000198 	.word	0x20000198
    38d0:	200038d8 	.word	0x200038d8
    38d4:	20000180 	.word	0x20000180
    38d8:	40011000 	.word	0x40011000

000038dc <compare_int_unlock>:
	if (key) {
    38dc:	b319      	cbz	r1, 3926 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38de:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    38e2:	2301      	movs	r3, #1
    38e4:	4a10      	ldr	r2, [pc, #64]	; (3928 <compare_int_unlock+0x4c>)
    38e6:	4083      	lsls	r3, r0
    38e8:	e852 1f00 	ldrex	r1, [r2]
    38ec:	4319      	orrs	r1, r3
    38ee:	e842 1c00 	strex	ip, r1, [r2]
    38f2:	f1bc 0f00 	cmp.w	ip, #0
    38f6:	d1f7      	bne.n	38e8 <compare_int_unlock+0xc>
    38f8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    38fc:	4a0b      	ldr	r2, [pc, #44]	; (392c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3902:	4083      	lsls	r3, r0
    3904:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3908:	4b09      	ldr	r3, [pc, #36]	; (3930 <compare_int_unlock+0x54>)
    390a:	f3bf 8f5b 	dmb	ish
    390e:	681b      	ldr	r3, [r3, #0]
    3910:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3914:	fa23 f000 	lsr.w	r0, r3, r0
    3918:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    391a:	bf42      	ittt	mi
    391c:	4b05      	ldrmi	r3, [pc, #20]	; (3934 <compare_int_unlock+0x58>)
    391e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3922:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3926:	4770      	bx	lr
    3928:	200038d4 	.word	0x200038d4
    392c:	40011000 	.word	0x40011000
    3930:	200038d0 	.word	0x200038d0
    3934:	e000e100 	.word	0xe000e100

00003938 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3938:	4b0d      	ldr	r3, [pc, #52]	; (3970 <z_nrf_rtc_timer_read+0x38>)
    393a:	6818      	ldr	r0, [r3, #0]
    393c:	0a01      	lsrs	r1, r0, #8
    393e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3940:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3944:	4b0b      	ldr	r3, [pc, #44]	; (3974 <z_nrf_rtc_timer_read+0x3c>)
    3946:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    394a:	1818      	adds	r0, r3, r0
    394c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3954:	d20a      	bcs.n	396c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3956:	4b08      	ldr	r3, [pc, #32]	; (3978 <z_nrf_rtc_timer_read+0x40>)
    3958:	e9d3 2300 	ldrd	r2, r3, [r3]
    395c:	4290      	cmp	r0, r2
    395e:	eb71 0303 	sbcs.w	r3, r1, r3
    3962:	d203      	bcs.n	396c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3964:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3968:	f141 0100 	adc.w	r1, r1, #0
}
    396c:	4770      	bx	lr
    396e:	bf00      	nop
    3970:	200038d8 	.word	0x200038d8
    3974:	40011000 	.word	0x40011000
    3978:	20000180 	.word	0x20000180

0000397c <compare_set>:
{
    397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3980:	b085      	sub	sp, #20
    3982:	4616      	mov	r6, r2
    3984:	4698      	mov	r8, r3
    3986:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3988:	f7ff ff44 	bl	3814 <compare_int_lock>
    398c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    398e:	f7ff ffd3 	bl	3938 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3992:	42b0      	cmp	r0, r6
    3994:	eb71 0308 	sbcs.w	r3, r1, r8
    3998:	d278      	bcs.n	3a8c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    399a:	4b46      	ldr	r3, [pc, #280]	; (3ab4 <compare_set+0x138>)
    399c:	1a30      	subs	r0, r6, r0
    399e:	eb68 0101 	sbc.w	r1, r8, r1
    39a2:	4298      	cmp	r0, r3
    39a4:	f171 0300 	sbcs.w	r3, r1, #0
    39a8:	f080 8081 	bcs.w	3aae <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    39ac:	4b42      	ldr	r3, [pc, #264]	; (3ab8 <compare_set+0x13c>)
    39ae:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    39b2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    39b6:	45d8      	cmp	r8, fp
    39b8:	bf08      	it	eq
    39ba:	4556      	cmpeq	r6, sl
    39bc:	d051      	beq.n	3a62 <compare_set+0xe6>
    39be:	ea4f 0985 	mov.w	r9, r5, lsl #2
    39c2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    39c6:	f105 0750 	add.w	r7, r5, #80	; 0x50
    39ca:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    39ce:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    39d4:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39d8:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    39da:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    39de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39e2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    39e4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    39e8:	4b34      	ldr	r3, [pc, #208]	; (3abc <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39ea:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    39ee:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    39f0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    39f4:	1a40      	subs	r0, r0, r1
    39f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    39fa:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    39fe:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3a00:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3a04:	d107      	bne.n	3a16 <compare_set+0x9a>
    3a06:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3a0a:	2013      	movs	r0, #19
    3a0c:	f005 fe44 	bl	9698 <z_impl_k_busy_wait>
    3a10:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3a14:	4b29      	ldr	r3, [pc, #164]	; (3abc <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3a16:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3a1a:	eba4 000c 	sub.w	r0, r4, ip
    3a1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3a22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a26:	bf88      	it	hi
    3a28:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a2a:	2000      	movs	r0, #0
    3a2c:	6038      	str	r0, [r7, #0]
    3a2e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3a30:	9801      	ldr	r0, [sp, #4]
    3a32:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3a36:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3a3a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3a3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3a42:	4281      	cmp	r1, r0
    3a44:	d006      	beq.n	3a54 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3a46:	1a20      	subs	r0, r4, r0
    3a48:	3802      	subs	r0, #2
    3a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3a4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a52:	d819      	bhi.n	3a88 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3a54:	1aa4      	subs	r4, r4, r2
    3a56:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3a5a:	eb14 0a06 	adds.w	sl, r4, r6
    3a5e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3a62:	4915      	ldr	r1, [pc, #84]	; (3ab8 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3a64:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3a66:	012b      	lsls	r3, r5, #4
    3a68:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3a6c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3a70:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3a74:	6053      	str	r3, [r2, #4]
	return ret;
    3a76:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3a78:	4628      	mov	r0, r5
    3a7a:	9900      	ldr	r1, [sp, #0]
    3a7c:	f7ff ff2e 	bl	38dc <compare_int_unlock>
}
    3a80:	4620      	mov	r0, r4
    3a82:	b005      	add	sp, #20
    3a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a88:	4620      	mov	r0, r4
    3a8a:	e7b1      	b.n	39f0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3a8c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a8e:	4a0c      	ldr	r2, [pc, #48]	; (3ac0 <compare_set+0x144>)
    3a90:	f3bf 8f5b 	dmb	ish
    3a94:	40ab      	lsls	r3, r5
    3a96:	e852 1f00 	ldrex	r1, [r2]
    3a9a:	4319      	orrs	r1, r3
    3a9c:	e842 1000 	strex	r0, r1, [r2]
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d1f8      	bne.n	3a96 <compare_set+0x11a>
    3aa4:	f3bf 8f5b 	dmb	ish
    3aa8:	46b2      	mov	sl, r6
    3aaa:	46c3      	mov	fp, r8
    3aac:	e7d9      	b.n	3a62 <compare_set+0xe6>
			return -EINVAL;
    3aae:	f06f 0415 	mvn.w	r4, #21
    3ab2:	e7e1      	b.n	3a78 <compare_set+0xfc>
    3ab4:	01000001 	.word	0x01000001
    3ab8:	20000188 	.word	0x20000188
    3abc:	40011000 	.word	0x40011000
    3ac0:	200038d0 	.word	0x200038d0

00003ac4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ac6:	4b19      	ldr	r3, [pc, #100]	; (3b2c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3ac8:	4d19      	ldr	r5, [pc, #100]	; (3b30 <sys_clock_driver_init+0x6c>)
    3aca:	2400      	movs	r4, #0
    3acc:	f04f 30ff 	mov.w	r0, #4294967295
    3ad0:	f04f 31ff 	mov.w	r1, #4294967295
    3ad4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3ad8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ae0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ae4:	4b13      	ldr	r3, [pc, #76]	; (3b34 <sys_clock_driver_init+0x70>)
    3ae6:	2602      	movs	r6, #2
    3ae8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3aec:	2101      	movs	r1, #1
    3aee:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3af2:	2011      	movs	r0, #17
    3af4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3af8:	4622      	mov	r2, r4
    3afa:	f7fe f82f 	bl	1b5c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3afe:	2011      	movs	r0, #17
    3b00:	f7fd fffa 	bl	1af8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3b04:	4a0c      	ldr	r2, [pc, #48]	; (3b38 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3b06:	2301      	movs	r3, #1
    3b08:	60ab      	str	r3, [r5, #8]
    3b0a:	602b      	str	r3, [r5, #0]
    3b0c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3b0e:	4b0b      	ldr	r3, [pc, #44]	; (3b3c <sys_clock_driver_init+0x78>)
    3b10:	4a0b      	ldr	r2, [pc, #44]	; (3b40 <sys_clock_driver_init+0x7c>)
    3b12:	9300      	str	r3, [sp, #0]
    3b14:	9401      	str	r4, [sp, #4]
    3b16:	2300      	movs	r3, #0
    3b18:	4620      	mov	r0, r4
    3b1a:	f7ff ff2f 	bl	397c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3b1e:	4630      	mov	r0, r6
    3b20:	f7fe fd4c 	bl	25bc <z_nrf_clock_control_lf_on>

	return 0;
}
    3b24:	4620      	mov	r0, r4
    3b26:	b002      	add	sp, #8
    3b28:	bd70      	pop	{r4, r5, r6, pc}
    3b2a:	bf00      	nop
    3b2c:	20000188 	.word	0x20000188
    3b30:	40011000 	.word	0x40011000
    3b34:	e000e100 	.word	0xe000e100
    3b38:	200038d4 	.word	0x200038d4
    3b3c:	00003865 	.word	0x00003865
    3b40:	007fffff 	.word	0x007fffff

00003b44 <rtc_nrf_isr>:
{
    3b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3b48:	4c35      	ldr	r4, [pc, #212]	; (3c20 <rtc_nrf_isr+0xdc>)
    3b4a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3b4e:	079a      	lsls	r2, r3, #30
    3b50:	d50b      	bpl.n	3b6a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b52:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3b56:	b143      	cbz	r3, 3b6a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3b58:	4a32      	ldr	r2, [pc, #200]	; (3c24 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b5a:	2300      	movs	r3, #0
    3b5c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3b60:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3b64:	6813      	ldr	r3, [r2, #0]
    3b66:	3301      	adds	r3, #1
    3b68:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3b6a:	f04f 0320 	mov.w	r3, #32
    3b6e:	f3ef 8211 	mrs	r2, BASEPRI
    3b72:	f383 8812 	msr	BASEPRI_MAX, r3
    3b76:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3b7a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3b7e:	03db      	lsls	r3, r3, #15
    3b80:	d512      	bpl.n	3ba8 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b82:	f3bf 8f5b 	dmb	ish
    3b86:	4b28      	ldr	r3, [pc, #160]	; (3c28 <rtc_nrf_isr+0xe4>)
    3b88:	e853 1f00 	ldrex	r1, [r3]
    3b8c:	f021 0001 	bic.w	r0, r1, #1
    3b90:	e843 0600 	strex	r6, r0, [r3]
    3b94:	2e00      	cmp	r6, #0
    3b96:	d1f7      	bne.n	3b88 <rtc_nrf_isr+0x44>
    3b98:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3b9c:	2900      	cmp	r1, #0
    3b9e:	d136      	bne.n	3c0e <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ba0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d132      	bne.n	3c0e <rtc_nrf_isr+0xca>
{
    3ba8:	2300      	movs	r3, #0
	__asm__ volatile(
    3baa:	f382 8811 	msr	BASEPRI, r2
    3bae:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3bb2:	b34b      	cbz	r3, 3c08 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3bb4:	f7ff fec0 	bl	3938 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3bb8:	f04f 0320 	mov.w	r3, #32
    3bbc:	f3ef 8c11 	mrs	ip, BASEPRI
    3bc0:	f383 8812 	msr	BASEPRI_MAX, r3
    3bc4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3bc8:	4b18      	ldr	r3, [pc, #96]	; (3c2c <rtc_nrf_isr+0xe8>)
    3bca:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3bce:	42b0      	cmp	r0, r6
    3bd0:	eb71 0207 	sbcs.w	r2, r1, r7
    3bd4:	f04f 0200 	mov.w	r2, #0
    3bd8:	d320      	bcc.n	3c1c <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3bda:	f04f 38ff 	mov.w	r8, #4294967295
    3bde:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    3be2:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3be6:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3bea:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    3bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3bf0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3bf4:	f38c 8811 	msr	BASEPRI, ip
    3bf8:	f3bf 8f6f 	isb	sy
		if (handler) {
    3bfc:	b121      	cbz	r1, 3c08 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3bfe:	9500      	str	r5, [sp, #0]
    3c00:	4632      	mov	r2, r6
    3c02:	463b      	mov	r3, r7
    3c04:	2000      	movs	r0, #0
    3c06:	4788      	blx	r1
}
    3c08:	b003      	add	sp, #12
    3c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c0e:	2300      	movs	r3, #0
    3c10:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3c14:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3c18:	2301      	movs	r3, #1
}
    3c1a:	e7c6      	b.n	3baa <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3c1c:	4611      	mov	r1, r2
    3c1e:	e7e9      	b.n	3bf4 <rtc_nrf_isr+0xb0>
    3c20:	40011000 	.word	0x40011000
    3c24:	200038d8 	.word	0x200038d8
    3c28:	200038d0 	.word	0x200038d0
    3c2c:	20000188 	.word	0x20000188

00003c30 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c30:	1c43      	adds	r3, r0, #1
{
    3c32:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c34:	d021      	beq.n	3c7a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c36:	2801      	cmp	r0, #1
    3c38:	dd21      	ble.n	3c7e <sys_clock_set_timeout+0x4e>
    3c3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c3e:	da20      	bge.n	3c82 <sys_clock_set_timeout+0x52>
    3c40:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c42:	f7ff fe79 	bl	3938 <z_nrf_rtc_timer_read>
    3c46:	4b10      	ldr	r3, [pc, #64]	; (3c88 <sys_clock_set_timeout+0x58>)
    3c48:	e9d3 1300 	ldrd	r1, r3, [r3]
    3c4c:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3c4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c52:	bf28      	it	cs
    3c54:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3c56:	3001      	adds	r0, #1
    3c58:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3c5a:	480c      	ldr	r0, [pc, #48]	; (3c8c <sys_clock_set_timeout+0x5c>)
    3c5c:	4282      	cmp	r2, r0
    3c5e:	bf28      	it	cs
    3c60:	4602      	movcs	r2, r0
    3c62:	1852      	adds	r2, r2, r1
    3c64:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c68:	4909      	ldr	r1, [pc, #36]	; (3c90 <sys_clock_set_timeout+0x60>)
    3c6a:	9001      	str	r0, [sp, #4]
    3c6c:	9100      	str	r1, [sp, #0]
    3c6e:	f143 0300 	adc.w	r3, r3, #0
    3c72:	f7ff fe83 	bl	397c <compare_set>
}
    3c76:	b002      	add	sp, #8
    3c78:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c7a:	4804      	ldr	r0, [pc, #16]	; (3c8c <sys_clock_set_timeout+0x5c>)
    3c7c:	e7e0      	b.n	3c40 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c7e:	2400      	movs	r4, #0
    3c80:	e7df      	b.n	3c42 <sys_clock_set_timeout+0x12>
    3c82:	4c02      	ldr	r4, [pc, #8]	; (3c8c <sys_clock_set_timeout+0x5c>)
    3c84:	e7dd      	b.n	3c42 <sys_clock_set_timeout+0x12>
    3c86:	bf00      	nop
    3c88:	20000198 	.word	0x20000198
    3c8c:	007fffff 	.word	0x007fffff
    3c90:	00003865 	.word	0x00003865

00003c94 <sys_clock_elapsed>:
{
    3c94:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3c96:	f7ff fe4f 	bl	3938 <z_nrf_rtc_timer_read>
    3c9a:	4b02      	ldr	r3, [pc, #8]	; (3ca4 <sys_clock_elapsed+0x10>)
    3c9c:	681b      	ldr	r3, [r3, #0]
}
    3c9e:	1ac0      	subs	r0, r0, r3
    3ca0:	bd08      	pop	{r3, pc}
    3ca2:	bf00      	nop
    3ca4:	20000198 	.word	0x20000198

00003ca8 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3ca8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3cac:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3cae:	2801      	cmp	r0, #1
    3cb0:	4b04      	ldr	r3, [pc, #16]	; (3cc4 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3cb2:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3cb6:	bf18      	it	ne
    3cb8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3cbc:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3cbe:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    3cc2:	4770      	bx	lr
    3cc4:	50000300 	.word	0x50000300

00003cc8 <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3cc8:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3ccc:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    3cce:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3cd0:	bf07      	ittee	eq
    3cd2:	4614      	moveq	r4, r2
    3cd4:	460d      	moveq	r5, r1
    3cd6:	2401      	movne	r4, #1
    3cd8:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3cda:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3cde:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    3ce2:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3ce6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3cea:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    3cee:	4b06      	ldr	r3, [pc, #24]	; (3d08 <nrf_pin_configure.constprop.0+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3cf0:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    3cf4:	bf08      	it	eq
    3cf6:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3cfa:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3cfe:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3d02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    3d06:	bd30      	pop	{r4, r5, pc}
    3d08:	50000300 	.word	0x50000300

00003d0c <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3d0c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3d10:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3d12:	2801      	cmp	r0, #1
    3d14:	4b04      	ldr	r3, [pc, #16]	; (3d28 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d16:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3d1a:	bf18      	it	ne
    3d1c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d20:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3d22:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    3d26:	4770      	bx	lr
    3d28:	50000300 	.word	0x50000300

00003d2c <find_free_region>:
/* Find the first unused ACL region. */
static int find_free_region(uint32_t *region_idx)
{
	static uint32_t idx;

	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    3d2c:	4a0c      	ldr	r2, [pc, #48]	; (3d60 <find_free_region+0x34>)
{
    3d2e:	b530      	push	{r4, r5, lr}
    3d30:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    3d32:	4d0c      	ldr	r5, [pc, #48]	; (3d64 <find_free_region+0x38>)
	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    3d34:	2400      	movs	r4, #0
    3d36:	eb05 1103 	add.w	r1, r5, r3, lsl #4
    3d3a:	f8d1 1808 	ldr.w	r1, [r1, #2056]	; 0x808
    3d3e:	b2c9      	uxtb	r1, r1
    3d40:	b921      	cbnz	r1, 3d4c <find_free_region+0x20>
    3d42:	b104      	cbz	r4, 3d46 <find_free_region+0x1a>
    3d44:	6013      	str	r3, [r2, #0]
		if (idx >= ACL_REGIONS_COUNT) {
			*region_idx = idx;
			return -ENOSPC;
		}
	}
	*region_idx = idx;
    3d46:	6003      	str	r3, [r0, #0]
	return 0;
    3d48:	2000      	movs	r0, #0
    3d4a:	e008      	b.n	3d5e <find_free_region+0x32>
		idx++;
    3d4c:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
    3d4e:	2b07      	cmp	r3, #7
    3d50:	f04f 0401 	mov.w	r4, #1
    3d54:	d9ef      	bls.n	3d36 <find_free_region+0xa>
			*region_idx = idx;
    3d56:	6003      	str	r3, [r0, #0]
    3d58:	6013      	str	r3, [r2, #0]
			return -ENOSPC;
    3d5a:	f06f 001b 	mvn.w	r0, #27
}
    3d5e:	bd30      	pop	{r4, r5, pc}
    3d60:	200038dc 	.word	0x200038dc
    3d64:	4001e000 	.word	0x4001e000

00003d68 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3d68:	4803      	ldr	r0, [pc, #12]	; (3d78 <k_sys_fatal_error_handler+0x10>)
{
    3d6a:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3d6c:	2145      	movs	r1, #69	; 0x45
    3d6e:	f003 f896 	bl	6e9e <z_log_minimal_printk>
		sys_arch_reboot(0);
    3d72:	2000      	movs	r0, #0
    3d74:	f7fe fafa 	bl	236c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3d78:	0000ac0e 	.word	0x0000ac0e

00003d7c <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3d7c:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3d7e:	6881      	ldr	r1, [r0, #8]
{
    3d80:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3d82:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    3d84:	f021 0407 	bic.w	r4, r1, #7
{
    3d88:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    3d8a:	f003 f8ee 	bl	6f6a <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    3d8e:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    3d90:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    3d92:	4668      	mov	r0, sp
    3d94:	f003 f958 	bl	7048 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    3d98:	4907      	ldr	r1, [pc, #28]	; (3db8 <boot_write_magic+0x3c>)
    3d9a:	2210      	movs	r2, #16
    3d9c:	4668      	mov	r0, sp
    3d9e:	f003 f948 	bl	7032 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    3da2:	2310      	movs	r3, #16
    3da4:	466a      	mov	r2, sp
    3da6:	4621      	mov	r1, r4
    3da8:	4628      	mov	r0, r5
    3daa:	f003 f8a2 	bl	6ef2 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3dae:	3800      	subs	r0, #0
    3db0:	bf18      	it	ne
    3db2:	2001      	movne	r0, #1
    3db4:	b005      	add	sp, #20
    3db6:	bd30      	pop	{r4, r5, pc}
    3db8:	00009dfc 	.word	0x00009dfc

00003dbc <boot_read_swap_state>:
{
    3dbc:	b530      	push	{r4, r5, lr}
    3dbe:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3dc0:	6881      	ldr	r1, [r0, #8]
{
    3dc2:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3dc4:	2310      	movs	r3, #16
    3dc6:	aa02      	add	r2, sp, #8
    3dc8:	3910      	subs	r1, #16
{
    3dca:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3dcc:	f003 f875 	bl	6eba <flash_area_read>
    if (rc < 0) {
    3dd0:	2800      	cmp	r0, #0
    3dd2:	da02      	bge.n	3dda <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3dd4:	2001      	movs	r0, #1
}
    3dd6:	b007      	add	sp, #28
    3dd8:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    3dda:	2210      	movs	r2, #16
    3ddc:	a902      	add	r1, sp, #8
    3dde:	4628      	mov	r0, r5
    3de0:	f003 fd2e 	bl	7840 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3de4:	b390      	cbz	r0, 3e4c <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
    3de6:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    3de8:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    3dea:	4628      	mov	r0, r5
    3dec:	f003 fd39 	bl	7862 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3df0:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    3df2:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3df4:	f10d 0207 	add.w	r2, sp, #7
    3df8:	4628      	mov	r0, r5
    3dfa:	f003 f85e 	bl	6eba <flash_area_read>
    if (rc < 0) {
    3dfe:	2800      	cmp	r0, #0
    3e00:	dbe8      	blt.n	3dd4 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e06:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3e0a:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3e0c:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3e0e:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    3e10:	2201      	movs	r2, #1
    3e12:	f10d 0107 	add.w	r1, sp, #7
    3e16:	4628      	mov	r0, r5
    3e18:	f003 fd12 	bl	7840 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3e1c:	b910      	cbnz	r0, 3e24 <boot_read_swap_state+0x68>
    3e1e:	7863      	ldrb	r3, [r4, #1]
    3e20:	2b04      	cmp	r3, #4
    3e22:	d903      	bls.n	3e2c <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3e24:	2301      	movs	r3, #1
    3e26:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    3e28:	2300      	movs	r3, #0
    3e2a:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    3e2c:	68aa      	ldr	r2, [r5, #8]
    3e2e:	3a18      	subs	r2, #24
    3e30:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3e34:	3a08      	subs	r2, #8
    3e36:	1ca1      	adds	r1, r4, #2
    3e38:	4628      	mov	r0, r5
    3e3a:	f003 fd2c 	bl	7896 <boot_read_flag>
    if (rc) {
    3e3e:	2800      	cmp	r0, #0
    3e40:	d1c8      	bne.n	3dd4 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    3e42:	1ce1      	adds	r1, r4, #3
    3e44:	4628      	mov	r0, r5
    3e46:	f003 fd80 	bl	794a <boot_read_image_ok>
    3e4a:	e7c4      	b.n	3dd6 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    3e4c:	4904      	ldr	r1, [pc, #16]	; (3e60 <boot_read_swap_state+0xa4>)
    3e4e:	2210      	movs	r2, #16
    3e50:	a802      	add	r0, sp, #8
    3e52:	f003 f8dd 	bl	7010 <memcmp>
        return BOOT_MAGIC_GOOD;
    3e56:	2800      	cmp	r0, #0
    3e58:	bf14      	ite	ne
    3e5a:	2302      	movne	r3, #2
    3e5c:	2301      	moveq	r3, #1
    3e5e:	e7c3      	b.n	3de8 <boot_read_swap_state+0x2c>
    3e60:	00009dfc 	.word	0x00009dfc

00003e64 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e68:	b085      	sub	sp, #20
    3e6a:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3e6c:	4669      	mov	r1, sp
    3e6e:	2003      	movs	r0, #3
    3e70:	f003 fd71 	bl	7956 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3e74:	4605      	mov	r5, r0
    3e76:	b118      	cbz	r0, 3e80 <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    3e78:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    3e7a:	b005      	add	sp, #20
    3e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3e80:	a902      	add	r1, sp, #8
    3e82:	2001      	movs	r0, #1
    3e84:	f003 fd67 	bl	7956 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    3e88:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3e8a:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    3e8c:	d13f      	bne.n	3f0e <boot_swap_type_multi+0xaa>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    3e8e:	482d      	ldr	r0, [pc, #180]	; (3f44 <boot_swap_type_multi+0xe0>)
    3e90:	4632      	mov	r2, r6
    3e92:	2149      	movs	r1, #73	; 0x49
    3e94:	f003 f803 	bl	6e9e <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    3e98:	2303      	movs	r3, #3
    3e9a:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    3e9e:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    3ea2:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    3ea6:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    3eaa:	f88d 500c 	strb.w	r5, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3eae:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3eb2:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3eb6:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3eba:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    3ebe:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3ec2:	4c21      	ldr	r4, [pc, #132]	; (3f48 <boot_swap_type_multi+0xe4>)
    3ec4:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3ec6:	7820      	ldrb	r0, [r4, #0]
    3ec8:	4629      	mov	r1, r5
    3eca:	f003 fcd0 	bl	786e <boot_magic_compatible_check>
    3ece:	b318      	cbz	r0, 3f18 <boot_swap_type_multi+0xb4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    3ed0:	7860      	ldrb	r0, [r4, #1]
    3ed2:	4631      	mov	r1, r6
    3ed4:	f003 fccb 	bl	786e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3ed8:	b1f0      	cbz	r0, 3f18 <boot_swap_type_multi+0xb4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3eda:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    3edc:	2b04      	cmp	r3, #4
    3ede:	d001      	beq.n	3ee4 <boot_swap_type_multi+0x80>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3ee0:	42bb      	cmp	r3, r7
    3ee2:	d119      	bne.n	3f18 <boot_swap_type_multi+0xb4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3ee4:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3ee6:	2b04      	cmp	r3, #4
    3ee8:	d001      	beq.n	3eee <boot_swap_type_multi+0x8a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3eea:	4543      	cmp	r3, r8
    3eec:	d114      	bne.n	3f18 <boot_swap_type_multi+0xb4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3eee:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3ef0:	2b04      	cmp	r3, #4
    3ef2:	d10f      	bne.n	3f14 <boot_swap_type_multi+0xb0>
            BOOT_LOG_INF("Swap type: %s",
    3ef4:	7963      	ldrb	r3, [r4, #5]
    3ef6:	2b02      	cmp	r3, #2
    3ef8:	d119      	bne.n	3f2e <boot_swap_type_multi+0xca>
    3efa:	4a14      	ldr	r2, [pc, #80]	; (3f4c <boot_swap_type_multi+0xe8>)
    3efc:	4814      	ldr	r0, [pc, #80]	; (3f50 <boot_swap_type_multi+0xec>)
    3efe:	2149      	movs	r1, #73	; 0x49
    3f00:	f002 ffcd 	bl	6e9e <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3f04:	7960      	ldrb	r0, [r4, #5]
    3f06:	1e83      	subs	r3, r0, #2
    3f08:	2b02      	cmp	r3, #2
    3f0a:	d9b6      	bls.n	3e7a <boot_swap_type_multi+0x16>
    3f0c:	e7b4      	b.n	3e78 <boot_swap_type_multi+0x14>
    } else if (rc) {
    3f0e:	2800      	cmp	r0, #0
    3f10:	d0cd      	beq.n	3eae <boot_swap_type_multi+0x4a>
    3f12:	e7b1      	b.n	3e78 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3f14:	454b      	cmp	r3, r9
    3f16:	d0ed      	beq.n	3ef4 <boot_swap_type_multi+0x90>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3f18:	3201      	adds	r2, #1
    3f1a:	2a03      	cmp	r2, #3
    3f1c:	f104 0406 	add.w	r4, r4, #6
    3f20:	d1d1      	bne.n	3ec6 <boot_swap_type_multi+0x62>
    BOOT_LOG_INF("Swap type: none");
    3f22:	480c      	ldr	r0, [pc, #48]	; (3f54 <boot_swap_type_multi+0xf0>)
    3f24:	2149      	movs	r1, #73	; 0x49
    3f26:	f002 ffba 	bl	6e9e <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    3f2a:	2001      	movs	r0, #1
    3f2c:	e7a5      	b.n	3e7a <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    3f2e:	2b03      	cmp	r3, #3
    3f30:	d005      	beq.n	3f3e <boot_swap_type_multi+0xda>
    3f32:	4a09      	ldr	r2, [pc, #36]	; (3f58 <boot_swap_type_multi+0xf4>)
    3f34:	4909      	ldr	r1, [pc, #36]	; (3f5c <boot_swap_type_multi+0xf8>)
    3f36:	2b04      	cmp	r3, #4
    3f38:	bf18      	it	ne
    3f3a:	460a      	movne	r2, r1
    3f3c:	e7de      	b.n	3efc <boot_swap_type_multi+0x98>
    3f3e:	4a08      	ldr	r2, [pc, #32]	; (3f60 <boot_swap_type_multi+0xfc>)
    3f40:	e7dc      	b.n	3efc <boot_swap_type_multi+0x98>
    3f42:	bf00      	nop
    3f44:	0000ac41 	.word	0x0000ac41
    3f48:	0000acb4 	.word	0x0000acb4
    3f4c:	0000ac37 	.word	0x0000ac37
    3f50:	0000ac8c 	.word	0x0000ac8c
    3f54:	0000ac9f 	.word	0x0000ac9f
    3f58:	0000ac30 	.word	0x0000ac30
    3f5c:	0000a17a 	.word	0x0000a17a
    3f60:	0000ac3c 	.word	0x0000ac3c

00003f64 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3f64:	6801      	ldr	r1, [r0, #0]
    3f66:	4a0e      	ldr	r2, [pc, #56]	; (3fa0 <verify_header+0x3c>)
    3f68:	4291      	cmp	r1, r2
{
    3f6a:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    3f6c:	d115      	bne.n	3f9a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3f6e:	69c1      	ldr	r1, [r0, #28]
    3f70:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    3f74:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    3f78:	4291      	cmp	r1, r2
    3f7a:	d10e      	bne.n	3f9a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3f7c:	6882      	ldr	r2, [r0, #8]
    3f7e:	2a01      	cmp	r2, #1
    3f80:	d80b      	bhi.n	3f9a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3f82:	68c2      	ldr	r2, [r0, #12]
    3f84:	b112      	cbz	r2, 3f8c <verify_header+0x28>
    3f86:	6901      	ldr	r1, [r0, #16]
    3f88:	428a      	cmp	r2, r1
    3f8a:	d006      	beq.n	3f9a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3f8c:	6958      	ldr	r0, [r3, #20]
    3f8e:	b128      	cbz	r0, 3f9c <verify_header+0x38>
    3f90:	699b      	ldr	r3, [r3, #24]
    3f92:	1a1b      	subs	r3, r3, r0
    3f94:	4258      	negs	r0, r3
    3f96:	4158      	adcs	r0, r3
    3f98:	4770      	bx	lr
        return( 1 );
    3f9a:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop
    3fa0:	ff00aa55 	.word	0xff00aa55

00003fa4 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    3fa4:	4b0d      	ldr	r3, [pc, #52]	; (3fdc <verify_chain+0x38>)
{
    3fa6:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3fa8:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3faa:	b1a6      	cbz	r6, 3fd6 <verify_chain+0x32>
    3fac:	4630      	mov	r0, r6
    3fae:	f7ff ffd9 	bl	3f64 <verify_header>
    3fb2:	4604      	mov	r4, r0
    3fb4:	b978      	cbnz	r0, 3fd6 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3fb6:	68f3      	ldr	r3, [r6, #12]
    3fb8:	b96b      	cbnz	r3, 3fd6 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    3fba:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    3fbc:	b90d      	cbnz	r5, 3fc2 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3fbe:	4620      	mov	r0, r4
    3fc0:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    3fc2:	4628      	mov	r0, r5
    3fc4:	f7ff ffce 	bl	3f64 <verify_header>
    3fc8:	b928      	cbnz	r0, 3fd6 <verify_chain+0x32>
        if( cur->prev != prv )
    3fca:	68eb      	ldr	r3, [r5, #12]
    3fcc:	42b3      	cmp	r3, r6
    3fce:	d102      	bne.n	3fd6 <verify_chain+0x32>
        cur = cur->next;
    3fd0:	462e      	mov	r6, r5
    3fd2:	692d      	ldr	r5, [r5, #16]
    3fd4:	e7f2      	b.n	3fbc <verify_chain+0x18>
        return( 1 );
    3fd6:	2401      	movs	r4, #1
    3fd8:	e7f1      	b.n	3fbe <verify_chain+0x1a>
    3fda:	bf00      	nop
    3fdc:	200038e0 	.word	0x200038e0

00003fe0 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    3fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    3fe4:	4f40      	ldr	r7, [pc, #256]	; (40e8 <buffer_alloc_calloc+0x108>)
    3fe6:	683c      	ldr	r4, [r7, #0]
    3fe8:	b1d4      	cbz	r4, 4020 <buffer_alloc_calloc+0x40>
    3fea:	68bc      	ldr	r4, [r7, #8]
    3fec:	b1c4      	cbz	r4, 4020 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    3fee:	2800      	cmp	r0, #0
    3ff0:	d04d      	beq.n	408e <buffer_alloc_calloc+0xae>
    3ff2:	2900      	cmp	r1, #0
    3ff4:	d04b      	beq.n	408e <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    3ff6:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3ffa:	fbb5 f0f0 	udiv	r0, r5, r0
    3ffe:	4288      	cmp	r0, r1
    4000:	d145      	bne.n	408e <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4002:	1d28      	adds	r0, r5, #4
    4004:	d843      	bhi.n	408e <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4006:	07a9      	lsls	r1, r5, #30
    4008:	d00d      	beq.n	4026 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    400a:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    400e:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    4010:	68fc      	ldr	r4, [r7, #12]
    4012:	e003      	b.n	401c <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    4014:	6863      	ldr	r3, [r4, #4]
    4016:	42b3      	cmp	r3, r6
    4018:	d23b      	bcs.n	4092 <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    401a:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    401c:	2c00      	cmp	r4, #0
    401e:	d1f9      	bne.n	4014 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    4020:	4620      	mov	r0, r4
    4022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4026:	462e      	mov	r6, r5
    4028:	e7f2      	b.n	4010 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    402a:	60f8      	str	r0, [r7, #12]
    402c:	e044      	b.n	40b8 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    402e:	f106 0c20 	add.w	ip, r6, #32
    4032:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    4036:	3920      	subs	r1, #32
    4038:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    403a:	2100      	movs	r1, #0
    new->prev = cur;
    403c:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->magic1 = MAGIC1;
    4040:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 40ec <buffer_alloc_calloc+0x10c>
    new->next = cur->next;
    4044:	6921      	ldr	r1, [r4, #16]
    4046:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    4048:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    404c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 40f0 <buffer_alloc_calloc+0x110>
    4050:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    4054:	b101      	cbz	r1, 4058 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    4056:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    4058:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    405c:	b1aa      	cbz	r2, 408a <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    405e:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    4060:	699a      	ldr	r2, [r3, #24]
    4062:	b102      	cbz	r2, 4066 <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    4064:	6153      	str	r3, [r2, #20]
    cur->next = new;
    4066:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    4068:	2300      	movs	r3, #0
    cur->next_free = NULL;
    406a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    406e:	693b      	ldr	r3, [r7, #16]
    cur->alloc = 1;
    4070:	f04f 0901 	mov.w	r9, #1
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4074:	07db      	lsls	r3, r3, #31
    cur->size = len;
    4076:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    407a:	d52d      	bpl.n	40d8 <buffer_alloc_calloc+0xf8>
    407c:	f7ff ff92 	bl	3fa4 <verify_chain>
    4080:	b350      	cbz	r0, 40d8 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    4082:	4b1c      	ldr	r3, [pc, #112]	; (40f4 <buffer_alloc_calloc+0x114>)
    4084:	4648      	mov	r0, r9
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	e025      	b.n	40d6 <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    408a:	60fb      	str	r3, [r7, #12]
    408c:	e7e8      	b.n	4060 <buffer_alloc_calloc+0x80>
        return( NULL );
    408e:	2400      	movs	r4, #0
    4090:	e7c6      	b.n	4020 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    4092:	68a3      	ldr	r3, [r4, #8]
    4094:	b11b      	cbz	r3, 409e <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    4096:	4b17      	ldr	r3, [pc, #92]	; (40f4 <buffer_alloc_calloc+0x114>)
    4098:	2001      	movs	r0, #1
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    409e:	6861      	ldr	r1, [r4, #4]
    40a0:	1b89      	subs	r1, r1, r6
    40a2:	2923      	cmp	r1, #35	; 0x23
            cur->prev_free->next_free = cur->next_free;
    40a4:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    40a8:	f104 0820 	add.w	r8, r4, #32
    if( cur->size - len < sizeof(memory_header) +
    40ac:	d8bf      	bhi.n	402e <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    40ae:	2301      	movs	r3, #1
    40b0:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    40b2:	2a00      	cmp	r2, #0
    40b4:	d0b9      	beq.n	402a <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    40b6:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    40b8:	69a3      	ldr	r3, [r4, #24]
    40ba:	b103      	cbz	r3, 40be <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    40bc:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    40be:	2300      	movs	r3, #0
        cur->next_free = NULL;
    40c0:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    40c4:	693b      	ldr	r3, [r7, #16]
    40c6:	07da      	lsls	r2, r3, #31
    40c8:	d506      	bpl.n	40d8 <buffer_alloc_calloc+0xf8>
    40ca:	f7ff ff6b 	bl	3fa4 <verify_chain>
    40ce:	b118      	cbz	r0, 40d8 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    40d0:	4b08      	ldr	r3, [pc, #32]	; (40f4 <buffer_alloc_calloc+0x114>)
    40d2:	681b      	ldr	r3, [r3, #0]
    40d4:	2001      	movs	r0, #1
        mbedtls_exit( 1 );
    40d6:	4798      	blx	r3
    memset( ret, 0, original_len );
    40d8:	462a      	mov	r2, r5
    40da:	2100      	movs	r1, #0
    40dc:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    40de:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    40e0:	f002 ffb2 	bl	7048 <memset>
    return( ret );
    40e4:	e79c      	b.n	4020 <buffer_alloc_calloc+0x40>
    40e6:	bf00      	nop
    40e8:	200038e0 	.word	0x200038e0
    40ec:	ff00aa55 	.word	0xff00aa55
    40f0:	ee119966 	.word	0xee119966
    40f4:	200000a0 	.word	0x200000a0

000040f8 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    40f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    40fc:	4605      	mov	r5, r0
    40fe:	2800      	cmp	r0, #0
    4100:	d07c      	beq.n	41fc <buffer_alloc_free+0x104>
    4102:	4f3f      	ldr	r7, [pc, #252]	; (4200 <buffer_alloc_free+0x108>)
    4104:	683b      	ldr	r3, [r7, #0]
    4106:	2b00      	cmp	r3, #0
    4108:	d078      	beq.n	41fc <buffer_alloc_free+0x104>
    410a:	68ba      	ldr	r2, [r7, #8]
    410c:	2a00      	cmp	r2, #0
    410e:	d075      	beq.n	41fc <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    4110:	4283      	cmp	r3, r0
    4112:	d803      	bhi.n	411c <buffer_alloc_free+0x24>
    4114:	687a      	ldr	r2, [r7, #4]
    4116:	4413      	add	r3, r2
    4118:	4298      	cmp	r0, r3
    411a:	d303      	bcc.n	4124 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    411c:	4b39      	ldr	r3, [pc, #228]	; (4204 <buffer_alloc_free+0x10c>)
    411e:	2001      	movs	r0, #1
    4120:	681b      	ldr	r3, [r3, #0]
    4122:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    4124:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    4128:	4620      	mov	r0, r4
    412a:	f7ff ff1b 	bl	3f64 <verify_header>
    412e:	b118      	cbz	r0, 4138 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    4130:	4b34      	ldr	r3, [pc, #208]	; (4204 <buffer_alloc_free+0x10c>)
    4132:	2001      	movs	r0, #1
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	4798      	blx	r3

    if( hdr->alloc != 1 )
    4138:	f855 3c18 	ldr.w	r3, [r5, #-24]
    413c:	2b01      	cmp	r3, #1
    413e:	d003      	beq.n	4148 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    4140:	4b30      	ldr	r3, [pc, #192]	; (4204 <buffer_alloc_free+0x10c>)
    4142:	2001      	movs	r0, #1
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	4798      	blx	r3
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    4148:	f855 6c14 	ldr.w	r6, [r5, #-20]
    hdr->alloc = 0;
    414c:	2300      	movs	r3, #0
    414e:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    4152:	b1ae      	cbz	r6, 4180 <buffer_alloc_free+0x88>
    4154:	68b2      	ldr	r2, [r6, #8]
    4156:	b992      	cbnz	r2, 417e <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    4158:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    415c:	f103 0220 	add.w	r2, r3, #32
    4160:	6873      	ldr	r3, [r6, #4]
    4162:	4413      	add	r3, r2
    4164:	6073      	str	r3, [r6, #4]
        hdr->prev->next = hdr->next;
    4166:	f855 3c10 	ldr.w	r3, [r5, #-16]
    416a:	6133      	str	r3, [r6, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    416c:	b103      	cbz	r3, 4170 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    416e:	60de      	str	r6, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    4170:	4620      	mov	r0, r4
    4172:	2220      	movs	r2, #32
    4174:	2100      	movs	r1, #0
    4176:	f002 ff67 	bl	7048 <memset>
    417a:	4623      	mov	r3, r4
    417c:	4634      	mov	r4, r6
    memory_header *hdr, *old = NULL;
    417e:	461e      	mov	r6, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    4180:	6920      	ldr	r0, [r4, #16]
    4182:	2800      	cmp	r0, #0
    4184:	d032      	beq.n	41ec <buffer_alloc_free+0xf4>
    4186:	6883      	ldr	r3, [r0, #8]
    4188:	2b00      	cmp	r3, #0
    418a:	d12f      	bne.n	41ec <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    418c:	6863      	ldr	r3, [r4, #4]
    418e:	6842      	ldr	r2, [r0, #4]
    4190:	3320      	adds	r3, #32
    4192:	4413      	add	r3, r2
        old = hdr->next;
        hdr->next = hdr->next->next;

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4194:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->size += sizeof(memory_header) + hdr->next->size;
    4198:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    419a:	6903      	ldr	r3, [r0, #16]
    419c:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    419e:	b9da      	cbnz	r2, 41d8 <buffer_alloc_free+0xe0>
    41a0:	bb01      	cbnz	r1, 41e4 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    41a2:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    41a4:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    41a6:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    41a8:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    41aa:	b1ea      	cbz	r2, 41e8 <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    41ac:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    41ae:	69a2      	ldr	r2, [r4, #24]
    41b0:	b102      	cbz	r2, 41b4 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    41b2:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    41b4:	b103      	cbz	r3, 41b8 <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    41b6:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    41b8:	2220      	movs	r2, #32
    41ba:	2100      	movs	r1, #0
    41bc:	f002 ff44 	bl	7048 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    41c0:	693b      	ldr	r3, [r7, #16]
    41c2:	079b      	lsls	r3, r3, #30
    41c4:	d51a      	bpl.n	41fc <buffer_alloc_free+0x104>
    41c6:	f7ff feed 	bl	3fa4 <verify_chain>
    41ca:	b1b8      	cbz	r0, 41fc <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
    41cc:	4b0d      	ldr	r3, [pc, #52]	; (4204 <buffer_alloc_free+0x10c>)
}
    41ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    41d2:	681b      	ldr	r3, [r3, #0]
    41d4:	2001      	movs	r0, #1
    41d6:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    41d8:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    41da:	69a1      	ldr	r1, [r4, #24]
    41dc:	2900      	cmp	r1, #0
    41de:	d0e0      	beq.n	41a2 <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    41e0:	614a      	str	r2, [r1, #20]
    41e2:	e7de      	b.n	41a2 <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    41e4:	60f9      	str	r1, [r7, #12]
    41e6:	e7f8      	b.n	41da <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    41e8:	60fc      	str	r4, [r7, #12]
    41ea:	e7e0      	b.n	41ae <buffer_alloc_free+0xb6>
    if( old == NULL )
    41ec:	2e00      	cmp	r6, #0
    41ee:	d1e7      	bne.n	41c0 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    41f0:	68fb      	ldr	r3, [r7, #12]
    41f2:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    41f4:	b103      	cbz	r3, 41f8 <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    41f6:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    41f8:	60fc      	str	r4, [r7, #12]
    41fa:	e7e1      	b.n	41c0 <buffer_alloc_free+0xc8>
}
    41fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4200:	200038e0 	.word	0x200038e0
    4204:	200000a0 	.word	0x200000a0

00004208 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    4208:	b538      	push	{r3, r4, r5, lr}
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    420a:	2214      	movs	r2, #20
{
    420c:	460d      	mov	r5, r1
    420e:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4210:	2100      	movs	r1, #0
    4212:	4812      	ldr	r0, [pc, #72]	; (425c <mbedtls_memory_buffer_alloc_init+0x54>)
    4214:	f002 ff18 	bl	7048 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    4218:	4911      	ldr	r1, [pc, #68]	; (4260 <mbedtls_memory_buffer_alloc_init+0x58>)
    421a:	4812      	ldr	r0, [pc, #72]	; (4264 <mbedtls_memory_buffer_alloc_init+0x5c>)
    421c:	f000 f832 	bl	4284 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4220:	2d23      	cmp	r5, #35	; 0x23
    4222:	d91a      	bls.n	425a <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4224:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4228:	bf1f      	itttt	ne
    422a:	3d04      	subne	r5, #4
    422c:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    422e:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4232:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    4234:	462a      	mov	r2, r5
    4236:	2100      	movs	r1, #0
    4238:	4620      	mov	r0, r4
    423a:	f002 ff05 	bl	7048 <memset>

    heap.buf = buf;
    423e:	4b07      	ldr	r3, [pc, #28]	; (425c <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    4240:	4a09      	ldr	r2, [pc, #36]	; (4268 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.first = (memory_header *)buf;
    4242:	609c      	str	r4, [r3, #8]
    heap.len = len;
    4244:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first->magic1 = MAGIC1;
    4248:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    424a:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    424e:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    4250:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    4254:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    4256:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    4258:	60dc      	str	r4, [r3, #12]
}
    425a:	bd38      	pop	{r3, r4, r5, pc}
    425c:	200038e0 	.word	0x200038e0
    4260:	000040f9 	.word	0x000040f9
    4264:	00003fe1 	.word	0x00003fe1
    4268:	ff00aa55 	.word	0xff00aa55

0000426c <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    426c:	4b01      	ldr	r3, [pc, #4]	; (4274 <mbedtls_calloc+0x8>)
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	4718      	bx	r3
    4272:	bf00      	nop
    4274:	2000009c 	.word	0x2000009c

00004278 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    4278:	4b01      	ldr	r3, [pc, #4]	; (4280 <mbedtls_free+0x8>)
    427a:	681b      	ldr	r3, [r3, #0]
    427c:	4718      	bx	r3
    427e:	bf00      	nop
    4280:	200000a4 	.word	0x200000a4

00004284 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    4284:	4b02      	ldr	r3, [pc, #8]	; (4290 <mbedtls_platform_set_calloc_free+0xc>)
    4286:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    4288:	4b02      	ldr	r3, [pc, #8]	; (4294 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    428a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    428c:	6019      	str	r1, [r3, #0]
}
    428e:	4770      	bx	lr
    4290:	2000009c 	.word	0x2000009c
    4294:	200000a4 	.word	0x200000a4

00004298 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    4298:	460a      	mov	r2, r1
    429a:	b119      	cbz	r1, 42a4 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
    429c:	4b02      	ldr	r3, [pc, #8]	; (42a8 <mbedtls_platform_zeroize+0x10>)
    429e:	2100      	movs	r1, #0
    42a0:	681b      	ldr	r3, [r3, #0]
    42a2:	4718      	bx	r3
}
    42a4:	4770      	bx	lr
    42a6:	bf00      	nop
    42a8:	200000a8 	.word	0x200000a8

000042ac <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    42ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    42ae:	f100 0608 	add.w	r6, r0, #8
    42b2:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    42b4:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    42b6:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    42b8:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    42ba:	f003 ff2f 	bl	811c <mbedtls_mpi_size>
    42be:	4287      	cmp	r7, r0
    42c0:	d116      	bne.n	42f0 <rsa_check_context.constprop.0+0x44>
    42c2:	6863      	ldr	r3, [r4, #4]
    42c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    42c8:	d812      	bhi.n	42f0 <rsa_check_context.constprop.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    42ca:	2100      	movs	r1, #0
    42cc:	4630      	mov	r0, r6
    42ce:	f004 f884 	bl	83da <mbedtls_mpi_cmp_int>
    42d2:	2800      	cmp	r0, #0
    42d4:	dd0c      	ble.n	42f0 <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    42d6:	2100      	movs	r1, #0
    42d8:	4630      	mov	r0, r6
    42da:	f003 fef2 	bl	80c2 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    42de:	b138      	cbz	r0, 42f0 <rsa_check_context.constprop.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    42e0:	b945      	cbnz	r5, 42f4 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    42e2:	2100      	movs	r1, #0
    42e4:	f104 0014 	add.w	r0, r4, #20
    42e8:	f004 f877 	bl	83da <mbedtls_mpi_cmp_int>
    42ec:	2800      	cmp	r0, #0
    42ee:	dc1e      	bgt.n	432e <rsa_check_context.constprop.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    42f0:	481b      	ldr	r0, [pc, #108]	; (4360 <rsa_check_context.constprop.0+0xb4>)
    42f2:	e01e      	b.n	4332 <rsa_check_context.constprop.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    42f4:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    42f8:	2100      	movs	r1, #0
    42fa:	4630      	mov	r0, r6
    42fc:	f004 f86d 	bl	83da <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4300:	2800      	cmp	r0, #0
    4302:	ddf5      	ble.n	42f0 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    4304:	2100      	movs	r1, #0
    4306:	4630      	mov	r0, r6
    4308:	f003 fedb 	bl	80c2 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    430c:	2800      	cmp	r0, #0
    430e:	d0ef      	beq.n	42f0 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4310:	f104 0638 	add.w	r6, r4, #56	; 0x38
    4314:	2100      	movs	r1, #0
    4316:	4630      	mov	r0, r6
    4318:	f004 f85f 	bl	83da <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    431c:	2800      	cmp	r0, #0
    431e:	dde7      	ble.n	42f0 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    4320:	2100      	movs	r1, #0
    4322:	4630      	mov	r0, r6
    4324:	f003 fecd 	bl	80c2 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4328:	2800      	cmp	r0, #0
    432a:	d1da      	bne.n	42e2 <rsa_check_context.constprop.0+0x36>
    432c:	e7e0      	b.n	42f0 <rsa_check_context.constprop.0+0x44>
    if( is_priv &&
    432e:	b90d      	cbnz	r5, 4334 <rsa_check_context.constprop.0+0x88>
    }
#endif

    return( 0 );
    4330:	2000      	movs	r0, #0
}
    4332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    4334:	2100      	movs	r1, #0
    4336:	f104 0044 	add.w	r0, r4, #68	; 0x44
    433a:	f004 f84e 	bl	83da <mbedtls_mpi_cmp_int>
    if( is_priv &&
    433e:	2800      	cmp	r0, #0
    4340:	ddd6      	ble.n	42f0 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    4342:	2100      	movs	r1, #0
    4344:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4348:	f004 f847 	bl	83da <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    434c:	2800      	cmp	r0, #0
    434e:	ddcf      	ble.n	42f0 <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    4350:	2100      	movs	r1, #0
    4352:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4356:	f004 f840 	bl	83da <mbedtls_mpi_cmp_int>
    if( is_priv &&
    435a:	2800      	cmp	r0, #0
    435c:	dce8      	bgt.n	4330 <rsa_check_context.constprop.0+0x84>
    435e:	e7c7      	b.n	42f0 <rsa_check_context.constprop.0+0x44>
    4360:	ffffbf80 	.word	0xffffbf80

00004364 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    4364:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    4366:	2100      	movs	r1, #0
{
    4368:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    436a:	f7ff ff9f 	bl	42ac <rsa_check_context.constprop.0>
    436e:	4605      	mov	r5, r0
    4370:	b9b8      	cbnz	r0, 43a2 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    4372:	f104 0608 	add.w	r6, r4, #8
    4376:	4630      	mov	r0, r6
    4378:	f003 feb4 	bl	80e4 <mbedtls_mpi_bitlen>
    437c:	287f      	cmp	r0, #127	; 0x7f
    437e:	d910      	bls.n	43a2 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4380:	3414      	adds	r4, #20
    4382:	4629      	mov	r1, r5
    4384:	4620      	mov	r0, r4
    4386:	f003 fe9c 	bl	80c2 <mbedtls_mpi_get_bit>
    438a:	b150      	cbz	r0, 43a2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    438c:	4620      	mov	r0, r4
    438e:	f003 fea9 	bl	80e4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4392:	2801      	cmp	r0, #1
    4394:	d905      	bls.n	43a2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    4396:	4631      	mov	r1, r6
    4398:	4620      	mov	r0, r4
    439a:	f003 ffdd 	bl	8358 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    439e:	2800      	cmp	r0, #0
    43a0:	db00      	blt.n	43a4 <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    43a2:	4d01      	ldr	r5, [pc, #4]	; (43a8 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    43a4:	4628      	mov	r0, r5
    43a6:	bd70      	pop	{r4, r5, r6, pc}
    43a8:	ffffbe00 	.word	0xffffbe00

000043ac <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    43ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ae:	460c      	mov	r4, r1
    43b0:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    43b2:	2100      	movs	r1, #0
{
    43b4:	4605      	mov	r5, r0
    43b6:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    43b8:	f7ff ff78 	bl	42ac <rsa_check_context.constprop.0>
    43bc:	bb80      	cbnz	r0, 4420 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    43be:	a803      	add	r0, sp, #12
    43c0:	f003 fdac 	bl	7f1c <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    43c4:	4621      	mov	r1, r4
    43c6:	686a      	ldr	r2, [r5, #4]
    43c8:	a803      	add	r0, sp, #12
    43ca:	f003 fead 	bl	8128 <mbedtls_mpi_read_binary>
    43ce:	4604      	mov	r4, r0
    43d0:	b9d0      	cbnz	r0, 4408 <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    43d2:	f105 0408 	add.w	r4, r5, #8
    43d6:	4621      	mov	r1, r4
    43d8:	a803      	add	r0, sp, #12
    43da:	f003 ffbd 	bl	8358 <mbedtls_mpi_cmp_mpi>
    43de:	2800      	cmp	r0, #0
    43e0:	da1b      	bge.n	441a <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    43e2:	f105 0368 	add.w	r3, r5, #104	; 0x68
    43e6:	a903      	add	r1, sp, #12
    43e8:	9300      	str	r3, [sp, #0]
    43ea:	f105 0214 	add.w	r2, r5, #20
    43ee:	4623      	mov	r3, r4
    43f0:	4608      	mov	r0, r1
    olen = ctx->len;
    43f2:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    43f4:	f004 fb17 	bl	8a26 <mbedtls_mpi_exp_mod>
    43f8:	4604      	mov	r4, r0
    43fa:	b928      	cbnz	r0, 4408 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    43fc:	463a      	mov	r2, r7
    43fe:	4631      	mov	r1, r6
    4400:	a803      	add	r0, sp, #12
    4402:	f003 feb2 	bl	816a <mbedtls_mpi_write_binary>
    4406:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    4408:	a803      	add	r0, sp, #12
    440a:	f003 fd8d 	bl	7f28 <mbedtls_mpi_free>

    if( ret != 0 )
    440e:	b10c      	cbz	r4, 4414 <mbedtls_rsa_public+0x68>
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    4410:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );

    return( 0 );
}
    4414:	4620      	mov	r0, r4
    4416:	b007      	add	sp, #28
    4418:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    441a:	f06f 0403 	mvn.w	r4, #3
    441e:	e7f3      	b.n	4408 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4420:	4c00      	ldr	r4, [pc, #0]	; (4424 <mbedtls_rsa_public+0x78>)
    4422:	e7f7      	b.n	4414 <mbedtls_rsa_public+0x68>
    4424:	ffffbf80 	.word	0xffffbf80

00004428 <mbedtls_sha256_starts>:
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
#else
    SHA256_VALIDATE_RET( is224 == 0 );
#endif

    ctx->total[0] = 0;
    4428:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    442a:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    442e:	b9c1      	cbnz	r1, 4462 <mbedtls_sha256_starts+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    4430:	4a19      	ldr	r2, [pc, #100]	; (4498 <mbedtls_sha256_starts+0x70>)
    4432:	4b1a      	ldr	r3, [pc, #104]	; (449c <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    4434:	f8df c068 	ldr.w	ip, [pc, #104]	; 44a0 <mbedtls_sha256_starts+0x78>
        ctx->state[1] = 0xBB67AE85;
    4438:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    443c:	4b19      	ldr	r3, [pc, #100]	; (44a4 <mbedtls_sha256_starts+0x7c>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    443e:	4a1a      	ldr	r2, [pc, #104]	; (44a8 <mbedtls_sha256_starts+0x80>)
        ctx->state[3] = 0xA54FF53A;
    4440:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    4444:	4b19      	ldr	r3, [pc, #100]	; (44ac <mbedtls_sha256_starts+0x84>)
    4446:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    444a:	4b19      	ldr	r3, [pc, #100]	; (44b0 <mbedtls_sha256_starts+0x88>)
    444c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    444e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    4452:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    4456:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    445a:	6243      	str	r3, [r0, #36]	; 0x24
#endif
    }

    ctx->is224 = is224;
    445c:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    445e:	2000      	movs	r0, #0
    4460:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    4462:	4b14      	ldr	r3, [pc, #80]	; (44b4 <mbedtls_sha256_starts+0x8c>)
    4464:	4a14      	ldr	r2, [pc, #80]	; (44b8 <mbedtls_sha256_starts+0x90>)
        ctx->state[4] = 0xFFC00B31;
    4466:	f8df c054 	ldr.w	ip, [pc, #84]	; 44bc <mbedtls_sha256_starts+0x94>
        ctx->state[1] = 0x367CD507;
    446a:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    446e:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    4472:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    4476:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    447a:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    447c:	4b10      	ldr	r3, [pc, #64]	; (44c0 <mbedtls_sha256_starts+0x98>)
    447e:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    4482:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    4486:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    448a:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    448e:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4490:	4b0c      	ldr	r3, [pc, #48]	; (44c4 <mbedtls_sha256_starts+0x9c>)
    4492:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    4494:	4b0c      	ldr	r3, [pc, #48]	; (44c8 <mbedtls_sha256_starts+0xa0>)
    4496:	e7e0      	b.n	445a <mbedtls_sha256_starts+0x32>
    4498:	6a09e667 	.word	0x6a09e667
    449c:	bb67ae85 	.word	0xbb67ae85
    44a0:	3c6ef372 	.word	0x3c6ef372
    44a4:	a54ff53a 	.word	0xa54ff53a
    44a8:	510e527f 	.word	0x510e527f
    44ac:	9b05688c 	.word	0x9b05688c
    44b0:	1f83d9ab 	.word	0x1f83d9ab
    44b4:	367cd507 	.word	0x367cd507
    44b8:	c1059ed8 	.word	0xc1059ed8
    44bc:	f70e5939 	.word	0xf70e5939
    44c0:	ffc00b31 	.word	0xffc00b31
    44c4:	64f98fa7 	.word	0x64f98fa7
    44c8:	befa4fa4 	.word	0xbefa4fa4

000044cc <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    44cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44d0:	b0d1      	sub	sp, #324	; 0x144
    44d2:	ab48      	add	r3, sp, #288	; 0x120
    44d4:	9301      	str	r3, [sp, #4]
    44d6:	f100 0608 	add.w	r6, r0, #8
    44da:	f100 0328 	add.w	r3, r0, #40	; 0x28
    44de:	9a01      	ldr	r2, [sp, #4]
    44e0:	9304      	str	r3, [sp, #16]
    44e2:	4633      	mov	r3, r6

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    44e4:	f853 0b04 	ldr.w	r0, [r3], #4
    44e8:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    44ec:	9804      	ldr	r0, [sp, #16]
    44ee:	4283      	cmp	r3, r0
    44f0:	d1f8      	bne.n	44e4 <mbedtls_internal_sha256_process+0x18>
    44f2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    44f4:	9302      	str	r3, [sp, #8]
    44f6:	ad4c      	add	r5, sp, #304	; 0x130
    44f8:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    44fc:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    4500:	e9dd 4748 	ldrd	r4, r7, [sp, #288]	; 0x120
    4504:	9303      	str	r3, [sp, #12]
    4506:	4b45      	ldr	r3, [pc, #276]	; (461c <mbedtls_internal_sha256_process+0x150>)
    4508:	9305      	str	r3, [sp, #20]
    450a:	aa06      	add	r2, sp, #24

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    450c:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
    4510:	f1b9 0f0f 	cmp.w	r9, #15
    4514:	d86a      	bhi.n	45ec <mbedtls_internal_sha256_process+0x120>
            GET_UINT32_BE( local.W[i], data, 4 * i );
    4516:	784b      	ldrb	r3, [r1, #1]
    4518:	f891 b000 	ldrb.w	fp, [r1]
    451c:	f891 a002 	ldrb.w	sl, [r1, #2]
    4520:	041b      	lsls	r3, r3, #16
    4522:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
    4526:	f891 b003 	ldrb.w	fp, [r1, #3]
    452a:	ea43 030b 	orr.w	r3, r3, fp
    452e:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4532:	ea4f 20f5 	mov.w	r0, r5, ror #11
    4536:	ea80 10b5 	eor.w	r0, r0, r5, ror #6
    453a:	ea80 6a75 	eor.w	sl, r0, r5, ror #25
    453e:	ea8c 0008 	eor.w	r0, ip, r8
    4542:	f8dd b014 	ldr.w	fp, [sp, #20]
    4546:	6093      	str	r3, [r2, #8]
    4548:	4028      	ands	r0, r5
    454a:	ea80 000c 	eor.w	r0, r0, ip
    454e:	4450      	add	r0, sl
    4550:	f85b ab04 	ldr.w	sl, [fp], #4
    4554:	f8cd b014 	str.w	fp, [sp, #20]
    4558:	4482      	add	sl, r0
    455a:	9802      	ldr	r0, [sp, #8]
    455c:	4453      	add	r3, sl
    455e:	4403      	add	r3, r0
    4560:	ea4f 3a74 	mov.w	sl, r4, ror #13
    4564:	ea44 0007 	orr.w	r0, r4, r7
    4568:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
    456c:	ea00 000e 	and.w	r0, r0, lr
    4570:	ea04 0b07 	and.w	fp, r4, r7
    4574:	ea8a 5ab4 	eor.w	sl, sl, r4, ror #22
    4578:	ea40 000b 	orr.w	r0, r0, fp
    457c:	4450      	add	r0, sl
    for( i = 0; i < 64; i++ )
    457e:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4582:	f8dd a00c 	ldr.w	sl, [sp, #12]
    for( i = 0; i < 64; i++ )
    4586:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    458a:	449a      	add	sl, r3
    458c:	e9cd ce02 	strd	ip, lr, [sp, #8]
    4590:	4403      	add	r3, r0
    for( i = 0; i < 64; i++ )
    4592:	f102 0204 	add.w	r2, r2, #4
    4596:	f101 0104 	add.w	r1, r1, #4
    459a:	d120      	bne.n	45de <mbedtls_internal_sha256_process+0x112>
    459c:	e9cd 584d 	strd	r5, r8, [sp, #308]	; 0x134
    45a0:	e9cd 3448 	strd	r3, r4, [sp, #288]	; 0x120
    45a4:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
    45a8:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
    45ac:	974a      	str	r7, [sp, #296]	; 0x128
    45ae:	9007      	str	r0, [sp, #28]
    45b0:	f8cd e12c 	str.w	lr, [sp, #300]	; 0x12c
    45b4:	9306      	str	r3, [sp, #24]
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    45b6:	9901      	ldr	r1, [sp, #4]
    45b8:	6833      	ldr	r3, [r6, #0]
    45ba:	f851 2b04 	ldr.w	r2, [r1], #4
    45be:	9101      	str	r1, [sp, #4]
    45c0:	4413      	add	r3, r2
    45c2:	f846 3b04 	str.w	r3, [r6], #4
    for( i = 0; i < 8; i++ )
    45c6:	9b04      	ldr	r3, [sp, #16]
    45c8:	42b3      	cmp	r3, r6
    45ca:	d1f4      	bne.n	45b6 <mbedtls_internal_sha256_process+0xea>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    45cc:	a806      	add	r0, sp, #24
    45ce:	f44f 7194 	mov.w	r1, #296	; 0x128
    45d2:	f7ff fe61 	bl	4298 <mbedtls_platform_zeroize>

    return( 0 );
}
    45d6:	2000      	movs	r0, #0
    45d8:	b051      	add	sp, #324	; 0x144
    45da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45de:	46be      	mov	lr, r7
    45e0:	46c4      	mov	ip, r8
    45e2:	4627      	mov	r7, r4
    45e4:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    45e6:	461c      	mov	r4, r3
    45e8:	4655      	mov	r5, sl
    45ea:	e791      	b.n	4510 <mbedtls_internal_sha256_process+0x44>
            R( i );
    45ec:	6813      	ldr	r3, [r2, #0]
    45ee:	f852 bc34 	ldr.w	fp, [r2, #-52]
    45f2:	f852 0c38 	ldr.w	r0, [r2, #-56]
    45f6:	ea4f 4af3 	mov.w	sl, r3, ror #19
    45fa:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    45fe:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    4602:	f852 3c14 	ldr.w	r3, [r2, #-20]
    4606:	4403      	add	r3, r0
    4608:	ea4f 40bb 	mov.w	r0, fp, ror #18
    460c:	ea80 10fb 	eor.w	r0, r0, fp, ror #7
    4610:	449a      	add	sl, r3
    4612:	ea80 03db 	eor.w	r3, r0, fp, lsr #3
    4616:	4453      	add	r3, sl
    4618:	e78b      	b.n	4532 <mbedtls_internal_sha256_process+0x66>
    461a:	bf00      	nop
    461c:	00009cd0 	.word	0x00009cd0

00004620 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4620:	4a02      	ldr	r2, [pc, #8]	; (462c <nvmc_wait+0xc>)
    4622:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4626:	2b00      	cmp	r3, #0
    4628:	d0fb      	beq.n	4622 <nvmc_wait+0x2>
}
    462a:	4770      	bx	lr
    462c:	4001e000 	.word	0x4001e000

00004630 <SystemInit>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4634:	b510      	push	{r4, lr}
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    4636:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    463a:	2a0d      	cmp	r2, #13
    463c:	d155      	bne.n	46ea <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    463e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4642:	2200      	movs	r2, #0
    4644:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4648:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    464c:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4650:	4a48      	ldr	r2, [pc, #288]	; (4774 <SystemInit+0x144>)
    4652:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    4656:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    465a:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    465e:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4662:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    4666:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    466a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    466e:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4672:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    4676:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    467a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    467e:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4682:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    4686:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    468a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    468e:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4692:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    4696:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    469a:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    469e:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    46a2:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    46a6:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    46aa:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    46ae:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    46b2:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    46b6:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    46ba:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    46be:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    46c2:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    46c6:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    46ca:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    46ce:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    46d2:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    46d6:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    46da:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    46de:	07db      	lsls	r3, r3, #31
    46e0:	d509      	bpl.n	46f6 <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    46e2:	f06f 0301 	mvn.w	r3, #1
    46e6:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    46ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    46ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    46f2:	2b0d      	cmp	r3, #13
    46f4:	d10c      	bne.n	4710 <SystemInit+0xe0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    46f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            {
                switch(var2)
    46fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    46fe:	b13b      	cbz	r3, 4710 <SystemInit+0xe0>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4700:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4704:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    470c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4710:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4714:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4718:	2a00      	cmp	r2, #0
    471a:	db03      	blt.n	4724 <SystemInit+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    471c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4720:	2b00      	cmp	r3, #0
    4722:	da22      	bge.n	476a <SystemInit+0x13a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4724:	4914      	ldr	r1, [pc, #80]	; (4778 <SystemInit+0x148>)
    4726:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4728:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    472c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4730:	2412      	movs	r4, #18
    nvmc_wait();
    4732:	f7ff ff75 	bl	4620 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4736:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    473a:	f7ff ff71 	bl	4620 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    473e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4742:	f7ff ff6d 	bl	4620 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4746:	2300      	movs	r3, #0
    4748:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    474c:	f7ff ff68 	bl	4620 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4750:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4754:	4909      	ldr	r1, [pc, #36]	; (477c <SystemInit+0x14c>)
    4756:	4b0a      	ldr	r3, [pc, #40]	; (4780 <SystemInit+0x150>)
    4758:	68ca      	ldr	r2, [r1, #12]
    475a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    475e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4760:	60cb      	str	r3, [r1, #12]
    4762:	f3bf 8f4f 	dsb	sy
    __NOP();
    4766:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4768:	e7fd      	b.n	4766 <SystemInit+0x136>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    476a:	4b06      	ldr	r3, [pc, #24]	; (4784 <SystemInit+0x154>)
    476c:	4a06      	ldr	r2, [pc, #24]	; (4788 <SystemInit+0x158>)
    476e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4770:	bd10      	pop	{r4, pc}
    4772:	bf00      	nop
    4774:	4000c000 	.word	0x4000c000
    4778:	4001e000 	.word	0x4001e000
    477c:	e000ed00 	.word	0xe000ed00
    4780:	05fa0004 	.word	0x05fa0004
    4784:	200000ac 	.word	0x200000ac
    4788:	03d09000 	.word	0x03d09000

0000478c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    478c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    478e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4790:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4792:	fab2 f382 	clz	r3, r2
    4796:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    479a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    479c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    479e:	d014      	beq.n	47ca <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    47a0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    47a4:	fa05 f303 	lsl.w	r3, r5, r3
    47a8:	ea22 0303 	bic.w	r3, r2, r3
    47ac:	e850 6f00 	ldrex	r6, [r0]
    47b0:	4296      	cmp	r6, r2
    47b2:	d104      	bne.n	47be <nrfx_flag32_alloc+0x32>
    47b4:	e840 3c00 	strex	ip, r3, [r0]
    47b8:	f1bc 0f00 	cmp.w	ip, #0
    47bc:	d1f6      	bne.n	47ac <nrfx_flag32_alloc+0x20>
    47be:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    47c2:	d1e5      	bne.n	4790 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    47c4:	4802      	ldr	r0, [pc, #8]	; (47d0 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    47c6:	700c      	strb	r4, [r1, #0]
}
    47c8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    47ca:	4802      	ldr	r0, [pc, #8]	; (47d4 <nrfx_flag32_alloc+0x48>)
    47cc:	e7fc      	b.n	47c8 <nrfx_flag32_alloc+0x3c>
    47ce:	bf00      	nop
    47d0:	0bad0000 	.word	0x0bad0000
    47d4:	0bad0002 	.word	0x0bad0002

000047d8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    47d8:	6803      	ldr	r3, [r0, #0]
    47da:	40cb      	lsrs	r3, r1
    47dc:	07db      	lsls	r3, r3, #31
{
    47de:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    47e0:	d415      	bmi.n	480e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    47e2:	2301      	movs	r3, #1
    47e4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    47e8:	6803      	ldr	r3, [r0, #0]
    47ea:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    47ee:	ea41 0203 	orr.w	r2, r1, r3
    47f2:	e850 4f00 	ldrex	r4, [r0]
    47f6:	429c      	cmp	r4, r3
    47f8:	d104      	bne.n	4804 <nrfx_flag32_free+0x2c>
    47fa:	e840 2c00 	strex	ip, r2, [r0]
    47fe:	f1bc 0f00 	cmp.w	ip, #0
    4802:	d1f6      	bne.n	47f2 <nrfx_flag32_free+0x1a>
    4804:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4808:	d1ee      	bne.n	47e8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    480a:	4802      	ldr	r0, [pc, #8]	; (4814 <nrfx_flag32_free+0x3c>)
}
    480c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    480e:	4802      	ldr	r0, [pc, #8]	; (4818 <nrfx_flag32_free+0x40>)
    4810:	e7fc      	b.n	480c <nrfx_flag32_free+0x34>
    4812:	bf00      	nop
    4814:	0bad0000 	.word	0x0bad0000
    4818:	0bad0004 	.word	0x0bad0004

0000481c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    481c:	4b05      	ldr	r3, [pc, #20]	; (4834 <nrfx_clock_init+0x18>)
    481e:	791a      	ldrb	r2, [r3, #4]
    4820:	b92a      	cbnz	r2, 482e <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    4822:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4824:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4826:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4828:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    482a:	4803      	ldr	r0, [pc, #12]	; (4838 <nrfx_clock_init+0x1c>)
    482c:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    482e:	4803      	ldr	r0, [pc, #12]	; (483c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4830:	4770      	bx	lr
    4832:	bf00      	nop
    4834:	200038f4 	.word	0x200038f4
    4838:	0bad0000 	.word	0x0bad0000
    483c:	0bad000c 	.word	0x0bad000c

00004840 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4844:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4848:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    484c:	03c8      	lsls	r0, r1, #15
    484e:	d516      	bpl.n	487e <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    4850:	07d1      	lsls	r1, r2, #31
    4852:	d514      	bpl.n	487e <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4854:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    4858:	03d2      	lsls	r2, r2, #15
    485a:	d510      	bpl.n	487e <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    485c:	490a      	ldr	r1, [pc, #40]	; (4888 <nrfx_clock_calibration_start+0x48>)
    485e:	794a      	ldrb	r2, [r1, #5]
    4860:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4864:	b96a      	cbnz	r2, 4882 <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4866:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    486a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    486e:	4807      	ldr	r0, [pc, #28]	; (488c <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    4870:	2208      	movs	r2, #8
    4872:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    4876:	2201      	movs	r2, #1
    4878:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    487a:	611a      	str	r2, [r3, #16]
}
    487c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    487e:	4804      	ldr	r0, [pc, #16]	; (4890 <nrfx_clock_calibration_start+0x50>)
    4880:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    4882:	4804      	ldr	r0, [pc, #16]	; (4894 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4884:	4770      	bx	lr
    4886:	bf00      	nop
    4888:	200038f4 	.word	0x200038f4
    488c:	0bad0000 	.word	0x0bad0000
    4890:	0bad0005 	.word	0x0bad0005
    4894:	0bad000b 	.word	0x0bad000b

00004898 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    489c:	b510      	push	{r4, lr}
    489e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    48a2:	b152      	cbz	r2, 48ba <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48a4:	2000      	movs	r0, #0
    48a6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    48aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    48ae:	2201      	movs	r2, #1
    48b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    48b4:	4b16      	ldr	r3, [pc, #88]	; (4910 <nrfx_power_clock_irq_handler+0x78>)
    48b6:	681b      	ldr	r3, [r3, #0]
    48b8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    48c2:	b15a      	cbz	r2, 48dc <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48c4:	2200      	movs	r2, #0
    48c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    48ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    48ce:	2202      	movs	r2, #2
    48d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    48d4:	4b0e      	ldr	r3, [pc, #56]	; (4910 <nrfx_power_clock_irq_handler+0x78>)
    48d6:	2001      	movs	r0, #1
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48e0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    48e4:	b192      	cbz	r2, 490c <nrfx_power_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    48e6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    48ea:	0712      	lsls	r2, r2, #28
    48ec:	d50e      	bpl.n	490c <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48ee:	2200      	movs	r2, #0
    48f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    48f4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    48f8:	2108      	movs	r1, #8
    48fa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    48fe:	4b04      	ldr	r3, [pc, #16]	; (4910 <nrfx_power_clock_irq_handler+0x78>)
    4900:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	2003      	movs	r0, #3
    490a:	4718      	bx	r3
}
    490c:	bd10      	pop	{r4, pc}
    490e:	bf00      	nop
    4910:	200038f4 	.word	0x200038f4

00004914 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4914:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4916:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    491a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    491c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    491e:	6002      	str	r2, [r0, #0]
}
    4920:	4802      	ldr	r0, [pc, #8]	; (492c <nrf_gpio_pin_port_decode+0x18>)
    4922:	bf18      	it	ne
    4924:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4928:	4770      	bx	lr
    492a:	bf00      	nop
    492c:	50000300 	.word	0x50000300

00004930 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4930:	4b03      	ldr	r3, [pc, #12]	; (4940 <pin_in_use_by_te+0x10>)
    4932:	3008      	adds	r0, #8
    4934:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4938:	f3c0 1040 	ubfx	r0, r0, #5, #1
    493c:	4770      	bx	lr
    493e:	bf00      	nop
    4940:	200000b0 	.word	0x200000b0

00004944 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4944:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4946:	f100 0308 	add.w	r3, r0, #8
    494a:	4c0c      	ldr	r4, [pc, #48]	; (497c <call_handler+0x38>)
    494c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4950:	05da      	lsls	r2, r3, #23
{
    4952:	4605      	mov	r5, r0
    4954:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4956:	d507      	bpl.n	4968 <call_handler+0x24>
    4958:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    495c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4960:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4964:	6852      	ldr	r2, [r2, #4]
    4966:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4968:	68a3      	ldr	r3, [r4, #8]
    496a:	b12b      	cbz	r3, 4978 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    496c:	68e2      	ldr	r2, [r4, #12]
    496e:	4631      	mov	r1, r6
    4970:	4628      	mov	r0, r5
    }
}
    4972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4976:	4718      	bx	r3
}
    4978:	bd70      	pop	{r4, r5, r6, pc}
    497a:	bf00      	nop
    497c:	200000b0 	.word	0x200000b0

00004980 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4980:	4a12      	ldr	r2, [pc, #72]	; (49cc <release_handler+0x4c>)
    4982:	3008      	adds	r0, #8
{
    4984:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4986:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    498a:	05d9      	lsls	r1, r3, #23
    498c:	d51b      	bpl.n	49c6 <release_handler+0x46>
    498e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4992:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4996:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    499a:	f102 0410 	add.w	r4, r2, #16
    499e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    49a0:	f834 3b02 	ldrh.w	r3, [r4], #2
    49a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    49a8:	d003      	beq.n	49b2 <release_handler+0x32>
    49aa:	f3c3 2343 	ubfx	r3, r3, #9, #4
    49ae:	4299      	cmp	r1, r3
    49b0:	d009      	beq.n	49c6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    49b2:	3001      	adds	r0, #1
    49b4:	282a      	cmp	r0, #42	; 0x2a
    49b6:	d1f3      	bne.n	49a0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    49b8:	2300      	movs	r3, #0
    49ba:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    49be:	4804      	ldr	r0, [pc, #16]	; (49d0 <release_handler+0x50>)
}
    49c0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    49c2:	f7ff bf09 	b.w	47d8 <nrfx_flag32_free>
}
    49c6:	bc10      	pop	{r4}
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop
    49cc:	200000b0 	.word	0x200000b0
    49d0:	20000118 	.word	0x20000118

000049d4 <pin_handler_trigger_uninit>:
{
    49d4:	b538      	push	{r3, r4, r5, lr}
    49d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    49d8:	f7ff ffaa 	bl	4930 <pin_in_use_by_te>
    49dc:	4c09      	ldr	r4, [pc, #36]	; (4a04 <pin_handler_trigger_uninit+0x30>)
    49de:	f102 0508 	add.w	r5, r2, #8
    49e2:	b140      	cbz	r0, 49f6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    49e4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    49e8:	4907      	ldr	r1, [pc, #28]	; (4a08 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    49ea:	0b5b      	lsrs	r3, r3, #13
    49ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    49f0:	2000      	movs	r0, #0
    49f2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    49f6:	4610      	mov	r0, r2
    49f8:	f7ff ffc2 	bl	4980 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    49fc:	2300      	movs	r3, #0
    49fe:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4a02:	bd38      	pop	{r3, r4, r5, pc}
    4a04:	200000b0 	.word	0x200000b0
    4a08:	40006000 	.word	0x40006000

00004a0c <nrfx_gpiote_input_configure>:
{
    4a0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4a10:	4604      	mov	r4, r0
    4a12:	4617      	mov	r7, r2
    4a14:	461d      	mov	r5, r3
    if (p_input_config)
    4a16:	b321      	cbz	r1, 4a62 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a18:	4e4e      	ldr	r6, [pc, #312]	; (4b54 <nrfx_gpiote_input_configure+0x148>)
    4a1a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4a1e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4a22:	079b      	lsls	r3, r3, #30
    4a24:	d506      	bpl.n	4a34 <nrfx_gpiote_input_configure+0x28>
    4a26:	f7ff ff83 	bl	4930 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4a2a:	b118      	cbz	r0, 4a34 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    4a2c:	484a      	ldr	r0, [pc, #296]	; (4b58 <nrfx_gpiote_input_configure+0x14c>)
}
    4a2e:	b004      	add	sp, #16
    4a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4a34:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4a36:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4a3a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4a3e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4a42:	f10d 020f 	add.w	r2, sp, #15
    4a46:	460b      	mov	r3, r1
    4a48:	4620      	mov	r0, r4
    4a4a:	f10d 010e 	add.w	r1, sp, #14
    4a4e:	f004 fbf7 	bl	9240 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4a52:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4a56:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4a5a:	f043 0301 	orr.w	r3, r3, #1
    4a5e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    4a62:	b197      	cbz	r7, 4a8a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a64:	4b3b      	ldr	r3, [pc, #236]	; (4b54 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4a66:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4a68:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a6a:	f104 0008 	add.w	r0, r4, #8
    4a6e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4a72:	078f      	lsls	r7, r1, #30
    4a74:	d50c      	bpl.n	4a90 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    4a76:	2a00      	cmp	r2, #0
    4a78:	d1d8      	bne.n	4a2c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4a7a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4a7e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4a82:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4a86:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    4a8a:	bbcd      	cbnz	r5, 4b00 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    4a8c:	4833      	ldr	r0, [pc, #204]	; (4b5c <nrfx_gpiote_input_configure+0x150>)
    4a8e:	e7ce      	b.n	4a2e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4a90:	f021 0120 	bic.w	r1, r1, #32
    4a94:	04c9      	lsls	r1, r1, #19
    4a96:	0cc9      	lsrs	r1, r1, #19
    4a98:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4a9c:	2a00      	cmp	r2, #0
    4a9e:	d0ec      	beq.n	4a7a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    4aa0:	2e03      	cmp	r6, #3
    4aa2:	d8c3      	bhi.n	4a2c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4aa4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4aa6:	b92e      	cbnz	r6, 4ab4 <nrfx_gpiote_input_configure+0xa8>
    4aa8:	4a2d      	ldr	r2, [pc, #180]	; (4b60 <nrfx_gpiote_input_configure+0x154>)
    4aaa:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4aae:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4ab2:	e7e2      	b.n	4a7a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ab4:	00ba      	lsls	r2, r7, #2
    4ab6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4aba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4abe:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4ac2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4ac6:	f02c 0c03 	bic.w	ip, ip, #3
    4aca:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4ace:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4ad2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4ad6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4ada:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ade:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4ae2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4ae6:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4aea:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4aee:	ea4c 0c0e 	orr.w	ip, ip, lr
    4af2:	f041 0120 	orr.w	r1, r1, #32
    4af6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4afa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4afe:	e7bc      	b.n	4a7a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4b00:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4b04:	4620      	mov	r0, r4
    4b06:	f7ff ff3b 	bl	4980 <release_handler>
    if (!handler)
    4b0a:	2e00      	cmp	r6, #0
    4b0c:	d0be      	beq.n	4a8c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4b0e:	4d11      	ldr	r5, [pc, #68]	; (4b54 <nrfx_gpiote_input_configure+0x148>)
    4b10:	682b      	ldr	r3, [r5, #0]
    4b12:	429e      	cmp	r6, r3
    4b14:	d104      	bne.n	4b20 <nrfx_gpiote_input_configure+0x114>
    4b16:	686b      	ldr	r3, [r5, #4]
    4b18:	429f      	cmp	r7, r3
    4b1a:	d101      	bne.n	4b20 <nrfx_gpiote_input_configure+0x114>
    4b1c:	2200      	movs	r2, #0
    4b1e:	e00a      	b.n	4b36 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4b20:	4810      	ldr	r0, [pc, #64]	; (4b64 <nrfx_gpiote_input_configure+0x158>)
    4b22:	f10d 010f 	add.w	r1, sp, #15
    4b26:	f7ff fe31 	bl	478c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4b2a:	4b0c      	ldr	r3, [pc, #48]	; (4b5c <nrfx_gpiote_input_configure+0x150>)
    4b2c:	4298      	cmp	r0, r3
    4b2e:	f47f af7e 	bne.w	4a2e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    4b32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4b36:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4b3a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4b3e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4b40:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4b42:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4b46:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4b4e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4b52:	e79b      	b.n	4a8c <nrfx_gpiote_input_configure+0x80>
    4b54:	200000b0 	.word	0x200000b0
    4b58:	0bad0004 	.word	0x0bad0004
    4b5c:	0bad0000 	.word	0x0bad0000
    4b60:	40006000 	.word	0x40006000
    4b64:	20000118 	.word	0x20000118

00004b68 <nrfx_gpiote_output_configure>:
{
    4b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b6a:	4604      	mov	r4, r0
    4b6c:	b085      	sub	sp, #20
    4b6e:	4615      	mov	r5, r2
    if (p_config)
    4b70:	b319      	cbz	r1, 4bba <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b72:	4e33      	ldr	r6, [pc, #204]	; (4c40 <nrfx_gpiote_output_configure+0xd8>)
    4b74:	f100 0708 	add.w	r7, r0, #8
    4b78:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4b7c:	0793      	lsls	r3, r2, #30
    4b7e:	d403      	bmi.n	4b88 <nrfx_gpiote_output_configure+0x20>
    4b80:	f7ff fed6 	bl	4930 <pin_in_use_by_te>
    4b84:	2800      	cmp	r0, #0
    4b86:	d158      	bne.n	4c3a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4b88:	f012 0f1c 	tst.w	r2, #28
    4b8c:	d002      	beq.n	4b94 <nrfx_gpiote_output_configure+0x2c>
    4b8e:	784b      	ldrb	r3, [r1, #1]
    4b90:	2b01      	cmp	r3, #1
    4b92:	d052      	beq.n	4c3a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4b94:	2301      	movs	r3, #1
    4b96:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4b9a:	2300      	movs	r3, #0
    4b9c:	e9cd 1300 	strd	r1, r3, [sp]
    4ba0:	1c4a      	adds	r2, r1, #1
    4ba2:	1c8b      	adds	r3, r1, #2
    4ba4:	4620      	mov	r0, r4
    4ba6:	f10d 010f 	add.w	r1, sp, #15
    4baa:	f004 fb49 	bl	9240 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4bae:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4bb2:	f043 0303 	orr.w	r3, r3, #3
    4bb6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4bba:	b915      	cbnz	r5, 4bc2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4bbc:	4821      	ldr	r0, [pc, #132]	; (4c44 <nrfx_gpiote_output_configure+0xdc>)
}
    4bbe:	b005      	add	sp, #20
    4bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bc2:	4e1f      	ldr	r6, [pc, #124]	; (4c40 <nrfx_gpiote_output_configure+0xd8>)
    4bc4:	f104 0708 	add.w	r7, r4, #8
    4bc8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4bcc:	0783      	lsls	r3, r0, #30
    4bce:	d534      	bpl.n	4c3a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4bd0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4bd4:	4661      	mov	r1, ip
    4bd6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4bd8:	f020 0020 	bic.w	r0, r0, #32
    4bdc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4be0:	04c0      	lsls	r0, r0, #19
    4be2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4be6:	0cc0      	lsrs	r0, r0, #19
    4be8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4bec:	2300      	movs	r3, #0
    4bee:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4bf2:	786a      	ldrb	r2, [r5, #1]
    4bf4:	2a00      	cmp	r2, #0
    4bf6:	d0e1      	beq.n	4bbc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4bf8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4bfc:	78ad      	ldrb	r5, [r5, #2]
    4bfe:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4c02:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4c06:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c0a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4c0e:	0223      	lsls	r3, r4, #8
    4c10:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4c14:	0412      	lsls	r2, r2, #16
    4c16:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c1a:	ea43 030e 	orr.w	r3, r3, lr
    4c1e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4c20:	052a      	lsls	r2, r5, #20
    4c22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c26:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c2a:	4313      	orrs	r3, r2
    4c2c:	f040 0020 	orr.w	r0, r0, #32
    4c30:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4c34:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4c38:	e7c0      	b.n	4bbc <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    4c3a:	4803      	ldr	r0, [pc, #12]	; (4c48 <nrfx_gpiote_output_configure+0xe0>)
    4c3c:	e7bf      	b.n	4bbe <nrfx_gpiote_output_configure+0x56>
    4c3e:	bf00      	nop
    4c40:	200000b0 	.word	0x200000b0
    4c44:	0bad0000 	.word	0x0bad0000
    4c48:	0bad0004 	.word	0x0bad0004

00004c4c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4c4c:	4b01      	ldr	r3, [pc, #4]	; (4c54 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4c4e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4c52:	4770      	bx	lr
    4c54:	200000b0 	.word	0x200000b0

00004c58 <nrfx_gpiote_channel_get>:
{
    4c58:	b508      	push	{r3, lr}
    4c5a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4c5c:	f7ff fe68 	bl	4930 <pin_in_use_by_te>
    4c60:	b138      	cbz	r0, 4c72 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c62:	4b05      	ldr	r3, [pc, #20]	; (4c78 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4c64:	4805      	ldr	r0, [pc, #20]	; (4c7c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c66:	3208      	adds	r2, #8
    4c68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4c6c:	0b5b      	lsrs	r3, r3, #13
    4c6e:	700b      	strb	r3, [r1, #0]
}
    4c70:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4c72:	4803      	ldr	r0, [pc, #12]	; (4c80 <nrfx_gpiote_channel_get+0x28>)
    4c74:	e7fc      	b.n	4c70 <nrfx_gpiote_channel_get+0x18>
    4c76:	bf00      	nop
    4c78:	200000b0 	.word	0x200000b0
    4c7c:	0bad0000 	.word	0x0bad0000
    4c80:	0bad0004 	.word	0x0bad0004

00004c84 <nrfx_gpiote_init>:
{
    4c84:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4c86:	4c0f      	ldr	r4, [pc, #60]	; (4cc4 <nrfx_gpiote_init+0x40>)
    4c88:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
    4c8c:	b9bd      	cbnz	r5, 4cbe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4c8e:	2254      	movs	r2, #84	; 0x54
    4c90:	4629      	mov	r1, r5
    4c92:	f104 0010 	add.w	r0, r4, #16
    4c96:	f002 f9d7 	bl	7048 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4c9a:	2006      	movs	r0, #6
    4c9c:	f7fc ff2c 	bl	1af8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ca0:	4b09      	ldr	r3, [pc, #36]	; (4cc8 <nrfx_gpiote_init+0x44>)
    return err_code;
    4ca2:	480a      	ldr	r0, [pc, #40]	; (4ccc <nrfx_gpiote_init+0x48>)
    4ca4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4ca8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4cac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4cb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4cb4:	2301      	movs	r3, #1
    4cb6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4cba:	66a3      	str	r3, [r4, #104]	; 0x68
}
    4cbc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4cbe:	4804      	ldr	r0, [pc, #16]	; (4cd0 <nrfx_gpiote_init+0x4c>)
    4cc0:	e7fc      	b.n	4cbc <nrfx_gpiote_init+0x38>
    4cc2:	bf00      	nop
    4cc4:	200000b0 	.word	0x200000b0
    4cc8:	40006000 	.word	0x40006000
    4ccc:	0bad0000 	.word	0x0bad0000
    4cd0:	0bad0005 	.word	0x0bad0005

00004cd4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4cd4:	4b03      	ldr	r3, [pc, #12]	; (4ce4 <nrfx_gpiote_is_init+0x10>)
    4cd6:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    4cda:	3800      	subs	r0, #0
    4cdc:	bf18      	it	ne
    4cde:	2001      	movne	r0, #1
    4ce0:	4770      	bx	lr
    4ce2:	bf00      	nop
    4ce4:	200000b0 	.word	0x200000b0

00004ce8 <nrfx_gpiote_channel_free>:
{
    4ce8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4cea:	4801      	ldr	r0, [pc, #4]	; (4cf0 <nrfx_gpiote_channel_free+0x8>)
    4cec:	f7ff bd74 	b.w	47d8 <nrfx_flag32_free>
    4cf0:	20000114 	.word	0x20000114

00004cf4 <nrfx_gpiote_channel_alloc>:
{
    4cf4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4cf6:	4801      	ldr	r0, [pc, #4]	; (4cfc <nrfx_gpiote_channel_alloc+0x8>)
    4cf8:	f7ff bd48 	b.w	478c <nrfx_flag32_alloc>
    4cfc:	20000114 	.word	0x20000114

00004d00 <nrfx_gpiote_trigger_enable>:
{
    4d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4d02:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d04:	f7ff fe14 	bl	4930 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d08:	f104 0208 	add.w	r2, r4, #8
    4d0c:	4b1e      	ldr	r3, [pc, #120]	; (4d88 <nrfx_gpiote_trigger_enable+0x88>)
    4d0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d12:	b1e8      	cbz	r0, 4d50 <nrfx_gpiote_trigger_enable+0x50>
    4d14:	f013 0502 	ands.w	r5, r3, #2
    4d18:	d11a      	bne.n	4d50 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d1a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4d1c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4d1e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4d22:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4d26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4d2a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d2e:	6005      	str	r5, [r0, #0]
    4d30:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4d32:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4d36:	f040 0001 	orr.w	r0, r0, #1
    4d3a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4d3e:	b129      	cbz	r1, 4d4c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4d40:	2201      	movs	r2, #1
    4d42:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4d46:	4a11      	ldr	r2, [pc, #68]	; (4d8c <nrfx_gpiote_trigger_enable+0x8c>)
    4d48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4d4c:	b003      	add	sp, #12
    4d4e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4d50:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4d54:	2b04      	cmp	r3, #4
    4d56:	d012      	beq.n	4d7e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4d58:	2b05      	cmp	r3, #5
    4d5a:	d012      	beq.n	4d82 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d5c:	a801      	add	r0, sp, #4
    4d5e:	9401      	str	r4, [sp, #4]
    4d60:	f7ff fdd8 	bl	4914 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4d64:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4d66:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4d6a:	40d9      	lsrs	r1, r3
    4d6c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4d70:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d72:	4620      	mov	r0, r4
}
    4d74:	b003      	add	sp, #12
    4d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d7a:	f004 baa8 	b.w	92ce <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4d7e:	2103      	movs	r1, #3
    4d80:	e7f7      	b.n	4d72 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4d82:	2102      	movs	r1, #2
    4d84:	e7f5      	b.n	4d72 <nrfx_gpiote_trigger_enable+0x72>
    4d86:	bf00      	nop
    4d88:	200000b0 	.word	0x200000b0
    4d8c:	40006000 	.word	0x40006000

00004d90 <nrfx_gpiote_trigger_disable>:
{
    4d90:	b508      	push	{r3, lr}
    4d92:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d94:	f7ff fdcc 	bl	4930 <pin_in_use_by_te>
    4d98:	b1c0      	cbz	r0, 4dcc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d9a:	f102 0108 	add.w	r1, r2, #8
    4d9e:	4b0e      	ldr	r3, [pc, #56]	; (4dd8 <nrfx_gpiote_trigger_disable+0x48>)
    4da0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4da4:	0799      	lsls	r1, r3, #30
    4da6:	d411      	bmi.n	4dcc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4da8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4daa:	2201      	movs	r2, #1
    4dac:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4dae:	009b      	lsls	r3, r3, #2
    4db0:	490a      	ldr	r1, [pc, #40]	; (4ddc <nrfx_gpiote_trigger_disable+0x4c>)
    4db2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4db6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4dba:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4dbe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4dc2:	f022 0203 	bic.w	r2, r2, #3
    4dc6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4dca:	bd08      	pop	{r3, pc}
    4dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4dd0:	2100      	movs	r1, #0
    4dd2:	4610      	mov	r0, r2
    4dd4:	f004 ba7b 	b.w	92ce <nrf_gpio_cfg_sense_set>
    4dd8:	200000b0 	.word	0x200000b0
    4ddc:	40006000 	.word	0x40006000

00004de0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4de0:	4b0e      	ldr	r3, [pc, #56]	; (4e1c <nrfx_gpiote_pin_uninit+0x3c>)
    4de2:	f100 0208 	add.w	r2, r0, #8
{
    4de6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4de8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4dec:	07db      	lsls	r3, r3, #31
{
    4dee:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4df0:	d511      	bpl.n	4e16 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4df2:	f7ff ffcd 	bl	4d90 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4df6:	4620      	mov	r0, r4
    4df8:	f7ff fdec 	bl	49d4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4dfc:	a801      	add	r0, sp, #4
    4dfe:	9401      	str	r4, [sp, #4]
    4e00:	f7ff fd88 	bl	4914 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4e0a:	2202      	movs	r2, #2
    4e0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4e10:	4803      	ldr	r0, [pc, #12]	; (4e20 <nrfx_gpiote_pin_uninit+0x40>)
}
    4e12:	b002      	add	sp, #8
    4e14:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4e16:	4803      	ldr	r0, [pc, #12]	; (4e24 <nrfx_gpiote_pin_uninit+0x44>)
    4e18:	e7fb      	b.n	4e12 <nrfx_gpiote_pin_uninit+0x32>
    4e1a:	bf00      	nop
    4e1c:	200000b0 	.word	0x200000b0
    4e20:	0bad0000 	.word	0x0bad0000
    4e24:	0bad0004 	.word	0x0bad0004

00004e28 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e2c:	4b64      	ldr	r3, [pc, #400]	; (4fc0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    4e2e:	4865      	ldr	r0, [pc, #404]	; (4fc4 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e30:	4965      	ldr	r1, [pc, #404]	; (4fc8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    4e32:	2600      	movs	r6, #0
{
    4e34:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4e36:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e38:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e3a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4e3c:	b135      	cbz	r5, 4e4c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4e3e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4e42:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e44:	bf1e      	ittt	ne
    4e46:	601c      	strne	r4, [r3, #0]
    4e48:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4e4a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e4c:	3304      	adds	r3, #4
    4e4e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4e50:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e54:	d1f1      	bne.n	4e3a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e56:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4fc4 <nrfx_gpiote_irq_handler+0x19c>
    4e5a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4e5e:	2b00      	cmp	r3, #0
    4e60:	f000 8091 	beq.w	4f86 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    4e64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e68:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4e6c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4e6e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4e72:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4e76:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4e78:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4e7c:	2700      	movs	r7, #0
            while (latch[i])
    4e7e:	f10d 0910 	add.w	r9, sp, #16
    4e82:	017b      	lsls	r3, r7, #5
    4e84:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4e86:	f04f 0a01 	mov.w	sl, #1
    4e8a:	e049      	b.n	4f20 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    4e8c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e8e:	4a4f      	ldr	r2, [pc, #316]	; (4fcc <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4e90:	fa94 f4a4 	rbit	r4, r4
    4e94:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4e98:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e9a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4e9e:	08e0      	lsrs	r0, r4, #3
    4ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4ea4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4ea6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4eaa:	fa0a fc02 	lsl.w	ip, sl, r2
    4eae:	f819 2000 	ldrb.w	r2, [r9, r0]
    4eb2:	ea22 020c 	bic.w	r2, r2, ip
    4eb6:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4eba:	a803      	add	r0, sp, #12
    4ebc:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4ec0:	0899      	lsrs	r1, r3, #2
    4ec2:	f7ff fd27 	bl	4914 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ec6:	9a03      	ldr	r2, [sp, #12]
    4ec8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4ecc:	074b      	lsls	r3, r1, #29
    4ece:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4ed2:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4ed4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4ed8:	d529      	bpl.n	4f2e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    4eda:	4620      	mov	r0, r4
    4edc:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ede:	b2d5      	uxtb	r5, r2
    4ee0:	f7ff fd30 	bl	4944 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ee4:	a803      	add	r0, sp, #12
    4ee6:	9403      	str	r4, [sp, #12]
    4ee8:	f7ff fd14 	bl	4914 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4eec:	9b03      	ldr	r3, [sp, #12]
    4eee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ef2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4ef6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4efa:	429d      	cmp	r5, r3
    4efc:	d107      	bne.n	4f0e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4efe:	2100      	movs	r1, #0
    4f00:	4620      	mov	r0, r4
    4f02:	f004 f9e4 	bl	92ce <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4f06:	4629      	mov	r1, r5
    4f08:	4620      	mov	r0, r4
    4f0a:	f004 f9e0 	bl	92ce <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f0e:	a803      	add	r0, sp, #12
    4f10:	9403      	str	r4, [sp, #12]
    4f12:	f7ff fcff 	bl	4914 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4f16:	9b03      	ldr	r3, [sp, #12]
    4f18:	fa0a f303 	lsl.w	r3, sl, r3
    4f1c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    4f20:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4f24:	2c00      	cmp	r4, #0
    4f26:	d1b1      	bne.n	4e8c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4f28:	b9cf      	cbnz	r7, 4f5e <nrfx_gpiote_irq_handler+0x136>
    4f2a:	2701      	movs	r7, #1
    4f2c:	e7a9      	b.n	4e82 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4f2e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4f30:	bf0c      	ite	eq
    4f32:	2103      	moveq	r1, #3
    4f34:	2102      	movne	r1, #2
    4f36:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4f38:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4f3a:	f004 f9c8 	bl	92ce <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4f3e:	2d03      	cmp	r5, #3
    4f40:	d004      	beq.n	4f4c <nrfx_gpiote_irq_handler+0x124>
    4f42:	9a01      	ldr	r2, [sp, #4]
    4f44:	2a02      	cmp	r2, #2
    4f46:	d106      	bne.n	4f56 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4f48:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4f4a:	d1e0      	bne.n	4f0e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    4f4c:	4659      	mov	r1, fp
    4f4e:	4620      	mov	r0, r4
    4f50:	f7ff fcf8 	bl	4944 <call_handler>
    4f54:	e7db      	b.n	4f0e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4f56:	2a03      	cmp	r2, #3
    4f58:	d1d9      	bne.n	4f0e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4f5a:	2d02      	cmp	r5, #2
    4f5c:	e7f5      	b.n	4f4a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f5e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    4f62:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4f66:	491a      	ldr	r1, [pc, #104]	; (4fd0 <nrfx_gpiote_irq_handler+0x1a8>)
    4f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f6c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4f70:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4f72:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4f76:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    4f7a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4f7c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4f80:	4313      	orrs	r3, r2
    4f82:	f47f af7b 	bne.w	4e7c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    4f86:	2401      	movs	r4, #1
    while (mask)
    4f88:	b916      	cbnz	r6, 4f90 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4f8a:	b007      	add	sp, #28
    4f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4f90:	fa96 f3a6 	rbit	r3, r6
    4f94:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4f98:	fa04 f203 	lsl.w	r2, r4, r3
    4f9c:	009b      	lsls	r3, r3, #2
    4f9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4fa2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4fa6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4faa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4fae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4fb2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4fb6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4fba:	f7ff fcc3 	bl	4944 <call_handler>
    4fbe:	e7e3      	b.n	4f88 <nrfx_gpiote_irq_handler+0x160>
    4fc0:	40006100 	.word	0x40006100
    4fc4:	40006000 	.word	0x40006000
    4fc8:	40006120 	.word	0x40006120
    4fcc:	200000b0 	.word	0x200000b0
    4fd0:	50000300 	.word	0x50000300

00004fd4 <nvmc_word_write>:
    4fd4:	4a04      	ldr	r2, [pc, #16]	; (4fe8 <nvmc_word_write+0x14>)
    4fd6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4fda:	07db      	lsls	r3, r3, #31
    4fdc:	d5fb      	bpl.n	4fd6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4fde:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4fe0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4fe4:	4770      	bx	lr
    4fe6:	bf00      	nop
    4fe8:	4001e000 	.word	0x4001e000

00004fec <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    4fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4ff0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    4ff2:	fbb0 f3f2 	udiv	r3, r0, r2
    4ff6:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    4ffa:	b973      	cbnz	r3, 501a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    4ffc:	4b08      	ldr	r3, [pc, #32]	; (5020 <nrfx_nvmc_page_erase+0x34>)
    4ffe:	2202      	movs	r2, #2
    5000:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    5004:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5008:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    500c:	07d2      	lsls	r2, r2, #31
    500e:	d5fb      	bpl.n	5008 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    5010:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    5012:	4804      	ldr	r0, [pc, #16]	; (5024 <nrfx_nvmc_page_erase+0x38>)
    5014:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    5018:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    501a:	4803      	ldr	r0, [pc, #12]	; (5028 <nrfx_nvmc_page_erase+0x3c>)
}
    501c:	4770      	bx	lr
    501e:	bf00      	nop
    5020:	4001e000 	.word	0x4001e000
    5024:	0bad0000 	.word	0x0bad0000
    5028:	0bad000a 	.word	0x0bad000a

0000502c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    502c:	b510      	push	{r4, lr}
    502e:	4c05      	ldr	r4, [pc, #20]	; (5044 <nrfx_nvmc_word_write+0x18>)
    5030:	2301      	movs	r3, #1
    5032:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    5036:	f7ff ffcd 	bl	4fd4 <nvmc_word_write>
    503a:	2300      	movs	r3, #0
    503c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    5040:	bd10      	pop	{r4, pc}
    5042:	bf00      	nop
    5044:	4001e000 	.word	0x4001e000

00005048 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5048:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    504a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    504e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    5050:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    5052:	6002      	str	r2, [r0, #0]
}
    5054:	4802      	ldr	r0, [pc, #8]	; (5060 <nrf_gpio_pin_port_decode+0x18>)
    5056:	bf18      	it	ne
    5058:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    505c:	4770      	bx	lr
    505e:	bf00      	nop
    5060:	50000300 	.word	0x50000300

00005064 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    5064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5068:	4e5c      	ldr	r6, [pc, #368]	; (51dc <nrfx_spim_init+0x178>)
{
    506a:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    506c:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    506e:	ea4f 1941 	mov.w	r9, r1, lsl #5
    5072:	eb06 1141 	add.w	r1, r6, r1, lsl #5
{
    5076:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5078:	7f0d      	ldrb	r5, [r1, #28]
    507a:	2d00      	cmp	r5, #0
    507c:	f040 80ac 	bne.w	51d8 <nrfx_spim_init+0x174>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    5080:	f8d0 8000 	ldr.w	r8, [r0]
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5084:	7be5      	ldrb	r5, [r4, #15]
    p_cb->p_context = p_context;
    5086:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5088:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->handler = handler;
    508a:	f846 2009 	str.w	r2, [r6, r9]
    p_cb->ss_active_high = p_config->ss_active_high;
    508e:	7922      	ldrb	r2, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5090:	f365 0300 	bfi	r3, r5, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    5094:	f362 0341 	bfi	r3, r2, #1, #1
    5098:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    509a:	78e3      	ldrb	r3, [r4, #3]
    509c:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
    509e:	f8d0 a000 	ldr.w	sl, [r0]
    if (!p_config->skip_gpio_cfg)
    50a2:	2d00      	cmp	r5, #0
    50a4:	d154      	bne.n	5150 <nrfx_spim_init+0xec>
                    : NRF_GPIO_PIN_S0S1;
    50a6:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
    50a8:	7b21      	ldrb	r1, [r4, #12]
    50aa:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
    50ac:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    50b0:	bf08      	it	eq
    50b2:	2503      	moveq	r5, #3
        nrf_gpio_pin_write(p_config->sck_pin,
    50b4:	2901      	cmp	r1, #1
    50b6:	bf94      	ite	ls
    50b8:	2100      	movls	r1, #0
    50ba:	2101      	movhi	r1, #1
    50bc:	f004 f932 	bl	9324 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
    50c0:	7823      	ldrb	r3, [r4, #0]
    50c2:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50c4:	a801      	add	r0, sp, #4
    50c6:	f7ff ffbf 	bl	5048 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    50ca:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    50cc:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
    50ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    50d2:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
    50d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    50da:	7863      	ldrb	r3, [r4, #1]
    50dc:	2bff      	cmp	r3, #255	; 0xff
    50de:	d014      	beq.n	510a <nrfx_spim_init+0xa6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50e0:	a801      	add	r0, sp, #4
            nrf_gpio_pin_write(p_config->mosi_pin, 0);
    50e2:	9301      	str	r3, [sp, #4]
    50e4:	f7ff ffb0 	bl	5048 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    50e8:	9a01      	ldr	r2, [sp, #4]
    50ea:	2301      	movs	r3, #1
    50ec:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    50ee:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
            nrf_gpio_cfg(p_config->mosi_pin,
    50f2:	7863      	ldrb	r3, [r4, #1]
    50f4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50f6:	a801      	add	r0, sp, #4
    50f8:	f7ff ffa6 	bl	5048 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5102:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    5106:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    510a:	78a3      	ldrb	r3, [r4, #2]
    510c:	2bff      	cmp	r3, #255	; 0xff
    510e:	d00b      	beq.n	5128 <nrfx_spim_init+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5110:	a801      	add	r0, sp, #4
            nrf_gpio_cfg(p_config->miso_pin,
    5112:	7ba1      	ldrb	r1, [r4, #14]
    5114:	9301      	str	r3, [sp, #4]
    5116:	f7ff ff97 	bl	5048 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    511a:	9b01      	ldr	r3, [sp, #4]
    511c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5120:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5124:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    5128:	78e0      	ldrb	r0, [r4, #3]
    512a:	28ff      	cmp	r0, #255	; 0xff
    512c:	d010      	beq.n	5150 <nrfx_spim_init+0xec>
                               p_config->ss_active_high ? 0 : 1);
    512e:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    5130:	f081 0101 	eor.w	r1, r1, #1
    5134:	f004 f8f6 	bl	9324 <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
    5138:	78e3      	ldrb	r3, [r4, #3]
    513a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    513c:	a801      	add	r0, sp, #4
    513e:	f7ff ff83 	bl	5048 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5142:	9b01      	ldr	r3, [sp, #4]
    5144:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5148:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    514c:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    5150:	7c23      	ldrb	r3, [r4, #16]
    5152:	b993      	cbnz	r3, 517a <nrfx_spim_init+0x116>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    5154:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    5156:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    5158:	2bff      	cmp	r3, #255	; 0xff
    515a:	bf18      	it	ne
    515c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    515e:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    5160:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    5164:	bf08      	it	eq
    5166:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    516a:	2bff      	cmp	r3, #255	; 0xff
    516c:	bf08      	it	eq
    516e:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    5172:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    5176:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    517a:	68a3      	ldr	r3, [r4, #8]
    517c:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    5180:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    5182:	7b22      	ldrb	r2, [r4, #12]
    5184:	3b00      	subs	r3, #0
    5186:	bf18      	it	ne
    5188:	2301      	movne	r3, #1
    switch (spi_mode)
    518a:	2a02      	cmp	r2, #2
    518c:	d01e      	beq.n	51cc <nrfx_spim_init+0x168>
    518e:	2a03      	cmp	r2, #3
    5190:	d01f      	beq.n	51d2 <nrfx_spim_init+0x16e>
    5192:	2a01      	cmp	r2, #1
    5194:	d101      	bne.n	519a <nrfx_spim_init+0x136>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    5196:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    519a:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    519e:	79a3      	ldrb	r3, [r4, #6]
    51a0:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    51a4:	2307      	movs	r3, #7
    51a6:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    51aa:	f856 3009 	ldr.w	r3, [r6, r9]
    51ae:	b123      	cbz	r3, 51ba <nrfx_spim_init+0x156>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    51b0:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    51b2:	f340 3007 	sbfx	r0, r0, #12, #8
    51b6:	f7fc fc9f 	bl	1af8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    51ba:	444e      	add	r6, r9
    51bc:	2300      	movs	r3, #0
    51be:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    51c0:	4807      	ldr	r0, [pc, #28]	; (51e0 <nrfx_spim_init+0x17c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    51c2:	2301      	movs	r3, #1
    51c4:	7733      	strb	r3, [r6, #28]
}
    51c6:	b002      	add	sp, #8
    51c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    51cc:	f043 0304 	orr.w	r3, r3, #4
        break;
    51d0:	e7e3      	b.n	519a <nrfx_spim_init+0x136>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    51d2:	f043 0306 	orr.w	r3, r3, #6
        break;
    51d6:	e7e0      	b.n	519a <nrfx_spim_init+0x136>
        return err_code;
    51d8:	4802      	ldr	r0, [pc, #8]	; (51e4 <nrfx_spim_init+0x180>)
    51da:	e7f4      	b.n	51c6 <nrfx_spim_init+0x162>
    51dc:	200038fc 	.word	0x200038fc
    51e0:	0bad0000 	.word	0x0bad0000
    51e4:	0bad0005 	.word	0x0bad0005

000051e8 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    51e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    51ea:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    51ec:	4c20      	ldr	r4, [pc, #128]	; (5270 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    51ee:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    51f0:	015e      	lsls	r6, r3, #5
    51f2:	eb04 1743 	add.w	r7, r4, r3, lsl #5
    51f6:	59a3      	ldr	r3, [r4, r6]
    51f8:	b1b3      	cbz	r3, 5228 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    51fa:	f345 3007 	sbfx	r0, r5, #12, #8
    51fe:	f7fc fc8b 	bl	1b18 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    5202:	4b1c      	ldr	r3, [pc, #112]	; (5274 <nrfx_spim_uninit+0x8c>)
    5204:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    5208:	7f7b      	ldrb	r3, [r7, #29]
    520a:	b16b      	cbz	r3, 5228 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    520c:	2301      	movs	r3, #1
    520e:	616b      	str	r3, [r5, #20]
    5210:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5212:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    5216:	b923      	cbnz	r3, 5222 <nrfx_spim_uninit+0x3a>
    5218:	2001      	movs	r0, #1
    521a:	f003 ff7d 	bl	9118 <nrfx_busy_wait>
    521e:	3f01      	subs	r7, #1
    5220:	d1f7      	bne.n	5212 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    5222:	19a3      	adds	r3, r4, r6
    5224:	2200      	movs	r2, #0
    5226:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    5228:	2300      	movs	r3, #0
    522a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    522e:	19a3      	adds	r3, r4, r6
    5230:	7f9b      	ldrb	r3, [r3, #30]
    5232:	07d8      	lsls	r0, r3, #31
    5234:	d417      	bmi.n	5266 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    5236:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    523a:	1c41      	adds	r1, r0, #1
    523c:	d001      	beq.n	5242 <nrfx_spim_uninit+0x5a>
    nrf_gpio_cfg_default(pin);
    523e:	f004 f863 	bl	9308 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    5242:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    5246:	1c42      	adds	r2, r0, #1
    5248:	d001      	beq.n	524e <nrfx_spim_uninit+0x66>
    nrf_gpio_cfg_default(pin);
    524a:	f004 f85d 	bl	9308 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    524e:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    5252:	1c43      	adds	r3, r0, #1
    5254:	d001      	beq.n	525a <nrfx_spim_uninit+0x72>
    nrf_gpio_cfg_default(pin);
    5256:	f004 f857 	bl	9308 <nrf_gpio_cfg_default>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    525a:	19a3      	adds	r3, r4, r6
    525c:	7fd8      	ldrb	r0, [r3, #31]
    525e:	28ff      	cmp	r0, #255	; 0xff
    5260:	d001      	beq.n	5266 <nrfx_spim_uninit+0x7e>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    5262:	f004 f851 	bl	9308 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    5266:	4434      	add	r4, r6
    5268:	2300      	movs	r3, #0
    526a:	7723      	strb	r3, [r4, #28]
}
    526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    526e:	bf00      	nop
    5270:	200038fc 	.word	0x200038fc
    5274:	00080152 	.word	0x00080152

00005278 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    5278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    527c:	4f36      	ldr	r7, [pc, #216]	; (5358 <nrfx_spim_xfer+0xe0>)
    527e:	7903      	ldrb	r3, [r0, #4]
    5280:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    5284:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    5286:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    528a:	4681      	mov	r9, r0
    528c:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    528e:	015e      	lsls	r6, r3, #5
    5290:	2a00      	cmp	r2, #0
    5292:	d15f      	bne.n	5354 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    5294:	59ba      	ldr	r2, [r7, r6]
    5296:	b12a      	cbz	r2, 52a4 <nrfx_spim_xfer+0x2c>
    5298:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    529c:	bf04      	itt	eq
    529e:	2201      	moveq	r2, #1
    52a0:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    52a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    52a8:	eb07 0c06 	add.w	ip, r7, r6
    52ac:	f10c 0c0c 	add.w	ip, ip, #12
    52b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    52b4:	2101      	movs	r1, #1
    52b6:	4640      	mov	r0, r8
    52b8:	f004 f84a 	bl	9350 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    52bc:	6829      	ldr	r1, [r5, #0]
    52be:	b121      	cbz	r1, 52ca <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    52c0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    52c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    52c8:	d106      	bne.n	52d8 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    52ca:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    52cc:	b152      	cbz	r2, 52e4 <nrfx_spim_xfer+0x6c>
    52ce:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    52d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    52d6:	d005      	beq.n	52e4 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    52d8:	443e      	add	r6, r7
    52da:	2300      	movs	r3, #0
        return err_code;
    52dc:	481f      	ldr	r0, [pc, #124]	; (535c <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    52de:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    52e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    52e4:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    52e8:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    52ea:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    52ee:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    52f0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    52f4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52f8:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    52fa:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52fe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5302:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    5306:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    530a:	bf18      	it	ne
    530c:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    530e:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    5312:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    5316:	bf18      	it	ne
    5318:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    531a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    531e:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5322:	bf04      	itt	eq
    5324:	2101      	moveq	r1, #1
    5326:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    5328:	59b9      	ldr	r1, [r7, r6]
    532a:	b949      	cbnz	r1, 5340 <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    532c:	b912      	cbnz	r2, 5334 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    532e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    5332:	e7fb      	b.n	532c <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    5334:	2100      	movs	r1, #0
    5336:	4640      	mov	r0, r8
    5338:	f004 f80a 	bl	9350 <set_ss_pin_state>
    return err_code;
    533c:	4808      	ldr	r0, [pc, #32]	; (5360 <nrfx_spim_xfer+0xe8>)
}
    533e:	e7cf      	b.n	52e0 <nrfx_spim_xfer+0x68>
    if (!enable)
    5340:	f014 0f04 	tst.w	r4, #4
    5344:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    5348:	bf14      	ite	ne
    534a:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    534e:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    5352:	e7f3      	b.n	533c <nrfx_spim_xfer+0xc4>
        return err_code;
    5354:	4803      	ldr	r0, [pc, #12]	; (5364 <nrfx_spim_xfer+0xec>)
    5356:	e7c3      	b.n	52e0 <nrfx_spim_xfer+0x68>
    5358:	200038fc 	.word	0x200038fc
    535c:	0bad000a 	.word	0x0bad000a
    5360:	0bad0000 	.word	0x0bad0000
    5364:	0bad000b 	.word	0x0bad000b

00005368 <nrfx_spim_1_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
}
#endif

#if NRFX_CHECK(NRFX_SPIM1_ENABLED)
void nrfx_spim_1_irq_handler(void)
{
    536c:	b570      	push	{r4, r5, r6, lr}
    536e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    5372:	b192      	cbz	r2, 539a <nrfx_spim_1_irq_handler+0x32>
    set_ss_pin_state(p_cb, false);
    5374:	4c09      	ldr	r4, [pc, #36]	; (539c <nrfx_spim_1_irq_handler+0x34>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5376:	2500      	movs	r5, #0
    5378:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    537c:	4629      	mov	r1, r5
    537e:	4620      	mov	r0, r4
    5380:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    5384:	f003 ffe4 	bl	9350 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5388:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
    538c:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    538e:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5390:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM1, &m_cb[NRFX_SPIM1_INST_IDX]);
}
    5394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5398:	4718      	bx	r3
}
    539a:	bd70      	pop	{r4, r5, r6, pc}
    539c:	200038fc 	.word	0x200038fc

000053a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    53a0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    53a2:	4c14      	ldr	r4, [pc, #80]	; (53f4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    53a4:	4a14      	ldr	r2, [pc, #80]	; (53f8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    53a6:	4915      	ldr	r1, [pc, #84]	; (53fc <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    53a8:	2303      	movs	r3, #3
    53aa:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    53ac:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    53ae:	4b14      	ldr	r3, [pc, #80]	; (5400 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    53b0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    53b2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    53b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    53b8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    53ba:	2300      	movs	r3, #0
    53bc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    53be:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    53c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    53c2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    53c4:	4a0f      	ldr	r2, [pc, #60]	; (5404 <_DoInit+0x64>)
    53c6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    53c8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    53ca:	2210      	movs	r2, #16
    53cc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    53ce:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    53d0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    53d2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    53d4:	f001 fdff 	bl	6fd6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    53d8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    53dc:	490a      	ldr	r1, [pc, #40]	; (5408 <_DoInit+0x68>)
    53de:	4620      	mov	r0, r4
    53e0:	f001 fdf9 	bl	6fd6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    53e4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    53e8:	2320      	movs	r3, #32
    53ea:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    53ec:	f3bf 8f5f 	dmb	sy
}
    53f0:	bd10      	pop	{r4, pc}
    53f2:	bf00      	nop
    53f4:	2000391c 	.word	0x2000391c
    53f8:	0000acc6 	.word	0x0000acc6
    53fc:	0000accf 	.word	0x0000accf
    5400:	20005314 	.word	0x20005314
    5404:	20005304 	.word	0x20005304
    5408:	0000acd3 	.word	0x0000acd3

0000540c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    540c:	4b0e      	ldr	r3, [pc, #56]	; (5448 <z_sys_init_run_level+0x3c>)
{
    540e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5410:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5414:	3001      	adds	r0, #1
    5416:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    541a:	42a6      	cmp	r6, r4
    541c:	d800      	bhi.n	5420 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    541e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5420:	e9d4 3500 	ldrd	r3, r5, [r4]
    5424:	4628      	mov	r0, r5
    5426:	4798      	blx	r3
		if (dev != NULL) {
    5428:	b165      	cbz	r5, 5444 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    542a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    542c:	b130      	cbz	r0, 543c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    542e:	2800      	cmp	r0, #0
    5430:	bfb8      	it	lt
    5432:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    5434:	28ff      	cmp	r0, #255	; 0xff
    5436:	bfa8      	it	ge
    5438:	20ff      	movge	r0, #255	; 0xff
    543a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    543c:	785a      	ldrb	r2, [r3, #1]
    543e:	f042 0201 	orr.w	r2, r2, #1
    5442:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5444:	3408      	adds	r4, #8
    5446:	e7e8      	b.n	541a <z_sys_init_run_level+0xe>
    5448:	00009dd0 	.word	0x00009dd0

0000544c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    544c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    544e:	4605      	mov	r5, r0
    5450:	b910      	cbnz	r0, 5458 <z_impl_device_get_binding+0xc>
		return NULL;
    5452:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5454:	4620      	mov	r0, r4
    5456:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5458:	7803      	ldrb	r3, [r0, #0]
    545a:	2b00      	cmp	r3, #0
    545c:	d0f9      	beq.n	5452 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    545e:	4c0e      	ldr	r4, [pc, #56]	; (5498 <z_impl_device_get_binding+0x4c>)
    5460:	4e0e      	ldr	r6, [pc, #56]	; (549c <z_impl_device_get_binding+0x50>)
    5462:	42b4      	cmp	r4, r6
    5464:	d108      	bne.n	5478 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    5466:	4c0c      	ldr	r4, [pc, #48]	; (5498 <z_impl_device_get_binding+0x4c>)
    5468:	42b4      	cmp	r4, r6
    546a:	d0f2      	beq.n	5452 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    546c:	4620      	mov	r0, r4
    546e:	f003 ff83 	bl	9378 <z_device_is_ready>
    5472:	b950      	cbnz	r0, 548a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5474:	3418      	adds	r4, #24
    5476:	e7f7      	b.n	5468 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    5478:	4620      	mov	r0, r4
    547a:	f003 ff7d 	bl	9378 <z_device_is_ready>
    547e:	b110      	cbz	r0, 5486 <z_impl_device_get_binding+0x3a>
    5480:	6823      	ldr	r3, [r4, #0]
    5482:	42ab      	cmp	r3, r5
    5484:	d0e6      	beq.n	5454 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5486:	3418      	adds	r4, #24
    5488:	e7eb      	b.n	5462 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    548a:	6821      	ldr	r1, [r4, #0]
    548c:	4628      	mov	r0, r5
    548e:	f001 fdb3 	bl	6ff8 <strcmp>
    5492:	2800      	cmp	r0, #0
    5494:	d1ee      	bne.n	5474 <z_impl_device_get_binding+0x28>
    5496:	e7dd      	b.n	5454 <z_impl_device_get_binding+0x8>
    5498:	00009760 	.word	0x00009760
    549c:	00009820 	.word	0x00009820

000054a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    54a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54a2:	4605      	mov	r5, r0
    54a4:	460e      	mov	r6, r1
	__asm__ volatile(
    54a6:	f04f 0320 	mov.w	r3, #32
    54aa:	f3ef 8711 	mrs	r7, BASEPRI
    54ae:	f383 8812 	msr	BASEPRI_MAX, r3
    54b2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    54b6:	f000 fed3 	bl	6260 <z_impl_z_current_get>
    54ba:	2d04      	cmp	r5, #4
    54bc:	bf96      	itet	ls
    54be:	4b18      	ldrls	r3, [pc, #96]	; (5520 <z_fatal_error+0x80>)
    54c0:	4b18      	ldrhi	r3, [pc, #96]	; (5524 <z_fatal_error+0x84>)
    54c2:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    54c6:	2200      	movs	r2, #0
    54c8:	4604      	mov	r4, r0
    54ca:	9200      	str	r2, [sp, #0]
    54cc:	4816      	ldr	r0, [pc, #88]	; (5528 <z_fatal_error+0x88>)
    54ce:	462a      	mov	r2, r5
    54d0:	2145      	movs	r1, #69	; 0x45
    54d2:	f001 fce4 	bl	6e9e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    54d6:	b13e      	cbz	r6, 54e8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    54d8:	69f3      	ldr	r3, [r6, #28]
    54da:	f3c3 0308 	ubfx	r3, r3, #0, #9
    54de:	b11b      	cbz	r3, 54e8 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
    54e0:	4812      	ldr	r0, [pc, #72]	; (552c <z_fatal_error+0x8c>)
    54e2:	2145      	movs	r1, #69	; 0x45
    54e4:	f001 fcdb 	bl	6e9e <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    54e8:	b134      	cbz	r4, 54f8 <z_fatal_error+0x58>
    54ea:	4620      	mov	r0, r4
    54ec:	f003 ff5b 	bl	93a6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    54f0:	4603      	mov	r3, r0
    54f2:	b108      	cbz	r0, 54f8 <z_fatal_error+0x58>
    54f4:	7802      	ldrb	r2, [r0, #0]
    54f6:	b902      	cbnz	r2, 54fa <z_fatal_error+0x5a>
		thread_name = "unknown";
    54f8:	4b0d      	ldr	r3, [pc, #52]	; (5530 <z_fatal_error+0x90>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    54fa:	480e      	ldr	r0, [pc, #56]	; (5534 <z_fatal_error+0x94>)
    54fc:	4622      	mov	r2, r4
    54fe:	2145      	movs	r1, #69	; 0x45
    5500:	f001 fccd 	bl	6e9e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5504:	4631      	mov	r1, r6
    5506:	4628      	mov	r0, r5
    5508:	f7fe fc2e 	bl	3d68 <k_sys_fatal_error_handler>
	__asm__ volatile(
    550c:	f387 8811 	msr	BASEPRI, r7
    5510:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5514:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5516:	b003      	add	sp, #12
    5518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    551c:	f7fc be46 	b.w	21ac <z_impl_k_thread_abort>
    5520:	00009de8 	.word	0x00009de8
    5524:	0000acda 	.word	0x0000acda
    5528:	0000acf0 	.word	0x0000acf0
    552c:	0000ad1d 	.word	0x0000ad1d
    5530:	0000ace8 	.word	0x0000ace8
    5534:	0000ad43 	.word	0x0000ad43

00005538 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5538:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    553a:	4b0a      	ldr	r3, [pc, #40]	; (5564 <bg_thread_main+0x2c>)
    553c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    553e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5540:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5542:	f7ff ff63 	bl	540c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5546:	f001 f8df 	bl	6708 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    554a:	2003      	movs	r0, #3
    554c:	f7ff ff5e 	bl	540c <z_sys_init_run_level>

	z_init_static_threads();
    5550:	f000 f912 	bl	5778 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5554:	f7fa ff42 	bl	3dc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5558:	4a03      	ldr	r2, [pc, #12]	; (5568 <bg_thread_main+0x30>)
    555a:	7b13      	ldrb	r3, [r2, #12]
    555c:	f023 0301 	bic.w	r3, r3, #1
    5560:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5562:	bd08      	pop	{r3, pc}
    5564:	20005714 	.word	0x20005714
    5568:	20000220 	.word	0x20000220

0000556c <z_bss_zero>:
{
    556c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    556e:	4803      	ldr	r0, [pc, #12]	; (557c <z_bss_zero+0x10>)
    5570:	4a03      	ldr	r2, [pc, #12]	; (5580 <z_bss_zero+0x14>)
    5572:	2100      	movs	r1, #0
    5574:	1a12      	subs	r2, r2, r0
    5576:	f003 ff09 	bl	938c <z_early_memset>
}
    557a:	bd08      	pop	{r3, pc}
    557c:	20000180 	.word	0x20000180
    5580:	20005718 	.word	0x20005718

00005584 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5584:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5586:	2300      	movs	r3, #0
{
    5588:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    558a:	2201      	movs	r2, #1
    558c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5590:	4e11      	ldr	r6, [pc, #68]	; (55d8 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5592:	4d12      	ldr	r5, [pc, #72]	; (55dc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    5594:	9301      	str	r3, [sp, #4]
    5596:	220f      	movs	r2, #15
    5598:	e9cd 3202 	strd	r3, r2, [sp, #8]
    559c:	4910      	ldr	r1, [pc, #64]	; (55e0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    559e:	2318      	movs	r3, #24
    55a0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    55a4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
    55a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    55ac:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    55ae:	fb02 1100 	mla	r1, r2, r0, r1
    55b2:	4b0c      	ldr	r3, [pc, #48]	; (55e4 <z_init_cpu+0x60>)
    55b4:	9500      	str	r5, [sp, #0]
    55b6:	4630      	mov	r0, r6
    55b8:	f000 f882 	bl	56c0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    55bc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    55be:	480a      	ldr	r0, [pc, #40]	; (55e8 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    55c0:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    55c2:	3401      	adds	r4, #1
    55c4:	f023 0304 	bic.w	r3, r3, #4
    55c8:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    55cc:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    55ce:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    55d0:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    55d2:	b006      	add	sp, #24
    55d4:	bd70      	pop	{r4, r5, r6, pc}
    55d6:	bf00      	nop
    55d8:	200001a0 	.word	0x200001a0
    55dc:	200039c4 	.word	0x200039c4
    55e0:	20007f18 	.word	0x20007f18
    55e4:	000093af 	.word	0x000093af
    55e8:	20008058 	.word	0x20008058

000055ec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    55ec:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    55ee:	4b2d      	ldr	r3, [pc, #180]	; (56a4 <z_cstart+0xb8>)
    55f0:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    55f2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    55f6:	4d2c      	ldr	r5, [pc, #176]	; (56a8 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    55f8:	4e2c      	ldr	r6, [pc, #176]	; (56ac <z_cstart+0xc0>)
    55fa:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    55fc:	4f2c      	ldr	r7, [pc, #176]	; (56b0 <z_cstart+0xc4>)
    55fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5602:	2400      	movs	r4, #0
    5604:	616b      	str	r3, [r5, #20]
    5606:	23e0      	movs	r3, #224	; 0xe0
    5608:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    560c:	77ec      	strb	r4, [r5, #31]
    560e:	762c      	strb	r4, [r5, #24]
    5610:	766c      	strb	r4, [r5, #25]
    5612:	76ac      	strb	r4, [r5, #26]
    5614:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5618:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    561a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    561e:	626b      	str	r3, [r5, #36]	; 0x24
    5620:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5624:	f7fc fd36 	bl	2094 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5628:	f7fc fa1a 	bl	1a60 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    562c:	f04f 33ff 	mov.w	r3, #4294967295
    5630:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5632:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5634:	f7fc fe4c 	bl	22d0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5638:	f7fc fdce 	bl	21d8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    563c:	f240 1301 	movw	r3, #257	; 0x101
    5640:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5644:	ab06      	add	r3, sp, #24
    5646:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5648:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    564c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    564e:	f003 fe92 	bl	9376 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5652:	4620      	mov	r0, r4
    5654:	f7ff feda 	bl	540c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5658:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    565a:	4d16      	ldr	r5, [pc, #88]	; (56b4 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    565c:	f7ff fed6 	bl	540c <z_sys_init_run_level>
	z_sched_init();
    5660:	f000 fd50 	bl	6104 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5664:	4b14      	ldr	r3, [pc, #80]	; (56b8 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    5666:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5668:	9305      	str	r3, [sp, #20]
    566a:	2301      	movs	r3, #1
    566c:	4913      	ldr	r1, [pc, #76]	; (56bc <z_cstart+0xd0>)
    566e:	9400      	str	r4, [sp, #0]
    5670:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5674:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5678:	463b      	mov	r3, r7
    567a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    567e:	4628      	mov	r0, r5
    5680:	f000 f81e 	bl	56c0 <z_setup_new_thread>
    5684:	7b6a      	ldrb	r2, [r5, #13]
    5686:	4606      	mov	r6, r0
    5688:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    568c:	4628      	mov	r0, r5
    568e:	736a      	strb	r2, [r5, #13]
    5690:	f003 ff26 	bl	94e0 <z_ready_thread>
	z_init_cpu(0);
    5694:	4620      	mov	r0, r4
    5696:	f7ff ff75 	bl	5584 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    569a:	463a      	mov	r2, r7
    569c:	4631      	mov	r1, r6
    569e:	4628      	mov	r0, r5
    56a0:	f7fc fafe 	bl	1ca0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    56a4:	20008858 	.word	0x20008858
    56a8:	e000ed00 	.word	0xe000ed00
    56ac:	200039c4 	.word	0x200039c4
    56b0:	00005539 	.word	0x00005539
    56b4:	20000220 	.word	0x20000220
    56b8:	0000adaa 	.word	0x0000adaa
    56bc:	20005718 	.word	0x20005718

000056c0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    56c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    56c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    56c6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    56c8:	2604      	movs	r6, #4
    56ca:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    56cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    56ce:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    56d0:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56d4:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    56d6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    56dc:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56de:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    56e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    56e6:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    56ea:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    56ec:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    56ee:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56f0:	9202      	str	r2, [sp, #8]
    56f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    56f4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    56f6:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    56fc:	9200      	str	r2, [sp, #0]
    56fe:	4642      	mov	r2, r8
{
    5700:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5702:	f7fc fab1 	bl	1c68 <arch_new_thread>
	if (!_current) {
    5706:	4b05      	ldr	r3, [pc, #20]	; (571c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5708:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    570a:	689b      	ldr	r3, [r3, #8]
    570c:	b103      	cbz	r3, 5710 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5710:	6723      	str	r3, [r4, #112]	; 0x70
}
    5712:	4640      	mov	r0, r8
    5714:	b004      	add	sp, #16
    5716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    571a:	bf00      	nop
    571c:	200039c4 	.word	0x200039c4

00005720 <z_impl_k_thread_create>:
{
    5720:	b5f0      	push	{r4, r5, r6, r7, lr}
    5722:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5724:	2700      	movs	r7, #0
    5726:	9705      	str	r7, [sp, #20]
    5728:	9f10      	ldr	r7, [sp, #64]	; 0x40
    572a:	9704      	str	r7, [sp, #16]
    572c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    572e:	9703      	str	r7, [sp, #12]
    5730:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    5732:	9702      	str	r7, [sp, #8]
{
    5734:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5738:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    573a:	9701      	str	r7, [sp, #4]
    573c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    573e:	9700      	str	r7, [sp, #0]
{
    5740:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5742:	f7ff ffbd 	bl	56c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5746:	f1b5 3fff 	cmp.w	r5, #4294967295
    574a:	bf08      	it	eq
    574c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5750:	d005      	beq.n	575e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5752:	ea55 0306 	orrs.w	r3, r5, r6
    5756:	d105      	bne.n	5764 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5758:	4620      	mov	r0, r4
    575a:	f000 fbcd 	bl	5ef8 <z_sched_start>
}
    575e:	4620      	mov	r0, r4
    5760:	b007      	add	sp, #28
    5762:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5764:	4903      	ldr	r1, [pc, #12]	; (5774 <z_impl_k_thread_create+0x54>)
    5766:	4632      	mov	r2, r6
    5768:	462b      	mov	r3, r5
    576a:	f104 0018 	add.w	r0, r4, #24
    576e:	f000 fe45 	bl	63fc <z_add_timeout>
    5772:	e7f4      	b.n	575e <z_impl_k_thread_create+0x3e>
    5774:	00009501 	.word	0x00009501

00005778 <z_init_static_threads>:
{
    5778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    577c:	4c29      	ldr	r4, [pc, #164]	; (5824 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    577e:	4d2a      	ldr	r5, [pc, #168]	; (5828 <z_init_static_threads+0xb0>)
{
    5780:	b087      	sub	sp, #28
    5782:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5784:	42ae      	cmp	r6, r5
    5786:	f104 0430 	add.w	r4, r4, #48	; 0x30
    578a:	d30f      	bcc.n	57ac <z_init_static_threads+0x34>
	k_sched_lock();
    578c:	f000 face 	bl	5d2c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5790:	4c24      	ldr	r4, [pc, #144]	; (5824 <z_init_static_threads+0xac>)
    5792:	f8df 9098 	ldr.w	r9, [pc, #152]	; 582c <z_init_static_threads+0xb4>
    5796:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    579a:	f240 37e7 	movw	r7, #999	; 0x3e7
    579e:	42ac      	cmp	r4, r5
    57a0:	d320      	bcc.n	57e4 <z_init_static_threads+0x6c>
}
    57a2:	b007      	add	sp, #28
    57a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    57a8:	f000 bc90 	b.w	60cc <k_sched_unlock>
		z_setup_new_thread(
    57ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
    57b0:	9305      	str	r3, [sp, #20]
    57b2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    57b6:	9304      	str	r3, [sp, #16]
    57b8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    57bc:	9303      	str	r3, [sp, #12]
    57be:	f854 3c18 	ldr.w	r3, [r4, #-24]
    57c2:	9302      	str	r3, [sp, #8]
    57c4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    57c8:	9301      	str	r3, [sp, #4]
    57ca:	f854 3c20 	ldr.w	r3, [r4, #-32]
    57ce:	9300      	str	r3, [sp, #0]
    57d0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    57d4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    57d8:	f7ff ff72 	bl	56c0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    57dc:	f854 3c30 	ldr.w	r3, [r4, #-48]
    57e0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    57e2:	e7ce      	b.n	5782 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    57e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57e6:	1c5a      	adds	r2, r3, #1
    57e8:	d00d      	beq.n	5806 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    57ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    57ee:	2100      	movs	r1, #0
    57f0:	4638      	mov	r0, r7
    57f2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    57f6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    57fa:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    57fe:	d104      	bne.n	580a <z_init_static_threads+0x92>
	z_sched_start(thread);
    5800:	4640      	mov	r0, r8
    5802:	f000 fb79 	bl	5ef8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5806:	3430      	adds	r4, #48	; 0x30
    5808:	e7c9      	b.n	579e <z_init_static_threads+0x26>
    580a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    580e:	2300      	movs	r3, #0
    5810:	f7fa fc76 	bl	100 <__aeabi_uldivmod>
    5814:	4602      	mov	r2, r0
    5816:	460b      	mov	r3, r1
    5818:	f108 0018 	add.w	r0, r8, #24
    581c:	4649      	mov	r1, r9
    581e:	f000 fded 	bl	63fc <z_add_timeout>
    5822:	e7f0      	b.n	5806 <z_init_static_threads+0x8e>
    5824:	20000148 	.word	0x20000148
    5828:	20000148 	.word	0x20000148
    582c:	00009501 	.word	0x00009501

00005830 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5834:	4604      	mov	r4, r0
    5836:	4617      	mov	r7, r2
    5838:	461e      	mov	r6, r3
	__asm__ volatile(
    583a:	f04f 0320 	mov.w	r3, #32
    583e:	f3ef 8811 	mrs	r8, BASEPRI
    5842:	f383 8812 	msr	BASEPRI_MAX, r3
    5846:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    584a:	68c3      	ldr	r3, [r0, #12]
    584c:	4a32      	ldr	r2, [pc, #200]	; (5918 <z_impl_k_mutex_lock+0xe8>)
    584e:	b16b      	cbz	r3, 586c <z_impl_k_mutex_lock+0x3c>
    5850:	6880      	ldr	r0, [r0, #8]
    5852:	6891      	ldr	r1, [r2, #8]
    5854:	4288      	cmp	r0, r1
    5856:	d019      	beq.n	588c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5858:	ea57 0306 	orrs.w	r3, r7, r6
    585c:	d118      	bne.n	5890 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    585e:	f388 8811 	msr	BASEPRI, r8
    5862:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5866:	f06f 000f 	mvn.w	r0, #15
    586a:	e00c      	b.n	5886 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    586c:	6891      	ldr	r1, [r2, #8]
    586e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5872:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5874:	3301      	adds	r3, #1
    5876:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5878:	6893      	ldr	r3, [r2, #8]
    587a:	60a3      	str	r3, [r4, #8]
    587c:	f388 8811 	msr	BASEPRI, r8
    5880:	f3bf 8f6f 	isb	sy
		return 0;
    5884:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5886:	b002      	add	sp, #8
    5888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    588c:	6921      	ldr	r1, [r4, #16]
    588e:	e7f0      	b.n	5872 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5890:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5894:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5898:	4299      	cmp	r1, r3
    589a:	bfa8      	it	ge
    589c:	4619      	movge	r1, r3
    589e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    58a2:	4291      	cmp	r1, r2
    58a4:	bfb8      	it	lt
    58a6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    58a8:	428b      	cmp	r3, r1
    58aa:	dd2e      	ble.n	590a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    58ac:	f003 fd8b 	bl	93c6 <adjust_owner_prio.isra.0>
    58b0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    58b2:	e9cd 7600 	strd	r7, r6, [sp]
    58b6:	4819      	ldr	r0, [pc, #100]	; (591c <z_impl_k_mutex_lock+0xec>)
    58b8:	4622      	mov	r2, r4
    58ba:	4641      	mov	r1, r8
    58bc:	f000 fb78 	bl	5fb0 <z_pend_curr>
	if (got_mutex == 0) {
    58c0:	2800      	cmp	r0, #0
    58c2:	d0e0      	beq.n	5886 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    58c4:	f04f 0320 	mov.w	r3, #32
    58c8:	f3ef 8611 	mrs	r6, BASEPRI
    58cc:	f383 8812 	msr	BASEPRI_MAX, r3
    58d0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    58d4:	6823      	ldr	r3, [r4, #0]
    58d6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58d8:	429c      	cmp	r4, r3
    58da:	d00a      	beq.n	58f2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    58dc:	b14b      	cbz	r3, 58f2 <z_impl_k_mutex_lock+0xc2>
    58de:	f993 300e 	ldrsb.w	r3, [r3, #14]
    58e2:	4299      	cmp	r1, r3
    58e4:	bfa8      	it	ge
    58e6:	4619      	movge	r1, r3
    58e8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    58ec:	4299      	cmp	r1, r3
    58ee:	bfb8      	it	lt
    58f0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    58f2:	68a0      	ldr	r0, [r4, #8]
    58f4:	f003 fd67 	bl	93c6 <adjust_owner_prio.isra.0>
    58f8:	b900      	cbnz	r0, 58fc <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    58fa:	b145      	cbz	r5, 590e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    58fc:	4807      	ldr	r0, [pc, #28]	; (591c <z_impl_k_mutex_lock+0xec>)
    58fe:	4631      	mov	r1, r6
    5900:	f000 fa02 	bl	5d08 <z_reschedule>
	return -EAGAIN;
    5904:	f06f 000a 	mvn.w	r0, #10
    5908:	e7bd      	b.n	5886 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    590a:	2500      	movs	r5, #0
    590c:	e7d1      	b.n	58b2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    590e:	f386 8811 	msr	BASEPRI, r6
    5912:	f3bf 8f6f 	isb	sy
    5916:	e7f5      	b.n	5904 <z_impl_k_mutex_lock+0xd4>
    5918:	200039c4 	.word	0x200039c4
    591c:	20005715 	.word	0x20005715

00005920 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5920:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5922:	6883      	ldr	r3, [r0, #8]
{
    5924:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5926:	2b00      	cmp	r3, #0
    5928:	d032      	beq.n	5990 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    592a:	4a1c      	ldr	r2, [pc, #112]	; (599c <z_impl_k_mutex_unlock+0x7c>)
    592c:	6892      	ldr	r2, [r2, #8]
    592e:	4293      	cmp	r3, r2
    5930:	d131      	bne.n	5996 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5932:	7bda      	ldrb	r2, [r3, #15]
    5934:	3a01      	subs	r2, #1
    5936:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5938:	68c3      	ldr	r3, [r0, #12]
    593a:	2b01      	cmp	r3, #1
    593c:	d905      	bls.n	594a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    593e:	3b01      	subs	r3, #1
    5940:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5942:	f000 fbc3 	bl	60cc <k_sched_unlock>

	return 0;
    5946:	2000      	movs	r0, #0
}
    5948:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    594a:	f04f 0320 	mov.w	r3, #32
    594e:	f3ef 8511 	mrs	r5, BASEPRI
    5952:	f383 8812 	msr	BASEPRI_MAX, r3
    5956:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    595a:	6901      	ldr	r1, [r0, #16]
    595c:	6880      	ldr	r0, [r0, #8]
    595e:	f003 fd32 	bl	93c6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5962:	4620      	mov	r0, r4
    5964:	f003 fe2d 	bl	95c2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5968:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    596a:	b158      	cbz	r0, 5984 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    596c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5970:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5972:	2200      	movs	r2, #0
    5974:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5976:	f003 fdb3 	bl	94e0 <z_ready_thread>
		z_reschedule(&lock, key);
    597a:	4809      	ldr	r0, [pc, #36]	; (59a0 <z_impl_k_mutex_unlock+0x80>)
    597c:	4629      	mov	r1, r5
    597e:	f000 f9c3 	bl	5d08 <z_reschedule>
    5982:	e7de      	b.n	5942 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5984:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5986:	f385 8811 	msr	BASEPRI, r5
    598a:	f3bf 8f6f 	isb	sy
    598e:	e7d8      	b.n	5942 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5990:	f06f 0015 	mvn.w	r0, #21
    5994:	e7d8      	b.n	5948 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    5996:	f04f 30ff 	mov.w	r0, #4294967295
    599a:	e7d5      	b.n	5948 <z_impl_k_mutex_unlock+0x28>
    599c:	200039c4 	.word	0x200039c4
    59a0:	20005715 	.word	0x20005715

000059a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    59a4:	b538      	push	{r3, r4, r5, lr}
    59a6:	4604      	mov	r4, r0
	__asm__ volatile(
    59a8:	f04f 0320 	mov.w	r3, #32
    59ac:	f3ef 8511 	mrs	r5, BASEPRI
    59b0:	f383 8812 	msr	BASEPRI_MAX, r3
    59b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    59b8:	f003 fe03 	bl	95c2 <z_unpend_first_thread>

	if (thread != NULL) {
    59bc:	b148      	cbz	r0, 59d2 <z_impl_k_sem_give+0x2e>
    59be:	2200      	movs	r2, #0
    59c0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    59c2:	f003 fd8d 	bl	94e0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    59c6:	4629      	mov	r1, r5
    59c8:	4805      	ldr	r0, [pc, #20]	; (59e0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    59ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    59ce:	f000 b99b 	b.w	5d08 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    59d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    59d6:	429a      	cmp	r2, r3
    59d8:	bf18      	it	ne
    59da:	3301      	addne	r3, #1
    59dc:	60a3      	str	r3, [r4, #8]
}
    59de:	e7f2      	b.n	59c6 <z_impl_k_sem_give+0x22>
    59e0:	20005715 	.word	0x20005715

000059e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    59e4:	b513      	push	{r0, r1, r4, lr}
    59e6:	f04f 0420 	mov.w	r4, #32
    59ea:	f3ef 8111 	mrs	r1, BASEPRI
    59ee:	f384 8812 	msr	BASEPRI_MAX, r4
    59f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    59f6:	6884      	ldr	r4, [r0, #8]
    59f8:	b144      	cbz	r4, 5a0c <z_impl_k_sem_take+0x28>
		sem->count--;
    59fa:	3c01      	subs	r4, #1
    59fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    59fe:	f381 8811 	msr	BASEPRI, r1
    5a02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5a06:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5a08:	b002      	add	sp, #8
    5a0a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5a0c:	ea52 0403 	orrs.w	r4, r2, r3
    5a10:	d106      	bne.n	5a20 <z_impl_k_sem_take+0x3c>
    5a12:	f381 8811 	msr	BASEPRI, r1
    5a16:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5a1a:	f06f 000f 	mvn.w	r0, #15
    5a1e:	e7f3      	b.n	5a08 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5a20:	e9cd 2300 	strd	r2, r3, [sp]
    5a24:	4602      	mov	r2, r0
    5a26:	4802      	ldr	r0, [pc, #8]	; (5a30 <z_impl_k_sem_take+0x4c>)
    5a28:	f000 fac2 	bl	5fb0 <z_pend_curr>
	return ret;
    5a2c:	e7ec      	b.n	5a08 <z_impl_k_sem_take+0x24>
    5a2e:	bf00      	nop
    5a30:	20005715 	.word	0x20005715

00005a34 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    5a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    5a38:	4e47      	ldr	r6, [pc, #284]	; (5b58 <work_queue_main+0x124>)
    5a3a:	b085      	sub	sp, #20
    5a3c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    5a3e:	f04f 38ff 	mov.w	r8, #4294967295
    5a42:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    5a46:	f04f 0320 	mov.w	r3, #32
    5a4a:	f3ef 8711 	mrs	r7, BASEPRI
    5a4e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a52:	f3bf 8f6f 	isb	sy
    5a56:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5a5a:	b98d      	cbnz	r5, 5a80 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    5a5c:	2102      	movs	r1, #2
    5a5e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    5a62:	f003 fccb 	bl	93fc <flag_test_and_clear>
    5a66:	2800      	cmp	r0, #0
    5a68:	d135      	bne.n	5ad6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    5a6a:	2300      	movs	r3, #0
    5a6c:	e9cd 8900 	strd	r8, r9, [sp]
    5a70:	9302      	str	r3, [sp, #8]
    5a72:	f104 0288 	add.w	r2, r4, #136	; 0x88
    5a76:	4639      	mov	r1, r7
    5a78:	4838      	ldr	r0, [pc, #224]	; (5b5c <work_queue_main+0x128>)
    5a7a:	f000 fc49 	bl	6310 <z_sched_wait>
			continue;
    5a7e:	e7e2      	b.n	5a46 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5a80:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    5a84:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    5a86:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5a8a:	4295      	cmp	r5, r2
    5a8c:	d101      	bne.n	5a92 <work_queue_main+0x5e>
	list->tail = node;
    5a8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    5a92:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5a96:	f043 0302 	orr.w	r3, r3, #2
    5a9a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    5a9e:	68eb      	ldr	r3, [r5, #12]
    5aa0:	f023 0304 	bic.w	r3, r3, #4
    5aa4:	f043 0301 	orr.w	r3, r3, #1
    5aa8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    5aaa:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    5aac:	f387 8811 	msr	BASEPRI, r7
    5ab0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    5ab4:	4628      	mov	r0, r5
    5ab6:	4798      	blx	r3
	__asm__ volatile(
    5ab8:	f04f 0320 	mov.w	r3, #32
    5abc:	f3ef 8b11 	mrs	fp, BASEPRI
    5ac0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ac4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    5ac8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5aca:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    5acc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5ad0:	d40b      	bmi.n	5aea <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    5ad2:	60ea      	str	r2, [r5, #12]
    5ad4:	e00e      	b.n	5af4 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    5ad6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    5ada:	2200      	movs	r2, #0
    5adc:	2101      	movs	r1, #1
    5ade:	4628      	mov	r0, r5
    5ae0:	f003 fd87 	bl	95f2 <z_sched_wake>
    5ae4:	2800      	cmp	r0, #0
    5ae6:	d1f8      	bne.n	5ada <work_queue_main+0xa6>
    5ae8:	e7bf      	b.n	5a6a <work_queue_main+0x36>
	return list->head;
    5aea:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    5aec:	f023 0303 	bic.w	r3, r3, #3
    5af0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5af2:	b970      	cbnz	r0, 5b12 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    5af4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5af8:	f023 0302 	bic.w	r3, r3, #2
    5afc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    5b00:	f38b 8811 	msr	BASEPRI, fp
    5b04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    5b08:	05d8      	lsls	r0, r3, #23
    5b0a:	d49c      	bmi.n	5a46 <work_queue_main+0x12>
	z_impl_k_yield();
    5b0c:	f000 fb06 	bl	611c <z_impl_k_yield>
}
    5b10:	e799      	b.n	5a46 <work_queue_main+0x12>
	return node->next;
    5b12:	2700      	movs	r7, #0
    5b14:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    5b18:	463b      	mov	r3, r7
		if (wc->work == work) {
    5b1a:	6842      	ldr	r2, [r0, #4]
    5b1c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    5b1e:	4601      	mov	r1, r0
		if (wc->work == work) {
    5b20:	d10c      	bne.n	5b3c <work_queue_main+0x108>
	return node->next;
    5b22:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5b24:	b997      	cbnz	r7, 5b4c <work_queue_main+0x118>
    5b26:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    5b28:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    5b2a:	4282      	cmp	r2, r0
    5b2c:	d100      	bne.n	5b30 <work_queue_main+0xfc>
	list->tail = node;
    5b2e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    5b30:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    5b34:	f7ff ff36 	bl	59a4 <z_impl_k_sem_give>
}
    5b38:	4639      	mov	r1, r7
    5b3a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5b3c:	f1ba 0f00 	cmp.w	sl, #0
    5b40:	d0d8      	beq.n	5af4 <work_queue_main+0xc0>
	return node->next;
    5b42:	4650      	mov	r0, sl
    5b44:	460f      	mov	r7, r1
    5b46:	f8da a000 	ldr.w	sl, [sl]
    5b4a:	e7e6      	b.n	5b1a <work_queue_main+0xe6>
	return list->tail;
    5b4c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    5b4e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    5b50:	4290      	cmp	r0, r2
	list->tail = node;
    5b52:	bf08      	it	eq
    5b54:	6077      	streq	r7, [r6, #4]
}
    5b56:	e7eb      	b.n	5b30 <work_queue_main+0xfc>
    5b58:	200039e8 	.word	0x200039e8
    5b5c:	20005715 	.word	0x20005715

00005b60 <submit_to_queue_locked>:
{
    5b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    5b62:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5b64:	079a      	lsls	r2, r3, #30
{
    5b66:	4604      	mov	r4, r0
    5b68:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5b6a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    5b6e:	d41f      	bmi.n	5bb0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    5b70:	075f      	lsls	r7, r3, #29
    5b72:	d41f      	bmi.n	5bb4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    5b74:	680a      	ldr	r2, [r1, #0]
    5b76:	b90a      	cbnz	r2, 5b7c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    5b78:	6882      	ldr	r2, [r0, #8]
    5b7a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    5b7c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    5b7e:	bf44      	itt	mi
    5b80:	68a3      	ldrmi	r3, [r4, #8]
    5b82:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    5b84:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    5b86:	bf4c      	ite	mi
    5b88:	2502      	movmi	r5, #2
		ret = 1;
    5b8a:	2501      	movpl	r5, #1
	if (queue == NULL) {
    5b8c:	b37f      	cbz	r7, 5bee <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5b8e:	4b1b      	ldr	r3, [pc, #108]	; (5bfc <submit_to_queue_locked+0x9c>)
    5b90:	689b      	ldr	r3, [r3, #8]
    5b92:	42bb      	cmp	r3, r7
    5b94:	d111      	bne.n	5bba <submit_to_queue_locked+0x5a>
    5b96:	f003 fbfd 	bl	9394 <k_is_in_isr>
    5b9a:	f080 0001 	eor.w	r0, r0, #1
    5b9e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    5ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5ba4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    5ba6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5baa:	d523      	bpl.n	5bf4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    5bac:	b13a      	cbz	r2, 5bbe <submit_to_queue_locked+0x5e>
    5bae:	b940      	cbnz	r0, 5bc2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    5bb0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    5bb4:	2300      	movs	r3, #0
    5bb6:	6033      	str	r3, [r6, #0]
	return ret;
    5bb8:	e013      	b.n	5be2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5bba:	2000      	movs	r0, #0
    5bbc:	e7f0      	b.n	5ba0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    5bbe:	071b      	lsls	r3, r3, #28
    5bc0:	d4f6      	bmi.n	5bb0 <submit_to_queue_locked+0x50>
	parent->next = child;
    5bc2:	2300      	movs	r3, #0
    5bc4:	6023      	str	r3, [r4, #0]
	return list->tail;
    5bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    5bca:	b963      	cbnz	r3, 5be6 <submit_to_queue_locked+0x86>
	list->head = node;
    5bcc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    5bd0:	4638      	mov	r0, r7
    5bd2:	f003 fc1e 	bl	9412 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    5bd6:	68e3      	ldr	r3, [r4, #12]
    5bd8:	f043 0304 	orr.w	r3, r3, #4
    5bdc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    5bde:	6833      	ldr	r3, [r6, #0]
    5be0:	60a3      	str	r3, [r4, #8]
}
    5be2:	4628      	mov	r0, r5
    5be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    5be6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5be8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    5bec:	e7f0      	b.n	5bd0 <submit_to_queue_locked+0x70>
		return -EINVAL;
    5bee:	f06f 0515 	mvn.w	r5, #21
    5bf2:	e7df      	b.n	5bb4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    5bf4:	f06f 0512 	mvn.w	r5, #18
    5bf8:	e7dc      	b.n	5bb4 <submit_to_queue_locked+0x54>
    5bfa:	bf00      	nop
    5bfc:	200039c4 	.word	0x200039c4

00005c00 <k_work_submit>:
{
    5c00:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    5c02:	4801      	ldr	r0, [pc, #4]	; (5c08 <k_work_submit+0x8>)
    5c04:	f003 bc0c 	b.w	9420 <k_work_submit_to_queue>
    5c08:	200002a8 	.word	0x200002a8

00005c0c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    5c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c0e:	b089      	sub	sp, #36	; 0x24
    5c10:	4604      	mov	r4, r0
	list->head = NULL;
    5c12:	2000      	movs	r0, #0
	list->tail = NULL;
    5c14:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    5c18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5c1a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    5c1e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    5c22:	f104 0090 	add.w	r0, r4, #144	; 0x90
    5c26:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    5c2a:	b31d      	cbz	r5, 5c74 <k_work_queue_start+0x68>
    5c2c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    5c2e:	2800      	cmp	r0, #0
    5c30:	f240 1001 	movw	r0, #257	; 0x101
    5c34:	bf08      	it	eq
    5c36:	2001      	moveq	r0, #1
	*flagp = flags;
    5c38:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5c3c:	2000      	movs	r0, #0
    5c3e:	f04f 36ff 	mov.w	r6, #4294967295
    5c42:	f04f 37ff 	mov.w	r7, #4294967295
    5c46:	e9cd 3003 	strd	r3, r0, [sp, #12]
    5c4a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    5c4e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    5c52:	4b09      	ldr	r3, [pc, #36]	; (5c78 <k_work_queue_start+0x6c>)
    5c54:	9400      	str	r4, [sp, #0]
    5c56:	4620      	mov	r0, r4
    5c58:	f7ff fd62 	bl	5720 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    5c5c:	b125      	cbz	r5, 5c68 <k_work_queue_start+0x5c>
    5c5e:	6829      	ldr	r1, [r5, #0]
    5c60:	b111      	cbz	r1, 5c68 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    5c62:	4620      	mov	r0, r4
    5c64:	f003 fb9c 	bl	93a0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    5c68:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    5c6a:	b009      	add	sp, #36	; 0x24
    5c6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5c70:	f003 bb9b 	b.w	93aa <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5c74:	2001      	movs	r0, #1
    5c76:	e7df      	b.n	5c38 <k_work_queue_start+0x2c>
    5c78:	00005a35 	.word	0x00005a35

00005c7c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5c7c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5c7e:	4d07      	ldr	r5, [pc, #28]	; (5c9c <z_reset_time_slice+0x20>)
    5c80:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5c82:	b154      	cbz	r4, 5c9a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5c84:	f7fe f806 	bl	3c94 <sys_clock_elapsed>
    5c88:	4b05      	ldr	r3, [pc, #20]	; (5ca0 <z_reset_time_slice+0x24>)
    5c8a:	4404      	add	r4, r0
    5c8c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5c8e:	6828      	ldr	r0, [r5, #0]
    5c90:	2100      	movs	r1, #0
	}
}
    5c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5c96:	f003 bcdf 	b.w	9658 <z_set_timeout_expiry>
}
    5c9a:	bd38      	pop	{r3, r4, r5, pc}
    5c9c:	200039f8 	.word	0x200039f8
    5ca0:	200039c4 	.word	0x200039c4

00005ca4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca6:	4604      	mov	r4, r0
    5ca8:	460d      	mov	r5, r1
	__asm__ volatile(
    5caa:	f04f 0320 	mov.w	r3, #32
    5cae:	f3ef 8711 	mrs	r7, BASEPRI
    5cb2:	f383 8812 	msr	BASEPRI_MAX, r3
    5cb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5cba:	4e10      	ldr	r6, [pc, #64]	; (5cfc <k_sched_time_slice_set+0x58>)
    5cbc:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5cbe:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5cc2:	f240 30e7 	movw	r0, #999	; 0x3e7
    5cc6:	6131      	str	r1, [r6, #16]
    5cc8:	2300      	movs	r3, #0
    5cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5cce:	fbe4 010c 	umlal	r0, r1, r4, ip
    5cd2:	f7fa fa15 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5cd6:	2c00      	cmp	r4, #0
    5cd8:	4b09      	ldr	r3, [pc, #36]	; (5d00 <k_sched_time_slice_set+0x5c>)
    5cda:	dc0a      	bgt.n	5cf2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5cdc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5cde:	4b09      	ldr	r3, [pc, #36]	; (5d04 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5ce0:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    5ce2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5ce4:	f7ff ffca 	bl	5c7c <z_reset_time_slice>
	__asm__ volatile(
    5ce8:	f387 8811 	msr	BASEPRI, r7
    5cec:	f3bf 8f6f 	isb	sy
	}
}
    5cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    5cf2:	2802      	cmp	r0, #2
    5cf4:	bfb8      	it	lt
    5cf6:	2002      	movlt	r0, #2
    5cf8:	e7f0      	b.n	5cdc <k_sched_time_slice_set+0x38>
    5cfa:	bf00      	nop
    5cfc:	200039c4 	.word	0x200039c4
    5d00:	200039f8 	.word	0x200039f8
    5d04:	200039f4 	.word	0x200039f4

00005d08 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5d08:	b949      	cbnz	r1, 5d1e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5d0a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    5d0e:	b930      	cbnz	r0, 5d1e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5d10:	4b05      	ldr	r3, [pc, #20]	; (5d28 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5d12:	699a      	ldr	r2, [r3, #24]
    5d14:	689b      	ldr	r3, [r3, #8]
    5d16:	429a      	cmp	r2, r3
    5d18:	d001      	beq.n	5d1e <z_reschedule+0x16>
	ret = arch_swap(key);
    5d1a:	f7fb bf57 	b.w	1bcc <arch_swap>
    5d1e:	f381 8811 	msr	BASEPRI, r1
    5d22:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5d26:	4770      	bx	lr
    5d28:	200039c4 	.word	0x200039c4

00005d2c <k_sched_lock>:
	__asm__ volatile(
    5d2c:	f04f 0320 	mov.w	r3, #32
    5d30:	f3ef 8111 	mrs	r1, BASEPRI
    5d34:	f383 8812 	msr	BASEPRI_MAX, r3
    5d38:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    5d3c:	4b04      	ldr	r3, [pc, #16]	; (5d50 <k_sched_lock+0x24>)
    5d3e:	689a      	ldr	r2, [r3, #8]
    5d40:	7bd3      	ldrb	r3, [r2, #15]
    5d42:	3b01      	subs	r3, #1
    5d44:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5d46:	f381 8811 	msr	BASEPRI, r1
    5d4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5d4e:	4770      	bx	lr
    5d50:	200039c4 	.word	0x200039c4

00005d54 <update_cache>:
{
    5d54:	b538      	push	{r3, r4, r5, lr}
    5d56:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5d58:	480c      	ldr	r0, [pc, #48]	; (5d8c <update_cache+0x38>)
    5d5a:	4d0d      	ldr	r5, [pc, #52]	; (5d90 <update_cache+0x3c>)
    5d5c:	f003 fbba 	bl	94d4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5d60:	4604      	mov	r4, r0
    5d62:	b900      	cbnz	r0, 5d66 <update_cache+0x12>
    5d64:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5d66:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5d68:	b94a      	cbnz	r2, 5d7e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5d6a:	7b5a      	ldrb	r2, [r3, #13]
    5d6c:	06d2      	lsls	r2, r2, #27
    5d6e:	d106      	bne.n	5d7e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5d70:	69a2      	ldr	r2, [r4, #24]
    5d72:	b922      	cbnz	r2, 5d7e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5d74:	89da      	ldrh	r2, [r3, #14]
    5d76:	2a7f      	cmp	r2, #127	; 0x7f
    5d78:	d901      	bls.n	5d7e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5d7a:	61ab      	str	r3, [r5, #24]
}
    5d7c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5d7e:	429c      	cmp	r4, r3
    5d80:	d002      	beq.n	5d88 <update_cache+0x34>
			z_reset_time_slice(thread);
    5d82:	4620      	mov	r0, r4
    5d84:	f7ff ff7a 	bl	5c7c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5d88:	61ac      	str	r4, [r5, #24]
}
    5d8a:	e7f7      	b.n	5d7c <update_cache+0x28>
    5d8c:	200039e0 	.word	0x200039e0
    5d90:	200039c4 	.word	0x200039c4

00005d94 <move_thread_to_end_of_prio_q>:
{
    5d94:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5d96:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5d9a:	7b43      	ldrb	r3, [r0, #13]
    5d9c:	2a00      	cmp	r2, #0
{
    5d9e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5da0:	da04      	bge.n	5dac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5da6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5da8:	f003 fb5c 	bl	9464 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5dac:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5dae:	4a15      	ldr	r2, [pc, #84]	; (5e04 <move_thread_to_end_of_prio_q+0x70>)
    5db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5db4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5db6:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5dba:	f102 051c 	add.w	r5, r2, #28
    5dbe:	42ab      	cmp	r3, r5
    5dc0:	d01b      	beq.n	5dfa <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5dc2:	b1d3      	cbz	r3, 5dfa <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    5dc4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5dc8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5dcc:	4286      	cmp	r6, r0
    5dce:	d00f      	beq.n	5df0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5dd0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5dd2:	2800      	cmp	r0, #0
    5dd4:	dd0c      	ble.n	5df0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5dd6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5dd8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5ddc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5dde:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5de0:	6890      	ldr	r0, [r2, #8]
    5de2:	1a43      	subs	r3, r0, r1
    5de4:	4258      	negs	r0, r3
}
    5de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5dea:	4158      	adcs	r0, r3
    5dec:	f7ff bfb2 	b.w	5d54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5df0:	42a3      	cmp	r3, r4
    5df2:	d002      	beq.n	5dfa <move_thread_to_end_of_prio_q+0x66>
    5df4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5df6:	2b00      	cmp	r3, #0
    5df8:	d1e6      	bne.n	5dc8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    5dfa:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    5dfe:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5e00:	6211      	str	r1, [r2, #32]
}
    5e02:	e7ed      	b.n	5de0 <move_thread_to_end_of_prio_q+0x4c>
    5e04:	200039c4 	.word	0x200039c4

00005e08 <z_time_slice>:
{
    5e08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5e0a:	f04f 0320 	mov.w	r3, #32
    5e0e:	f3ef 8511 	mrs	r5, BASEPRI
    5e12:	f383 8812 	msr	BASEPRI_MAX, r3
    5e16:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5e1a:	4b17      	ldr	r3, [pc, #92]	; (5e78 <z_time_slice+0x70>)
    5e1c:	4a17      	ldr	r2, [pc, #92]	; (5e7c <z_time_slice+0x74>)
    5e1e:	689c      	ldr	r4, [r3, #8]
    5e20:	6811      	ldr	r1, [r2, #0]
    5e22:	428c      	cmp	r4, r1
    5e24:	d107      	bne.n	5e36 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5e26:	4620      	mov	r0, r4
    5e28:	f7ff ff28 	bl	5c7c <z_reset_time_slice>
	__asm__ volatile(
    5e2c:	f385 8811 	msr	BASEPRI, r5
    5e30:	f3bf 8f6f 	isb	sy
}
    5e34:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5e36:	2100      	movs	r1, #0
    5e38:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5e3a:	4a11      	ldr	r2, [pc, #68]	; (5e80 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5e3c:	6812      	ldr	r2, [r2, #0]
    5e3e:	b1c2      	cbz	r2, 5e72 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5e40:	89e2      	ldrh	r2, [r4, #14]
    5e42:	2a7f      	cmp	r2, #127	; 0x7f
    5e44:	d815      	bhi.n	5e72 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5e46:	7b62      	ldrb	r2, [r4, #13]
    5e48:	06d2      	lsls	r2, r2, #27
    5e4a:	d112      	bne.n	5e72 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5e4c:	4a0d      	ldr	r2, [pc, #52]	; (5e84 <z_time_slice+0x7c>)
    5e4e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5e52:	6812      	ldr	r2, [r2, #0]
    5e54:	4291      	cmp	r1, r2
    5e56:	db0c      	blt.n	5e72 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5e58:	4a0b      	ldr	r2, [pc, #44]	; (5e88 <z_time_slice+0x80>)
    5e5a:	4294      	cmp	r4, r2
    5e5c:	d009      	beq.n	5e72 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5e5e:	691a      	ldr	r2, [r3, #16]
    5e60:	4282      	cmp	r2, r0
    5e62:	dc03      	bgt.n	5e6c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5e64:	4620      	mov	r0, r4
    5e66:	f7ff ff95 	bl	5d94 <move_thread_to_end_of_prio_q>
    5e6a:	e7dc      	b.n	5e26 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5e6c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5e6e:	611a      	str	r2, [r3, #16]
    5e70:	e7dc      	b.n	5e2c <z_time_slice+0x24>
    5e72:	2200      	movs	r2, #0
    5e74:	e7fb      	b.n	5e6e <z_time_slice+0x66>
    5e76:	bf00      	nop
    5e78:	200039c4 	.word	0x200039c4
    5e7c:	200039f0 	.word	0x200039f0
    5e80:	200039f8 	.word	0x200039f8
    5e84:	200039f4 	.word	0x200039f4
    5e88:	200001a0 	.word	0x200001a0

00005e8c <ready_thread>:
{
    5e8c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5e8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5e92:	7b43      	ldrb	r3, [r0, #13]
    5e94:	2a00      	cmp	r2, #0
    5e96:	db2a      	blt.n	5eee <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5e98:	06da      	lsls	r2, r3, #27
    5e9a:	d128      	bne.n	5eee <ready_thread+0x62>
    5e9c:	6982      	ldr	r2, [r0, #24]
    5e9e:	bb32      	cbnz	r2, 5eee <ready_thread+0x62>
	return list->head == list;
    5ea0:	4a14      	ldr	r2, [pc, #80]	; (5ef4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ea6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5ea8:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5eac:	f102 051c 	add.w	r5, r2, #28
    5eb0:	42ab      	cmp	r3, r5
    5eb2:	d017      	beq.n	5ee4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5eb4:	b1b3      	cbz	r3, 5ee4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    5eb6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5eba:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5ebe:	428e      	cmp	r6, r1
    5ec0:	d00b      	beq.n	5eda <ready_thread+0x4e>
		return b2 - b1;
    5ec2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ec4:	2900      	cmp	r1, #0
    5ec6:	dd08      	ble.n	5eda <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5ec8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5eca:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5ece:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5ed0:	6058      	str	r0, [r3, #4]
}
    5ed2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5ed4:	2000      	movs	r0, #0
    5ed6:	f7ff bf3d 	b.w	5d54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5eda:	42a3      	cmp	r3, r4
    5edc:	d002      	beq.n	5ee4 <ready_thread+0x58>
    5ede:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d1ea      	bne.n	5eba <ready_thread+0x2e>
	node->prev = tail;
    5ee4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5ee8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5eea:	6210      	str	r0, [r2, #32]
}
    5eec:	e7f1      	b.n	5ed2 <ready_thread+0x46>
}
    5eee:	bc70      	pop	{r4, r5, r6}
    5ef0:	4770      	bx	lr
    5ef2:	bf00      	nop
    5ef4:	200039c4 	.word	0x200039c4

00005ef8 <z_sched_start>:
{
    5ef8:	b510      	push	{r4, lr}
	__asm__ volatile(
    5efa:	f04f 0220 	mov.w	r2, #32
    5efe:	f3ef 8411 	mrs	r4, BASEPRI
    5f02:	f382 8812 	msr	BASEPRI_MAX, r2
    5f06:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5f0a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5f0c:	0751      	lsls	r1, r2, #29
    5f0e:	d404      	bmi.n	5f1a <z_sched_start+0x22>
	__asm__ volatile(
    5f10:	f384 8811 	msr	BASEPRI, r4
    5f14:	f3bf 8f6f 	isb	sy
}
    5f18:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5f1a:	f022 0204 	bic.w	r2, r2, #4
    5f1e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5f20:	f7ff ffb4 	bl	5e8c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5f24:	4621      	mov	r1, r4
    5f26:	4802      	ldr	r0, [pc, #8]	; (5f30 <z_sched_start+0x38>)
}
    5f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5f2c:	f7ff beec 	b.w	5d08 <z_reschedule>
    5f30:	20005715 	.word	0x20005715

00005f34 <unready_thread>:
{
    5f34:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5f36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5f3a:	7b43      	ldrb	r3, [r0, #13]
    5f3c:	2a00      	cmp	r2, #0
{
    5f3e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5f40:	da04      	bge.n	5f4c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5f46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5f48:	f003 fa8c 	bl	9464 <sys_dlist_remove>
	update_cache(thread == _current);
    5f4c:	4b04      	ldr	r3, [pc, #16]	; (5f60 <unready_thread+0x2c>)
    5f4e:	6898      	ldr	r0, [r3, #8]
    5f50:	1a43      	subs	r3, r0, r1
    5f52:	4258      	negs	r0, r3
    5f54:	4158      	adcs	r0, r3
}
    5f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5f5a:	f7ff befb 	b.w	5d54 <update_cache>
    5f5e:	bf00      	nop
    5f60:	200039c4 	.word	0x200039c4

00005f64 <pend>:
{
    5f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f68:	4606      	mov	r6, r0
    5f6a:	4615      	mov	r5, r2
    5f6c:	461c      	mov	r4, r3
	__asm__ volatile(
    5f6e:	f04f 0320 	mov.w	r3, #32
    5f72:	f3ef 8711 	mrs	r7, BASEPRI
    5f76:	f383 8812 	msr	BASEPRI_MAX, r3
    5f7a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5f7e:	f003 fae1 	bl	9544 <add_to_waitq_locked>
	__asm__ volatile(
    5f82:	f387 8811 	msr	BASEPRI, r7
    5f86:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f8a:	f1b4 3fff 	cmp.w	r4, #4294967295
    5f8e:	bf08      	it	eq
    5f90:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5f94:	d008      	beq.n	5fa8 <pend+0x44>
    5f96:	462a      	mov	r2, r5
    5f98:	4623      	mov	r3, r4
    5f9a:	f106 0018 	add.w	r0, r6, #24
    5f9e:	4903      	ldr	r1, [pc, #12]	; (5fac <pend+0x48>)
}
    5fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5fa4:	f000 ba2a 	b.w	63fc <z_add_timeout>
    5fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fac:	00009501 	.word	0x00009501

00005fb0 <z_pend_curr>:
{
    5fb0:	b510      	push	{r4, lr}
	pending_current = _current;
    5fb2:	4b07      	ldr	r3, [pc, #28]	; (5fd0 <z_pend_curr+0x20>)
    5fb4:	6898      	ldr	r0, [r3, #8]
    5fb6:	4b07      	ldr	r3, [pc, #28]	; (5fd4 <z_pend_curr+0x24>)
{
    5fb8:	460c      	mov	r4, r1
	pending_current = _current;
    5fba:	6018      	str	r0, [r3, #0]
{
    5fbc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5fc2:	f7ff ffcf 	bl	5f64 <pend>
    5fc6:	4620      	mov	r0, r4
}
    5fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5fcc:	f7fb bdfe 	b.w	1bcc <arch_swap>
    5fd0:	200039c4 	.word	0x200039c4
    5fd4:	200039f0 	.word	0x200039f0

00005fd8 <z_set_prio>:
{
    5fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fda:	4604      	mov	r4, r0
	__asm__ volatile(
    5fdc:	f04f 0320 	mov.w	r3, #32
    5fe0:	f3ef 8611 	mrs	r6, BASEPRI
    5fe4:	f383 8812 	msr	BASEPRI_MAX, r3
    5fe8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5fec:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5fee:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5ff0:	b249      	sxtb	r1, r1
    5ff2:	d133      	bne.n	605c <z_set_prio+0x84>
		if (need_sched) {
    5ff4:	6982      	ldr	r2, [r0, #24]
    5ff6:	bb8a      	cbnz	r2, 605c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ffc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ffe:	f003 fa31 	bl	9464 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6002:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    6004:	4a17      	ldr	r2, [pc, #92]	; (6064 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    6006:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6008:	f063 037f 	orn	r3, r3, #127	; 0x7f
    600c:	7343      	strb	r3, [r0, #13]
    600e:	4610      	mov	r0, r2
    6010:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6014:	4283      	cmp	r3, r0
    6016:	d01b      	beq.n	6050 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6018:	b1d3      	cbz	r3, 6050 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    601a:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
    601c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    6020:	42a9      	cmp	r1, r5
    6022:	d010      	beq.n	6046 <z_set_prio+0x6e>
		return b2 - b1;
    6024:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6026:	2d00      	cmp	r5, #0
    6028:	dd0d      	ble.n	6046 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    602a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    602c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6030:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6032:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6034:	2001      	movs	r0, #1
    6036:	f7ff fe8d 	bl	5d54 <update_cache>
    603a:	2001      	movs	r0, #1
	__asm__ volatile(
    603c:	f386 8811 	msr	BASEPRI, r6
    6040:	f3bf 8f6f 	isb	sy
}
    6044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6046:	42bb      	cmp	r3, r7
    6048:	d002      	beq.n	6050 <z_set_prio+0x78>
    604a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    604c:	2b00      	cmp	r3, #0
    604e:	d1e5      	bne.n	601c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    6050:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
    6052:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    6056:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6058:	6214      	str	r4, [r2, #32]
}
    605a:	e7eb      	b.n	6034 <z_set_prio+0x5c>
			thread->base.prio = prio;
    605c:	73a1      	strb	r1, [r4, #14]
    605e:	2000      	movs	r0, #0
    6060:	e7ec      	b.n	603c <z_set_prio+0x64>
    6062:	bf00      	nop
    6064:	200039c4 	.word	0x200039c4

00006068 <z_impl_k_thread_suspend>:
{
    6068:	b570      	push	{r4, r5, r6, lr}
    606a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    606c:	3018      	adds	r0, #24
    606e:	f003 fadd 	bl	962c <z_abort_timeout>
	__asm__ volatile(
    6072:	f04f 0320 	mov.w	r3, #32
    6076:	f3ef 8611 	mrs	r6, BASEPRI
    607a:	f383 8812 	msr	BASEPRI_MAX, r3
    607e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6082:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    6086:	7b63      	ldrb	r3, [r4, #13]
    6088:	2a00      	cmp	r2, #0
    608a:	da05      	bge.n	6098 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6090:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6092:	4620      	mov	r0, r4
    6094:	f003 f9e6 	bl	9464 <sys_dlist_remove>
		update_cache(thread == _current);
    6098:	4d0b      	ldr	r5, [pc, #44]	; (60c8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    609a:	7b63      	ldrb	r3, [r4, #13]
    609c:	68a8      	ldr	r0, [r5, #8]
    609e:	f043 0310 	orr.w	r3, r3, #16
    60a2:	7363      	strb	r3, [r4, #13]
    60a4:	1b03      	subs	r3, r0, r4
    60a6:	4258      	negs	r0, r3
    60a8:	4158      	adcs	r0, r3
    60aa:	f7ff fe53 	bl	5d54 <update_cache>
	__asm__ volatile(
    60ae:	f386 8811 	msr	BASEPRI, r6
    60b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    60b6:	68ab      	ldr	r3, [r5, #8]
    60b8:	42a3      	cmp	r3, r4
    60ba:	d103      	bne.n	60c4 <z_impl_k_thread_suspend+0x5c>
}
    60bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    60c0:	f003 b9fe 	b.w	94c0 <z_reschedule_unlocked>
}
    60c4:	bd70      	pop	{r4, r5, r6, pc}
    60c6:	bf00      	nop
    60c8:	200039c4 	.word	0x200039c4

000060cc <k_sched_unlock>:
{
    60cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    60ce:	f04f 0320 	mov.w	r3, #32
    60d2:	f3ef 8411 	mrs	r4, BASEPRI
    60d6:	f383 8812 	msr	BASEPRI_MAX, r3
    60da:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    60de:	4b08      	ldr	r3, [pc, #32]	; (6100 <k_sched_unlock+0x34>)
    60e0:	689a      	ldr	r2, [r3, #8]
    60e2:	7bd3      	ldrb	r3, [r2, #15]
    60e4:	3301      	adds	r3, #1
    60e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    60e8:	2000      	movs	r0, #0
    60ea:	f7ff fe33 	bl	5d54 <update_cache>
	__asm__ volatile(
    60ee:	f384 8811 	msr	BASEPRI, r4
    60f2:	f3bf 8f6f 	isb	sy
}
    60f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    60fa:	f003 b9e1 	b.w	94c0 <z_reschedule_unlocked>
    60fe:	bf00      	nop
    6100:	200039c4 	.word	0x200039c4

00006104 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6104:	4b04      	ldr	r3, [pc, #16]	; (6118 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6106:	2100      	movs	r1, #0
    6108:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    610c:	e9c3 2207 	strd	r2, r2, [r3, #28]
    6110:	4608      	mov	r0, r1
    6112:	f7ff bdc7 	b.w	5ca4 <k_sched_time_slice_set>
    6116:	bf00      	nop
    6118:	200039c4 	.word	0x200039c4

0000611c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    611e:	f04f 0320 	mov.w	r3, #32
    6122:	f3ef 8511 	mrs	r5, BASEPRI
    6126:	f383 8812 	msr	BASEPRI_MAX, r3
    612a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    612e:	491a      	ldr	r1, [pc, #104]	; (6198 <z_impl_k_yield+0x7c>)
    6130:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6132:	7b43      	ldrb	r3, [r0, #13]
    6134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6138:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    613a:	f003 f993 	bl	9464 <sys_dlist_remove>
	}
	queue_thread(_current);
    613e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6140:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    6142:	4608      	mov	r0, r1
    6144:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6148:	735a      	strb	r2, [r3, #13]
    614a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    614e:	4282      	cmp	r2, r0
    6150:	d01c      	beq.n	618c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6152:	b1da      	cbz	r2, 618c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    6154:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
    6156:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    615a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    615e:	42a6      	cmp	r6, r4
    6160:	d00f      	beq.n	6182 <z_impl_k_yield+0x66>
		return b2 - b1;
    6162:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6164:	2c00      	cmp	r4, #0
    6166:	dd0c      	ble.n	6182 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    6168:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    616a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    616e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6170:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6172:	2001      	movs	r0, #1
    6174:	f7ff fdee 	bl	5d54 <update_cache>
    6178:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    617a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    617e:	f7fb bd25 	b.w	1bcc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6182:	42ba      	cmp	r2, r7
    6184:	d002      	beq.n	618c <z_impl_k_yield+0x70>
    6186:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6188:	2a00      	cmp	r2, #0
    618a:	d1e6      	bne.n	615a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    618c:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
    618e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    6192:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6194:	620b      	str	r3, [r1, #32]
}
    6196:	e7ec      	b.n	6172 <z_impl_k_yield+0x56>
    6198:	200039c4 	.word	0x200039c4

0000619c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    619c:	ea50 0301 	orrs.w	r3, r0, r1
{
    61a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61a4:	4605      	mov	r5, r0
    61a6:	460e      	mov	r6, r1
	if (ticks == 0) {
    61a8:	d103      	bne.n	61b2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    61aa:	f7ff ffb7 	bl	611c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    61ae:	2000      	movs	r0, #0
    61b0:	e033      	b.n	621a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    61b2:	f06f 0401 	mvn.w	r4, #1
    61b6:	1a24      	subs	r4, r4, r0
    61b8:	f04f 33ff 	mov.w	r3, #4294967295
    61bc:	eb63 0301 	sbc.w	r3, r3, r1
    61c0:	2c01      	cmp	r4, #1
    61c2:	f173 0300 	sbcs.w	r3, r3, #0
    61c6:	da02      	bge.n	61ce <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    61c8:	f003 fa60 	bl	968c <sys_clock_tick_get_32>
    61cc:	1944      	adds	r4, r0, r5
    61ce:	f04f 0320 	mov.w	r3, #32
    61d2:	f3ef 8811 	mrs	r8, BASEPRI
    61d6:	f383 8812 	msr	BASEPRI_MAX, r3
    61da:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    61de:	4f10      	ldr	r7, [pc, #64]	; (6220 <z_tick_sleep+0x84>)
    61e0:	4b10      	ldr	r3, [pc, #64]	; (6224 <z_tick_sleep+0x88>)
    61e2:	68b8      	ldr	r0, [r7, #8]
    61e4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    61e6:	f7ff fea5 	bl	5f34 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    61ea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    61ec:	490e      	ldr	r1, [pc, #56]	; (6228 <z_tick_sleep+0x8c>)
    61ee:	462a      	mov	r2, r5
    61f0:	4633      	mov	r3, r6
    61f2:	3018      	adds	r0, #24
    61f4:	f000 f902 	bl	63fc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    61f8:	68ba      	ldr	r2, [r7, #8]
    61fa:	7b53      	ldrb	r3, [r2, #13]
    61fc:	f043 0310 	orr.w	r3, r3, #16
    6200:	7353      	strb	r3, [r2, #13]
    6202:	4640      	mov	r0, r8
    6204:	f7fb fce2 	bl	1bcc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6208:	f003 fa40 	bl	968c <sys_clock_tick_get_32>
    620c:	1a20      	subs	r0, r4, r0
    620e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6212:	2801      	cmp	r0, #1
    6214:	f173 0300 	sbcs.w	r3, r3, #0
    6218:	dbc9      	blt.n	61ae <z_tick_sleep+0x12>
}
    621a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    621e:	bf00      	nop
    6220:	200039c4 	.word	0x200039c4
    6224:	200039f0 	.word	0x200039f0
    6228:	00009501 	.word	0x00009501

0000622c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    622c:	f1b1 3fff 	cmp.w	r1, #4294967295
    6230:	bf08      	it	eq
    6232:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    6236:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6238:	d106      	bne.n	6248 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    623a:	4b08      	ldr	r3, [pc, #32]	; (625c <z_impl_k_sleep+0x30>)
    623c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    623e:	f7ff ff13 	bl	6068 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6242:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6246:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6248:	f7ff ffa8 	bl	619c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    624c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6250:	fb80 0303 	smull	r0, r3, r0, r3
    6254:	0bc0      	lsrs	r0, r0, #15
    6256:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    625a:	e7f4      	b.n	6246 <z_impl_k_sleep+0x1a>
    625c:	200039c4 	.word	0x200039c4

00006260 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6260:	4b01      	ldr	r3, [pc, #4]	; (6268 <z_impl_z_current_get+0x8>)
    6262:	6898      	ldr	r0, [r3, #8]
    6264:	4770      	bx	lr
    6266:	bf00      	nop
    6268:	200039c4 	.word	0x200039c4

0000626c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6270:	4604      	mov	r4, r0
    6272:	f04f 0320 	mov.w	r3, #32
    6276:	f3ef 8611 	mrs	r6, BASEPRI
    627a:	f383 8812 	msr	BASEPRI_MAX, r3
    627e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6282:	7b43      	ldrb	r3, [r0, #13]
    6284:	071a      	lsls	r2, r3, #28
    6286:	d505      	bpl.n	6294 <z_thread_abort+0x28>
	__asm__ volatile(
    6288:	f386 8811 	msr	BASEPRI, r6
    628c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6294:	f023 0220 	bic.w	r2, r3, #32
    6298:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    629c:	09d2      	lsrs	r2, r2, #7
    629e:	d120      	bne.n	62e2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    62a0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    62a2:	68a3      	ldr	r3, [r4, #8]
    62a4:	b113      	cbz	r3, 62ac <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    62a6:	4620      	mov	r0, r4
    62a8:	f003 f8e4 	bl	9474 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    62ac:	f104 0018 	add.w	r0, r4, #24
    62b0:	f003 f9bc 	bl	962c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    62b4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    62b8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    62bc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62be:	42bd      	cmp	r5, r7
    62c0:	d000      	beq.n	62c4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    62c2:	b9b5      	cbnz	r5, 62f2 <z_thread_abort+0x86>
		update_cache(1);
    62c4:	2001      	movs	r0, #1
    62c6:	f7ff fd45 	bl	5d54 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    62ca:	4b10      	ldr	r3, [pc, #64]	; (630c <z_thread_abort+0xa0>)
    62cc:	689b      	ldr	r3, [r3, #8]
    62ce:	42a3      	cmp	r3, r4
    62d0:	d1da      	bne.n	6288 <z_thread_abort+0x1c>
    62d2:	f3ef 8305 	mrs	r3, IPSR
    62d6:	2b00      	cmp	r3, #0
    62d8:	d1d6      	bne.n	6288 <z_thread_abort+0x1c>
    62da:	4630      	mov	r0, r6
    62dc:	f7fb fc76 	bl	1bcc <arch_swap>
	return ret;
    62e0:	e7d2      	b.n	6288 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    62e2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    62e6:	f043 0308 	orr.w	r3, r3, #8
    62ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    62ec:	f003 f8ba 	bl	9464 <sys_dlist_remove>
}
    62f0:	e7d7      	b.n	62a2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    62f2:	4628      	mov	r0, r5
    62f4:	f003 f8be 	bl	9474 <unpend_thread_no_timeout>
    62f8:	f105 0018 	add.w	r0, r5, #24
    62fc:	f003 f996 	bl	962c <z_abort_timeout>
    6300:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6304:	4628      	mov	r0, r5
    6306:	f7ff fdc1 	bl	5e8c <ready_thread>
    630a:	e7d7      	b.n	62bc <z_thread_abort+0x50>
    630c:	200039c4 	.word	0x200039c4

00006310 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6310:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6312:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6316:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6318:	e9cd 6700 	strd	r6, r7, [sp]
    631c:	f7ff fe48 	bl	5fb0 <z_pend_curr>

	if (data != NULL) {
    6320:	b11c      	cbz	r4, 632a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6322:	4b03      	ldr	r3, [pc, #12]	; (6330 <z_sched_wait+0x20>)
    6324:	689b      	ldr	r3, [r3, #8]
    6326:	695b      	ldr	r3, [r3, #20]
    6328:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    632a:	b002      	add	sp, #8
    632c:	bdd0      	pop	{r4, r6, r7, pc}
    632e:	bf00      	nop
    6330:	200039c4 	.word	0x200039c4

00006334 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6334:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6336:	4806      	ldr	r0, [pc, #24]	; (6350 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6338:	4a06      	ldr	r2, [pc, #24]	; (6354 <z_data_copy+0x20>)
    633a:	4907      	ldr	r1, [pc, #28]	; (6358 <z_data_copy+0x24>)
    633c:	1a12      	subs	r2, r2, r0
    633e:	f003 f827 	bl	9390 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6346:	4a05      	ldr	r2, [pc, #20]	; (635c <z_data_copy+0x28>)
    6348:	4905      	ldr	r1, [pc, #20]	; (6360 <z_data_copy+0x2c>)
    634a:	4806      	ldr	r0, [pc, #24]	; (6364 <z_data_copy+0x30>)
    634c:	f003 b820 	b.w	9390 <z_early_memcpy>
    6350:	20000000 	.word	0x20000000
    6354:	20000180 	.word	0x20000180
    6358:	0000adf4 	.word	0x0000adf4
    635c:	00000000 	.word	0x00000000
    6360:	0000adf4 	.word	0x0000adf4
    6364:	20000000 	.word	0x20000000

00006368 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6368:	4b03      	ldr	r3, [pc, #12]	; (6378 <elapsed+0x10>)
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	b90b      	cbnz	r3, 6372 <elapsed+0xa>
    636e:	f7fd bc91 	b.w	3c94 <sys_clock_elapsed>
}
    6372:	2000      	movs	r0, #0
    6374:	4770      	bx	lr
    6376:	bf00      	nop
    6378:	200039fc 	.word	0x200039fc

0000637c <next_timeout>:
	return list->head == list;
    637c:	4b10      	ldr	r3, [pc, #64]	; (63c0 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    637e:	b510      	push	{r4, lr}
    6380:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6382:	429c      	cmp	r4, r3
    6384:	bf08      	it	eq
    6386:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6388:	f7ff ffee 	bl	6368 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    638c:	b1a4      	cbz	r4, 63b8 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    638e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6392:	1a1b      	subs	r3, r3, r0
    6394:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    639c:	f170 0200 	sbcs.w	r2, r0, #0
    63a0:	da0a      	bge.n	63b8 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    63a2:	2800      	cmp	r0, #0
    63a4:	bfac      	ite	ge
    63a6:	4618      	movge	r0, r3
    63a8:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    63aa:	4b06      	ldr	r3, [pc, #24]	; (63c4 <next_timeout+0x48>)
    63ac:	691b      	ldr	r3, [r3, #16]
    63ae:	b113      	cbz	r3, 63b6 <next_timeout+0x3a>
    63b0:	4298      	cmp	r0, r3
    63b2:	bfa8      	it	ge
    63b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    63b6:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    63b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    63bc:	e7f5      	b.n	63aa <next_timeout+0x2e>
    63be:	bf00      	nop
    63c0:	20000120 	.word	0x20000120
    63c4:	200039c4 	.word	0x200039c4

000063c8 <remove_timeout>:
{
    63c8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    63ca:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    63cc:	b168      	cbz	r0, 63ea <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    63ce:	4a0a      	ldr	r2, [pc, #40]	; (63f8 <remove_timeout+0x30>)
    63d0:	6852      	ldr	r2, [r2, #4]
    63d2:	4290      	cmp	r0, r2
    63d4:	d009      	beq.n	63ea <remove_timeout+0x22>
	if (next(t) != NULL) {
    63d6:	b143      	cbz	r3, 63ea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    63d8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    63dc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    63e0:	1912      	adds	r2, r2, r4
    63e2:	eb41 0105 	adc.w	r1, r1, r5
    63e6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    63ea:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    63ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    63ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    63f0:	2300      	movs	r3, #0
	node->prev = NULL;
    63f2:	e9c0 3300 	strd	r3, r3, [r0]
}
    63f6:	bd30      	pop	{r4, r5, pc}
    63f8:	20000120 	.word	0x20000120

000063fc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    6400:	bf08      	it	eq
    6402:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6408:	4604      	mov	r4, r0
    640a:	461f      	mov	r7, r3
    640c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    640e:	d067      	beq.n	64e0 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6410:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    6412:	f04f 0320 	mov.w	r3, #32
    6416:	f3ef 8611 	mrs	r6, BASEPRI
    641a:	f383 8812 	msr	BASEPRI_MAX, r3
    641e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6422:	f06f 0201 	mvn.w	r2, #1
    6426:	1b53      	subs	r3, r2, r5
    6428:	f04f 3cff 	mov.w	ip, #4294967295
    642c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6430:	2b00      	cmp	r3, #0
    6432:	db1b      	blt.n	646c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6434:	4b2b      	ldr	r3, [pc, #172]	; (64e4 <z_add_timeout+0xe8>)
    6436:	e9d3 1300 	ldrd	r1, r3, [r3]
    643a:	1a52      	subs	r2, r2, r1
    643c:	eb6c 0303 	sbc.w	r3, ip, r3
    6440:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    6442:	eb63 0307 	sbc.w	r3, r3, r7
    6446:	2d01      	cmp	r5, #1
    6448:	f173 0200 	sbcs.w	r2, r3, #0
    644c:	bfbc      	itt	lt
    644e:	2501      	movlt	r5, #1
    6450:	2300      	movlt	r3, #0
    6452:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    6456:	4824      	ldr	r0, [pc, #144]	; (64e8 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    6458:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    645c:	4283      	cmp	r3, r0
    645e:	d118      	bne.n	6492 <z_add_timeout+0x96>
	node->prev = tail;
    6460:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    6464:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6468:	6044      	str	r4, [r0, #4]
}
    646a:	e026      	b.n	64ba <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    646c:	f7ff ff7c 	bl	6368 <elapsed>
    6470:	3501      	adds	r5, #1
    6472:	f147 0700 	adc.w	r7, r7, #0
    6476:	182d      	adds	r5, r5, r0
    6478:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    647c:	e9c4 5704 	strd	r5, r7, [r4, #16]
    6480:	e7e9      	b.n	6456 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6482:	1a52      	subs	r2, r2, r1
    6484:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6488:	459c      	cmp	ip, r3
    648a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    648e:	d0e7      	beq.n	6460 <z_add_timeout+0x64>
    6490:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6492:	2b00      	cmp	r3, #0
    6494:	d0e4      	beq.n	6460 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    6496:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    649a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    649e:	428a      	cmp	r2, r1
    64a0:	eb75 0e07 	sbcs.w	lr, r5, r7
    64a4:	daed      	bge.n	6482 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    64a6:	1a8a      	subs	r2, r1, r2
    64a8:	eb67 0505 	sbc.w	r5, r7, r5
    64ac:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    64b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    64b2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    64b6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    64b8:	605c      	str	r4, [r3, #4]
	return list->head == list;
    64ba:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64bc:	4283      	cmp	r3, r0
    64be:	d00b      	beq.n	64d8 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    64c0:	429c      	cmp	r4, r3
    64c2:	d109      	bne.n	64d8 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    64c4:	f7ff ff5a 	bl	637c <next_timeout>

			if (next_time == 0 ||
    64c8:	b118      	cbz	r0, 64d2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    64ca:	4b08      	ldr	r3, [pc, #32]	; (64ec <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    64cc:	691b      	ldr	r3, [r3, #16]
    64ce:	4283      	cmp	r3, r0
    64d0:	d002      	beq.n	64d8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    64d2:	2100      	movs	r1, #0
    64d4:	f7fd fbac 	bl	3c30 <sys_clock_set_timeout>
	__asm__ volatile(
    64d8:	f386 8811 	msr	BASEPRI, r6
    64dc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    64e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64e2:	bf00      	nop
    64e4:	200002a0 	.word	0x200002a0
    64e8:	20000120 	.word	0x20000120
    64ec:	200039c4 	.word	0x200039c4

000064f0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    64f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    64f4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    64f6:	f7ff fc87 	bl	5e08 <z_time_slice>
	__asm__ volatile(
    64fa:	f04f 0320 	mov.w	r3, #32
    64fe:	f3ef 8411 	mrs	r4, BASEPRI
    6502:	f383 8812 	msr	BASEPRI_MAX, r3
    6506:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    650a:	4e24      	ldr	r6, [pc, #144]	; (659c <sys_clock_announce+0xac>)
	return list->head == list;
    650c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 65a0 <sys_clock_announce+0xb0>
    6510:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6512:	4d24      	ldr	r5, [pc, #144]	; (65a4 <sys_clock_announce+0xb4>)
    6514:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6518:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    651a:	4540      	cmp	r0, r8
		curr_tick += dt;
    651c:	e9d5 1e00 	ldrd	r1, lr, [r5]
    6520:	ea4f 77e2 	mov.w	r7, r2, asr #31
    6524:	d00b      	beq.n	653e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6526:	b150      	cbz	r0, 653e <sys_clock_announce+0x4e>
    6528:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    652c:	429a      	cmp	r2, r3
    652e:	eb77 090c 	sbcs.w	r9, r7, ip
    6532:	da16      	bge.n	6562 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6534:	1a9b      	subs	r3, r3, r2
    6536:	eb6c 0c07 	sbc.w	ip, ip, r7
    653a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    653e:	1852      	adds	r2, r2, r1
    6540:	eb4e 0707 	adc.w	r7, lr, r7
    6544:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    6548:	2500      	movs	r5, #0
    654a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    654c:	f7ff ff16 	bl	637c <next_timeout>
    6550:	4629      	mov	r1, r5
    6552:	f7fd fb6d 	bl	3c30 <sys_clock_set_timeout>
	__asm__ volatile(
    6556:	f384 8811 	msr	BASEPRI, r4
    655a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    655e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    6562:	1859      	adds	r1, r3, r1
    6564:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    6568:	1ad3      	subs	r3, r2, r3
    656a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    656c:	2200      	movs	r2, #0
    656e:	2300      	movs	r3, #0
    6570:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    6574:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    6578:	f7ff ff26 	bl	63c8 <remove_timeout>
    657c:	f384 8811 	msr	BASEPRI, r4
    6580:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6584:	6883      	ldr	r3, [r0, #8]
    6586:	4798      	blx	r3
	__asm__ volatile(
    6588:	f04f 0320 	mov.w	r3, #32
    658c:	f3ef 8411 	mrs	r4, BASEPRI
    6590:	f383 8812 	msr	BASEPRI_MAX, r3
    6594:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    6598:	e7bc      	b.n	6514 <sys_clock_announce+0x24>
    659a:	bf00      	nop
    659c:	200039fc 	.word	0x200039fc
    65a0:	20000120 	.word	0x20000120
    65a4:	200002a0 	.word	0x200002a0

000065a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    65a8:	b510      	push	{r4, lr}
    65aa:	f04f 0320 	mov.w	r3, #32
    65ae:	f3ef 8411 	mrs	r4, BASEPRI
    65b2:	f383 8812 	msr	BASEPRI_MAX, r3
    65b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    65ba:	f7fd fb6b 	bl	3c94 <sys_clock_elapsed>
    65be:	4a05      	ldr	r2, [pc, #20]	; (65d4 <sys_clock_tick_get+0x2c>)
    65c0:	e9d2 3100 	ldrd	r3, r1, [r2]
    65c4:	18c0      	adds	r0, r0, r3
    65c6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    65ca:	f384 8811 	msr	BASEPRI, r4
    65ce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    65d2:	bd10      	pop	{r4, pc}
    65d4:	200002a0 	.word	0x200002a0

000065d8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    65d8:	b570      	push	{r4, r5, r6, lr}
    65da:	4604      	mov	r4, r0
	__asm__ volatile(
    65dc:	f04f 0320 	mov.w	r3, #32
    65e0:	f3ef 8511 	mrs	r5, BASEPRI
    65e4:	f383 8812 	msr	BASEPRI_MAX, r3
    65e8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    65ec:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    65f0:	3301      	adds	r3, #1
    65f2:	f142 0200 	adc.w	r2, r2, #0
    65f6:	2b02      	cmp	r3, #2
    65f8:	f172 0300 	sbcs.w	r3, r2, #0
    65fc:	d304      	bcc.n	6608 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    65fe:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    6602:	4917      	ldr	r1, [pc, #92]	; (6660 <z_timer_expiration_handler+0x88>)
    6604:	f7ff fefa 	bl	63fc <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    6608:	6b23      	ldr	r3, [r4, #48]	; 0x30
    660a:	3301      	adds	r3, #1
    660c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    660e:	6a23      	ldr	r3, [r4, #32]
    6610:	b173      	cbz	r3, 6630 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    6612:	f385 8811 	msr	BASEPRI, r5
    6616:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    661a:	6a23      	ldr	r3, [r4, #32]
    661c:	4620      	mov	r0, r4
    661e:	4798      	blx	r3
	__asm__ volatile(
    6620:	f04f 0320 	mov.w	r3, #32
    6624:	f3ef 8511 	mrs	r5, BASEPRI
    6628:	f383 8812 	msr	BASEPRI_MAX, r3
    662c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6630:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6634:	42a6      	cmp	r6, r4
    6636:	d000      	beq.n	663a <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6638:	b926      	cbnz	r6, 6644 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    663a:	f385 8811 	msr	BASEPRI, r5
    663e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    6642:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    6644:	4630      	mov	r0, r6
    6646:	f002 ff1f 	bl	9488 <z_unpend_thread_no_timeout>
    664a:	2300      	movs	r3, #0
    664c:	67b3      	str	r3, [r6, #120]	; 0x78
    664e:	f385 8811 	msr	BASEPRI, r5
    6652:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    6656:	4630      	mov	r0, r6
}
    6658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    665c:	f002 bf40 	b.w	94e0 <z_ready_thread>
    6660:	000065d9 	.word	0x000065d9

00006664 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6668:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    666a:	f1b3 3fff 	cmp.w	r3, #4294967295
    666e:	bf08      	it	eq
    6670:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    6674:	4606      	mov	r6, r0
    6676:	461c      	mov	r4, r3
    6678:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    667c:	4689      	mov	r9, r1
    667e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6680:	d03e      	beq.n	6700 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6682:	f1b0 3fff 	cmp.w	r0, #4294967295
    6686:	bf08      	it	eq
    6688:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    668c:	4615      	mov	r5, r2
    668e:	4607      	mov	r7, r0
    6690:	d014      	beq.n	66bc <z_impl_k_timer_start+0x58>
    6692:	ea50 0302 	orrs.w	r3, r0, r2
    6696:	d011      	beq.n	66bc <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    6698:	f06f 0301 	mvn.w	r3, #1
    669c:	1a9b      	subs	r3, r3, r2
    669e:	f04f 33ff 	mov.w	r3, #4294967295
    66a2:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    66a6:	2b00      	cmp	r3, #0
    66a8:	da08      	bge.n	66bc <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    66aa:	2a02      	cmp	r2, #2
    66ac:	f170 0300 	sbcs.w	r3, r0, #0
    66b0:	bfbc      	itt	lt
    66b2:	2502      	movlt	r5, #2
    66b4:	2700      	movlt	r7, #0
    66b6:	3d01      	subs	r5, #1
    66b8:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    66bc:	f06f 0301 	mvn.w	r3, #1
    66c0:	1a5b      	subs	r3, r3, r1
    66c2:	f04f 33ff 	mov.w	r3, #4294967295
    66c6:	eb63 0304 	sbc.w	r3, r3, r4
    66ca:	2b00      	cmp	r3, #0
    66cc:	da09      	bge.n	66e2 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    66ce:	2901      	cmp	r1, #1
    66d0:	f174 0300 	sbcs.w	r3, r4, #0
    66d4:	bfbc      	itt	lt
    66d6:	2101      	movlt	r1, #1
    66d8:	2400      	movlt	r4, #0
    66da:	f111 39ff 	adds.w	r9, r1, #4294967295
    66de:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    66e2:	4630      	mov	r0, r6
    66e4:	f002 ffa2 	bl	962c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    66e8:	2300      	movs	r3, #0
    66ea:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    66ec:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    66f0:	464a      	mov	r2, r9
    66f2:	4643      	mov	r3, r8
    66f4:	4630      	mov	r0, r6
    66f6:	4903      	ldr	r1, [pc, #12]	; (6704 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    66f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    66fc:	f7ff be7e 	b.w	63fc <z_add_timeout>
}
    6700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6704:	000065d9 	.word	0x000065d9

00006708 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6708:	4a02      	ldr	r2, [pc, #8]	; (6714 <boot_banner+0xc>)
    670a:	4903      	ldr	r1, [pc, #12]	; (6718 <boot_banner+0x10>)
    670c:	4803      	ldr	r0, [pc, #12]	; (671c <boot_banner+0x14>)
    670e:	f000 bade 	b.w	6cce <printk>
    6712:	bf00      	nop
    6714:	0000aaba 	.word	0x0000aaba
    6718:	0000adb2 	.word	0x0000adb2
    671c:	0000adc1 	.word	0x0000adc1

00006720 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    6722:	4b09      	ldr	r3, [pc, #36]	; (6748 <k_sys_work_q_init+0x28>)
    6724:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    6726:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6728:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    672a:	9300      	str	r3, [sp, #0]
    672c:	4907      	ldr	r1, [pc, #28]	; (674c <k_sys_work_q_init+0x2c>)
    672e:	4808      	ldr	r0, [pc, #32]	; (6750 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6730:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6734:	f04f 33ff 	mov.w	r3, #4294967295
    6738:	f44f 6280 	mov.w	r2, #1024	; 0x400
    673c:	f7ff fa66 	bl	5c0c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6740:	4620      	mov	r0, r4
    6742:	b004      	add	sp, #16
    6744:	bd10      	pop	{r4, pc}
    6746:	bf00      	nop
    6748:	0000ade8 	.word	0x0000ade8
    674c:	20008858 	.word	0x20008858
    6750:	200002a8 	.word	0x200002a8

00006754 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    6754:	2000      	movs	r0, #0
    6756:	4770      	bx	lr

00006758 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    6758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    675c:	460e      	mov	r6, r1
    675e:	4617      	mov	r7, r2
    6760:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    6762:	4604      	mov	r4, r0
    6764:	b928      	cbnz	r0, 6772 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    6766:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    676a:	4640      	mov	r0, r8
    676c:	b003      	add	sp, #12
    676e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    6772:	2900      	cmp	r1, #0
    6774:	d0f7      	beq.n	6766 <bootutil_tlv_iter_begin+0xe>
    6776:	2a00      	cmp	r2, #0
    6778:	d0f5      	beq.n	6766 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    677a:	68cb      	ldr	r3, [r1, #12]
    677c:	890d      	ldrh	r5, [r1, #8]
    677e:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    6780:	2304      	movs	r3, #4
    6782:	eb0d 0203 	add.w	r2, sp, r3
    6786:	4629      	mov	r1, r5
    6788:	4638      	mov	r0, r7
    678a:	f000 fb96 	bl	6eba <flash_area_read>
    678e:	4680      	mov	r8, r0
    6790:	2800      	cmp	r0, #0
    6792:	d1e8      	bne.n	6766 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6794:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    6798:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    679a:	f646 1208 	movw	r2, #26888	; 0x6908
    679e:	4291      	cmp	r1, r2
    67a0:	d123      	bne.n	67ea <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    67a2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    67a6:	4299      	cmp	r1, r3
    67a8:	d1dd      	bne.n	6766 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    67aa:	2304      	movs	r3, #4
    67ac:	eb0d 0203 	add.w	r2, sp, r3
    67b0:	4429      	add	r1, r5
    67b2:	4638      	mov	r0, r7
    67b4:	f000 fb81 	bl	6eba <flash_area_read>
    67b8:	2800      	cmp	r0, #0
    67ba:	d1d4      	bne.n	6766 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    67bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    67c0:	f646 1307 	movw	r3, #26887	; 0x6907
    67c4:	429a      	cmp	r2, r3
    67c6:	d1ce      	bne.n	6766 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    67c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    67cc:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    67ce:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    67d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    67d4:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    67d8:	442b      	add	r3, r5
    67da:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    67dc:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    67de:	4413      	add	r3, r2
    it->fap = fap;
    67e0:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    67e4:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    67e6:	6125      	str	r5, [r4, #16]
    return 0;
    67e8:	e7bf      	b.n	676a <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    67ea:	2b00      	cmp	r3, #0
    67ec:	d0e6      	beq.n	67bc <bootutil_tlv_iter_begin+0x64>
    67ee:	e7ba      	b.n	6766 <bootutil_tlv_iter_begin+0xe>

000067f0 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    67f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    67f4:	460f      	mov	r7, r1
    67f6:	4690      	mov	r8, r2
    67f8:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    67fa:	4604      	mov	r4, r0
    67fc:	b920      	cbnz	r0, 6808 <bootutil_tlv_iter_next+0x18>
        return -1;
    67fe:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    6802:	b003      	add	sp, #12
    6804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    6808:	6803      	ldr	r3, [r0, #0]
    680a:	2b00      	cmp	r3, #0
    680c:	d0f7      	beq.n	67fe <bootutil_tlv_iter_next+0xe>
    680e:	6843      	ldr	r3, [r0, #4]
    6810:	2b00      	cmp	r3, #0
    6812:	d0f4      	beq.n	67fe <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6814:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    6818:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    681c:	429a      	cmp	r2, r3
    681e:	d216      	bcs.n	684e <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    6820:	6823      	ldr	r3, [r4, #0]
    6822:	895b      	ldrh	r3, [r3, #10]
    6824:	b123      	cbz	r3, 6830 <bootutil_tlv_iter_next+0x40>
    6826:	68e3      	ldr	r3, [r4, #12]
    6828:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    682a:	bf04      	itt	eq
    682c:	3304      	addeq	r3, #4
    682e:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    6830:	2304      	movs	r3, #4
    6832:	6921      	ldr	r1, [r4, #16]
    6834:	6860      	ldr	r0, [r4, #4]
    6836:	eb0d 0203 	add.w	r2, sp, r3
    683a:	f000 fb3e 	bl	6eba <flash_area_read>
        if (rc) {
    683e:	2800      	cmp	r0, #0
    6840:	d1dd      	bne.n	67fe <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    6842:	7aa3      	ldrb	r3, [r4, #10]
    6844:	6925      	ldr	r5, [r4, #16]
    6846:	b123      	cbz	r3, 6852 <bootutil_tlv_iter_next+0x62>
    6848:	68e3      	ldr	r3, [r4, #12]
    684a:	42ab      	cmp	r3, r5
    684c:	d801      	bhi.n	6852 <bootutil_tlv_iter_next+0x62>
            return 1;
    684e:	2001      	movs	r0, #1
    6850:	e7d7      	b.n	6802 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6852:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6854:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6858:	4549      	cmp	r1, r9
    685a:	f102 0304 	add.w	r3, r2, #4
    685e:	d003      	beq.n	6868 <bootutil_tlv_iter_next+0x78>
    6860:	f8bd c004 	ldrh.w	ip, [sp, #4]
    6864:	458c      	cmp	ip, r1
    6866:	d10b      	bne.n	6880 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    6868:	b116      	cbz	r6, 6870 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    686a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    686e:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    6870:	3504      	adds	r5, #4
    6872:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    6874:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    6878:	6922      	ldr	r2, [r4, #16]
    687a:	4413      	add	r3, r2
    687c:	6123      	str	r3, [r4, #16]
            return 0;
    687e:	e7c0      	b.n	6802 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6880:	442b      	add	r3, r5
    6882:	6123      	str	r3, [r4, #16]
    6884:	e7c8      	b.n	6818 <bootutil_tlv_iter_next+0x28>

00006886 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    6886:	f000 bbc3 	b.w	7010 <memcmp>

0000688a <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    688a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    688e:	4358      	muls	r0, r3
}
    6890:	3030      	adds	r0, #48	; 0x30
    6892:	4770      	bx	lr

00006894 <boot_status_entries>:
	return fa->fa_id;
    6894:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_SCRATCH) {
    6896:	2b07      	cmp	r3, #7
    6898:	d008      	beq.n	68ac <boot_status_entries+0x18>
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    689a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    689e:	2b01      	cmp	r3, #1
    68a0:	bf14      	ite	ne
    68a2:	f04f 30ff 	movne.w	r0, #4294967295
    68a6:	f44f 60c0 	moveq.w	r0, #1536	; 0x600
    68aa:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    68ac:	2003      	movs	r0, #3
}
    68ae:	4770      	bx	lr

000068b0 <boot_status_off>:
{
    68b0:	b510      	push	{r4, lr}
    68b2:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    68b4:	f000 fb50 	bl	6f58 <flash_area_align>
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    68b8:	7823      	ldrb	r3, [r4, #0]
    68ba:	2b07      	cmp	r3, #7
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    68bc:	bf16      	itet	ne
    68be:	f44f 63c0 	movne.w	r3, #1536	; 0x600
    return BOOT_STATUS_STATE_COUNT * min_write_sz;
    68c2:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    68c6:	4358      	mulne	r0, r3
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
    68c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
    return flash_area_get_size(fap) - off_from_end;
    68cc:	68a0      	ldr	r0, [r4, #8]
}
    68ce:	1ac0      	subs	r0, r0, r3
    68d0:	bd10      	pop	{r4, pc}

000068d2 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    68d2:	6881      	ldr	r1, [r0, #8]
    68d4:	3918      	subs	r1, #24
    68d6:	f021 0107 	bic.w	r1, r1, #7

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    68da:	2201      	movs	r2, #1
    68dc:	3908      	subs	r1, #8
    68de:	f001 b823 	b.w	7928 <boot_write_trailer_flag>

000068e2 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    68e2:	b513      	push	{r0, r1, r4, lr}
    68e4:	4604      	mov	r4, r0
    68e6:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    68e8:	f000 ffbb 	bl	7862 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    68ec:	2304      	movs	r3, #4
    68ee:	f1a0 0108 	sub.w	r1, r0, #8
    68f2:	eb0d 0203 	add.w	r2, sp, r3
    68f6:	4620      	mov	r0, r4
    68f8:	f000 ffea 	bl	78d0 <boot_write_trailer>
}
    68fc:	b002      	add	sp, #8
    68fe:	bd10      	pop	{r4, pc}

00006900 <boot_read_image_headers>:
{
    6900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6902:	4613      	mov	r3, r2
{
    6904:	460f      	mov	r7, r1
    6906:	4616      	mov	r6, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6908:	2100      	movs	r1, #0
    690a:	4602      	mov	r2, r0
{
    690c:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    690e:	f000 f998 	bl	6c42 <boot_read_image_header>
        if (rc != 0) {
    6912:	4604      	mov	r4, r0
    6914:	b950      	cbnz	r0, 692c <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6916:	4633      	mov	r3, r6
    6918:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    691c:	2101      	movs	r1, #1
    691e:	4628      	mov	r0, r5
    6920:	f000 f98f 	bl	6c42 <boot_read_image_header>
        if (rc != 0) {
    6924:	b110      	cbz	r0, 692c <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    6926:	2f00      	cmp	r7, #0
    6928:	bf18      	it	ne
    692a:	4604      	movne	r4, r0
}
    692c:	4620      	mov	r0, r4
    692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006930 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    6930:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6932:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6934:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    6936:	460c      	mov	r4, r1
    6938:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    693a:	f7f9 fde3 	bl	504 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    693e:	4669      	mov	r1, sp
    6940:	b2c0      	uxtb	r0, r0
    6942:	f7fb f83b 	bl	19bc <flash_area_open>
    if (rc != 0) {
    6946:	bb30      	cbnz	r0, 6996 <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    6948:	212c      	movs	r1, #44	; 0x2c
    694a:	fb01 5404 	mla	r4, r1, r4, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    694e:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    6950:	8921      	ldrh	r1, [r4, #8]
    6952:	68e3      	ldr	r3, [r4, #12]
    6954:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    6956:	2304      	movs	r3, #4
    6958:	eb0d 0203 	add.w	r2, sp, r3
    695c:	4629      	mov	r1, r5
    695e:	f000 faac 	bl	6eba <flash_area_read>
    6962:	b9c0      	cbnz	r0, 6996 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6964:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    6968:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    696a:	f646 1308 	movw	r3, #26888	; 0x6908
    696e:	429a      	cmp	r2, r3
    6970:	d116      	bne.n	69a0 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    6972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6976:	429c      	cmp	r4, r3
    6978:	d10d      	bne.n	6996 <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    697a:	2304      	movs	r3, #4
    697c:	9800      	ldr	r0, [sp, #0]
    697e:	eb0d 0203 	add.w	r2, sp, r3
    6982:	1961      	adds	r1, r4, r5
    6984:	f000 fa99 	bl	6eba <flash_area_read>
    6988:	b928      	cbnz	r0, 6996 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    698a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    698e:	f646 1307 	movw	r3, #26887	; 0x6907
    6992:	429a      	cmp	r2, r3
    6994:	d007      	beq.n	69a6 <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    6996:	9800      	ldr	r0, [sp, #0]
    6998:	f000 fa8e 	bl	6eb8 <flash_area_close>
}
    699c:	b002      	add	sp, #8
    699e:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    69a0:	2c00      	cmp	r4, #0
    69a2:	d0f2      	beq.n	698a <boot_read_image_size.isra.0+0x5a>
    69a4:	e7f7      	b.n	6996 <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    69a6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    69aa:	4421      	add	r1, r4
    69ac:	4429      	add	r1, r5
    69ae:	6031      	str	r1, [r6, #0]
    rc = 0;
    69b0:	e7f1      	b.n	6996 <boot_read_image_size.isra.0+0x66>

000069b2 <boot_read_sectors>:
{
    69b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69b4:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    69b6:	4604      	mov	r4, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    69b8:	f44f 7500 	mov.w	r5, #512	; 0x200
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69bc:	a901      	add	r1, sp, #4
    69be:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    69c0:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69c2:	f7fb f819 	bl	19f8 <flash_area_get_sectors>
    if (rc != 0) {
    69c6:	b9b0      	cbnz	r0, 69f6 <boot_read_sectors+0x44>
    *out_num_sectors = num_sectors;
    69c8:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    69cc:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69ce:	a901      	add	r1, sp, #4
    69d0:	2001      	movs	r0, #1
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    69d2:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69d4:	f7fb f810 	bl	19f8 <flash_area_get_sectors>
    if (rc != 0) {
    69d8:	b118      	cbz	r0, 69e2 <boot_read_sectors+0x30>
        return BOOT_EFLASH_SEC;
    69da:	2509      	movs	r5, #9
}
    69dc:	4628      	mov	r0, r5
    69de:	b002      	add	sp, #8
    69e0:	bd70      	pop	{r4, r5, r6, pc}
    *out_num_sectors = num_sectors;
    69e2:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    *out_num_sectors = num_sectors;
    69e6:	6563      	str	r3, [r4, #84]	; 0x54
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69e8:	a901      	add	r1, sp, #4
    69ea:	2007      	movs	r0, #7
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    69ec:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    69ee:	f7fb f803 	bl	19f8 <flash_area_get_sectors>
    if (rc != 0) {
    69f2:	4605      	mov	r5, r0
    69f4:	b108      	cbz	r0, 69fa <boot_read_sectors+0x48>
        return BOOT_EFLASH;
    69f6:	2501      	movs	r5, #1
    69f8:	e7f0      	b.n	69dc <boot_read_sectors+0x2a>
    *out_num_sectors = num_sectors;
    69fa:	9b01      	ldr	r3, [sp, #4]
    69fc:	6623      	str	r3, [r4, #96]	; 0x60
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    69fe:	6a20      	ldr	r0, [r4, #32]
    6a00:	f000 faaa 	bl	6f58 <flash_area_align>
    6a04:	4606      	mov	r6, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    6a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a08:	f000 faa6 	bl	6f58 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    6a0c:	4286      	cmp	r6, r0
    6a0e:	bf2c      	ite	cs
    6a10:	66a6      	strcs	r6, [r4, #104]	; 0x68
    6a12:	66a0      	strcc	r0, [r4, #104]	; 0x68
    return 0;
    6a14:	e7e2      	b.n	69dc <boot_read_sectors+0x2a>

00006a16 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    6a16:	2301      	movs	r3, #1
    6a18:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    6a1a:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    6a1e:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    6a20:	2300      	movs	r3, #0
    bs->source = 0;
    6a22:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    6a26:	4770      	bx	lr

00006a28 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    6a28:	7943      	ldrb	r3, [r0, #5]
    6a2a:	2b01      	cmp	r3, #1
    6a2c:	d107      	bne.n	6a3e <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    6a2e:	6803      	ldr	r3, [r0, #0]
    6a30:	2b01      	cmp	r3, #1
    6a32:	d104      	bne.n	6a3e <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    6a34:	7900      	ldrb	r0, [r0, #4]
    6a36:	1e43      	subs	r3, r0, #1
    6a38:	4258      	negs	r0, r3
    6a3a:	4158      	adcs	r0, r3
    6a3c:	4770      	bx	lr
    6a3e:	2000      	movs	r0, #0
}
    6a40:	4770      	bx	lr

00006a42 <boot_write_status>:
{
    6a42:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bs->use_scratch) {
    6a44:	798b      	ldrb	r3, [r1, #6]
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    6a46:	2b00      	cmp	r3, #0
{
    6a48:	4606      	mov	r6, r0
    6a4a:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    6a4c:	bf14      	ite	ne
    6a4e:	2007      	movne	r0, #7
    6a50:	2003      	moveq	r0, #3
    6a52:	a901      	add	r1, sp, #4
    6a54:	f7fa ffb2 	bl	19bc <flash_area_open>
    if (rc != 0) {
    6a58:	bb38      	cbnz	r0, 6aaa <boot_write_status+0x68>
    off = boot_status_off(fap) +
    6a5a:	9801      	ldr	r0, [sp, #4]
    6a5c:	f7ff ff28 	bl	68b0 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6a60:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    off = boot_status_off(fap) +
    6a62:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6a64:	4628      	mov	r0, r5
    6a66:	f000 f907 	bl	6c78 <boot_status_internal_off>
    off = boot_status_off(fap) +
    6a6a:	4404      	add	r4, r0
    align = flash_area_align(fap);
    6a6c:	9801      	ldr	r0, [sp, #4]
    6a6e:	f000 fa73 	bl	6f58 <flash_area_align>
    6a72:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    6a74:	9801      	ldr	r0, [sp, #4]
    6a76:	f000 fa78 	bl	6f6a <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    6a7a:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    6a7c:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    6a7e:	eb0d 0002 	add.w	r0, sp, r2
    6a82:	f000 fae1 	bl	7048 <memset>
    buf[0] = bs->state;
    6a86:	792b      	ldrb	r3, [r5, #4]
    6a88:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    6a8c:	4621      	mov	r1, r4
    6a8e:	9801      	ldr	r0, [sp, #4]
    6a90:	4633      	mov	r3, r6
    6a92:	aa02      	add	r2, sp, #8
    6a94:	f000 fa2d 	bl	6ef2 <flash_area_write>
    if (rc != 0) {
    6a98:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    6a9a:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    6a9c:	bf18      	it	ne
    6a9e:	2401      	movne	r4, #1
    flash_area_close(fap);
    6aa0:	f000 fa0a 	bl	6eb8 <flash_area_close>
}
    6aa4:	4620      	mov	r0, r4
    6aa6:	b004      	add	sp, #16
    6aa8:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    6aaa:	2401      	movs	r4, #1
    6aac:	e7fa      	b.n	6aa4 <boot_write_status+0x62>

00006aae <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    6aae:	f000 ba3c 	b.w	6f2a <flash_area_erase>

00006ab2 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    6ab2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ab6:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6ab8:	2100      	movs	r1, #0
{
    6aba:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6abc:	4608      	mov	r0, r1
    6abe:	f7f9 fd21 	bl	504 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6ac2:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6ac4:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6ac6:	2000      	movs	r0, #0
    6ac8:	f7f9 fd1c 	bl	504 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    6acc:	7833      	ldrb	r3, [r6, #0]
    6ace:	429c      	cmp	r4, r3
    6ad0:	d021      	beq.n	6b16 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    6ad2:	4298      	cmp	r0, r3
    6ad4:	d121      	bne.n	6b1a <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    6ad6:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    6ad8:	232c      	movs	r3, #44	; 0x2c
    6ada:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6ade:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    sector = boot_img_num_sectors(state, slot) - 1;
    6ae0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6ae2:	f7ff fed2 	bl	688a <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    6ae6:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6ae8:	4607      	mov	r7, r0
    total_sz = 0;
    6aea:	f04f 0800 	mov.w	r8, #0
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    6aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6af0:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    6af4:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    6af8:	f8d2 9004 	ldr.w	r9, [r2, #4]
    6afc:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    6afe:	464a      	mov	r2, r9
    6b00:	1ac9      	subs	r1, r1, r3
    6b02:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    6b04:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    6b06:	f7ff ffd2 	bl	6aae <boot_erase_region>
    } while (total_sz < trailer_sz);
    6b0a:	45b8      	cmp	r8, r7
        sector--;
    6b0c:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    6b10:	d3ed      	bcc.n	6aee <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    6b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    6b16:	2500      	movs	r5, #0
    6b18:	e7de      	b.n	6ad8 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    6b1a:	2001      	movs	r0, #1
    6b1c:	e7f9      	b.n	6b12 <swap_erase_trailer_sectors+0x60>

00006b1e <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    6b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6b20:	4615      	mov	r5, r2
    6b22:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6b24:	2001      	movs	r0, #1
    6b26:	4669      	mov	r1, sp
    6b28:	f000 ff15 	bl	7956 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    6b2c:	79e9      	ldrb	r1, [r5, #7]
    6b2e:	2901      	cmp	r1, #1
    6b30:	d003      	beq.n	6b3a <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    6b32:	2200      	movs	r2, #0
    6b34:	4620      	mov	r0, r4
    6b36:	f000 ff22 	bl	797e <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    6b3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b3e:	2b01      	cmp	r3, #1
    6b40:	d102      	bne.n	6b48 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    6b42:	4620      	mov	r0, r4
    6b44:	f000 fefa 	bl	793c <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    6b48:	68a9      	ldr	r1, [r5, #8]
    6b4a:	4620      	mov	r0, r4
    6b4c:	f7ff fec9 	bl	68e2 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    6b50:	4620      	mov	r0, r4
    6b52:	f7fd f913 	bl	3d7c <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    6b56:	2000      	movs	r0, #0
    6b58:	b003      	add	sp, #12
    6b5a:	bd30      	pop	{r4, r5, pc}

00006b5c <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    6b5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6b5e:	460d      	mov	r5, r1
    6b60:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    6b62:	f7fa f9fb 	bl	f5c <swap_status_source>
    switch (bs->source) {
    6b66:	2801      	cmp	r0, #1
    bs->source = swap_status_source(state);
    6b68:	4604      	mov	r4, r0
    6b6a:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    6b6c:	d008      	beq.n	6b80 <swap_read_status+0x24>
    6b6e:	2802      	cmp	r0, #2
    6b70:	d031      	beq.n	6bd6 <swap_read_status+0x7a>
    6b72:	2800      	cmp	r0, #0
    6b74:	bf0c      	ite	eq
    6b76:	4604      	moveq	r4, r0
    6b78:	2407      	movne	r4, #7

done:
    flash_area_close(fap);

    return rc;
}
    6b7a:	4620      	mov	r0, r4
    6b7c:	b002      	add	sp, #8
    6b7e:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    6b80:	2007      	movs	r0, #7
    rc = flash_area_open(area_id, &fap);
    6b82:	a901      	add	r1, sp, #4
    6b84:	f7fa ff1a 	bl	19bc <flash_area_open>
    if (rc != 0) {
    6b88:	bb48      	cbnz	r0, 6bde <swap_read_status+0x82>
    rc = swap_read_status_bytes(fap, state, bs);
    6b8a:	9801      	ldr	r0, [sp, #4]
    6b8c:	462a      	mov	r2, r5
    6b8e:	4631      	mov	r1, r6
    6b90:	f7fa f92e 	bl	df0 <swap_read_status_bytes>
    if (rc == 0) {
    6b94:	4604      	mov	r4, r0
    6b96:	b9d0      	cbnz	r0, 6bce <swap_read_status+0x72>
        off = boot_swap_info_off(fap);
    6b98:	9801      	ldr	r0, [sp, #4]
    6b9a:	f000 fe62 	bl	7862 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    6b9e:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    6ba0:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    6ba2:	f10d 0203 	add.w	r2, sp, #3
    6ba6:	9801      	ldr	r0, [sp, #4]
    6ba8:	f000 f987 	bl	6eba <flash_area_read>
        if (rc != 0) {
    6bac:	4604      	mov	r4, r0
    6bae:	b9a0      	cbnz	r0, 6bda <swap_read_status+0x7e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    6bb0:	9801      	ldr	r0, [sp, #4]
    6bb2:	2201      	movs	r2, #1
    6bb4:	f10d 0103 	add.w	r1, sp, #3
    6bb8:	f000 fe67 	bl	788a <bootutil_buffer_is_erased>
    6bbc:	b110      	cbz	r0, 6bc4 <swap_read_status+0x68>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    6bbe:	2301      	movs	r3, #1
    6bc0:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6bc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6bc8:	f003 030f 	and.w	r3, r3, #15
    6bcc:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    6bce:	9801      	ldr	r0, [sp, #4]
    6bd0:	f000 f972 	bl	6eb8 <flash_area_close>
    return rc;
    6bd4:	e7d1      	b.n	6b7a <swap_read_status+0x1e>
    switch (bs->source) {
    6bd6:	2003      	movs	r0, #3
    6bd8:	e7d3      	b.n	6b82 <swap_read_status+0x26>
            rc = BOOT_EFLASH;
    6bda:	2401      	movs	r4, #1
    6bdc:	e7f7      	b.n	6bce <swap_read_status+0x72>
        return BOOT_EFLASH;
    6bde:	2401      	movs	r4, #1
    6be0:	e7cb      	b.n	6b7a <swap_read_status+0x1e>

00006be2 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    6be2:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6be4:	2003      	movs	r0, #3
    6be6:	a901      	add	r1, sp, #4
    6be8:	f7fa fee8 	bl	19bc <flash_area_open>
            &fap);
    if (rc != 0) {
    6bec:	b948      	cbnz	r0, 6c02 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    6bee:	9801      	ldr	r0, [sp, #4]
    6bf0:	f7ff fe6f 	bl	68d2 <boot_write_copy_done>
    6bf4:	4604      	mov	r4, r0
    flash_area_close(fap);
    6bf6:	9801      	ldr	r0, [sp, #4]
    6bf8:	f000 f95e 	bl	6eb8 <flash_area_close>
    return rc;
}
    6bfc:	4620      	mov	r0, r4
    6bfe:	b002      	add	sp, #8
    6c00:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6c02:	2401      	movs	r4, #1
    6c04:	e7fa      	b.n	6bfc <swap_set_copy_done+0x1a>

00006c06 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    6c06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6c08:	2003      	movs	r0, #3
    6c0a:	a901      	add	r1, sp, #4
    6c0c:	f7fa fed6 	bl	19bc <flash_area_open>
            &fap);
    if (rc != 0) {
    6c10:	b9a8      	cbnz	r0, 6c3e <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    6c12:	9801      	ldr	r0, [sp, #4]
    6c14:	a902      	add	r1, sp, #8
    6c16:	f7fd f8d1 	bl	3dbc <boot_read_swap_state>
    if (rc != 0) {
    6c1a:	4604      	mov	r4, r0
    6c1c:	b968      	cbnz	r0, 6c3a <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    6c1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c22:	2b03      	cmp	r3, #3
    6c24:	d103      	bne.n	6c2e <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    6c26:	9801      	ldr	r0, [sp, #4]
    6c28:	f000 fe88 	bl	793c <boot_write_image_ok>
    6c2c:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    6c2e:	9801      	ldr	r0, [sp, #4]
    6c30:	f000 f942 	bl	6eb8 <flash_area_close>
    return rc;
}
    6c34:	4620      	mov	r0, r4
    6c36:	b004      	add	sp, #16
    6c38:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    6c3a:	2401      	movs	r4, #1
    6c3c:	e7f7      	b.n	6c2e <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    6c3e:	2401      	movs	r4, #1
    6c40:	e7f8      	b.n	6c34 <swap_set_image_ok+0x2e>

00006c42 <boot_read_image_header>:
{
    6c42:	b513      	push	{r0, r1, r4, lr}
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6c44:	2000      	movs	r0, #0
{
    6c46:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6c48:	f7f9 fc5c 	bl	504 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    6c4c:	a901      	add	r1, sp, #4
    6c4e:	b2c0      	uxtb	r0, r0
    6c50:	f7fa feb4 	bl	19bc <flash_area_open>
    if (rc == 0) {
    6c54:	4601      	mov	r1, r0
    6c56:	b968      	cbnz	r0, 6c74 <boot_read_image_header+0x32>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    6c58:	4622      	mov	r2, r4
    6c5a:	2320      	movs	r3, #32
    6c5c:	9801      	ldr	r0, [sp, #4]
    6c5e:	f000 f92c 	bl	6eba <flash_area_read>
    6c62:	4604      	mov	r4, r0
        flash_area_close(fap);
    6c64:	9801      	ldr	r0, [sp, #4]
    6c66:	f000 f927 	bl	6eb8 <flash_area_close>
    if (rc != 0) {
    6c6a:	1e20      	subs	r0, r4, #0
    6c6c:	bf18      	it	ne
    6c6e:	2001      	movne	r0, #1
}
    6c70:	b002      	add	sp, #8
    6c72:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    6c74:	2001      	movs	r0, #1
    return rc;
    6c76:	e7fb      	b.n	6c70 <boot_read_image_header+0x2e>

00006c78 <boot_status_internal_off>:
{
    6c78:	b510      	push	{r4, lr}
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6c7a:	6803      	ldr	r3, [r0, #0]
    6c7c:	1e5a      	subs	r2, r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6c7e:	7903      	ldrb	r3, [r0, #4]
    6c80:	3b01      	subs	r3, #1
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    6c82:	eb01 0441 	add.w	r4, r1, r1, lsl #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6c86:	4359      	muls	r1, r3
}
    6c88:	fb04 1002 	mla	r0, r4, r2, r1
    6c8c:	bd10      	pop	{r4, pc}

00006c8e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6c8e:	4603      	mov	r3, r0
    6c90:	b158      	cbz	r0, 6caa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6c92:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6c94:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6c98:	2a01      	cmp	r2, #1
    6c9a:	d003      	beq.n	6ca4 <sys_notify_validate+0x16>
    6c9c:	2a03      	cmp	r2, #3
    6c9e:	d104      	bne.n	6caa <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6ca0:	6802      	ldr	r2, [r0, #0]
    6ca2:	b112      	cbz	r2, 6caa <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6ca4:	2000      	movs	r0, #0
    6ca6:	6098      	str	r0, [r3, #8]
    6ca8:	4770      	bx	lr
		return -EINVAL;
    6caa:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6cae:	4770      	bx	lr

00006cb0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6cb0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6cb2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6cb4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6cb8:	2a03      	cmp	r2, #3
    6cba:	f04f 0200 	mov.w	r2, #0
{
    6cbe:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6cc0:	bf0c      	ite	eq
    6cc2:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6cc4:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6cc6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6cc8:	4770      	bx	lr

00006cca <arch_printk_char_out>:
}
    6cca:	2000      	movs	r0, #0
    6ccc:	4770      	bx	lr

00006cce <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6cce:	b40f      	push	{r0, r1, r2, r3}
    6cd0:	b507      	push	{r0, r1, r2, lr}
    6cd2:	a904      	add	r1, sp, #16
    6cd4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6cd8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6cda:	f7fa fb53 	bl	1384 <vprintk>

	va_end(ap);
}
    6cde:	b003      	add	sp, #12
    6ce0:	f85d eb04 	ldr.w	lr, [sp], #4
    6ce4:	b004      	add	sp, #16
    6ce6:	4770      	bx	lr

00006ce8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6ce8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6cea:	f013 0307 	ands.w	r3, r3, #7
    6cee:	d105      	bne.n	6cfc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6cf0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	bf0c      	ite	eq
    6cf6:	2000      	moveq	r0, #0
    6cf8:	2003      	movne	r0, #3
    6cfa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6cfc:	2b02      	cmp	r3, #2
    6cfe:	d105      	bne.n	6d0c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6d00:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    6d02:	2b00      	cmp	r3, #0
    6d04:	bf14      	ite	ne
    6d06:	2000      	movne	r0, #0
    6d08:	2004      	moveq	r0, #4
    6d0a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6d0c:	2b01      	cmp	r3, #1
    6d0e:	d105      	bne.n	6d1c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6d10:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6d12:	2b00      	cmp	r3, #0
    6d14:	bf0c      	ite	eq
    6d16:	2000      	moveq	r0, #0
    6d18:	2005      	movne	r0, #5
    6d1a:	4770      	bx	lr
	int evt = EVT_NOP;
    6d1c:	2000      	movs	r0, #0
}
    6d1e:	4770      	bx	lr

00006d20 <notify_one>:
{
    6d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d24:	460d      	mov	r5, r1
    6d26:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6d28:	4619      	mov	r1, r3
    6d2a:	1d28      	adds	r0, r5, #4
{
    6d2c:	4690      	mov	r8, r2
    6d2e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6d30:	f7ff ffbe 	bl	6cb0 <sys_notify_finalize>
	if (cb) {
    6d34:	4604      	mov	r4, r0
    6d36:	b138      	cbz	r0, 6d48 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6d38:	4633      	mov	r3, r6
    6d3a:	4642      	mov	r2, r8
    6d3c:	4629      	mov	r1, r5
    6d3e:	4638      	mov	r0, r7
    6d40:	46a4      	mov	ip, r4
}
    6d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6d46:	4760      	bx	ip
}
    6d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006d4c <transition_complete>:
{
    6d4c:	b410      	push	{r4}
	__asm__ volatile(
    6d4e:	f04f 0420 	mov.w	r4, #32
    6d52:	f3ef 8211 	mrs	r2, BASEPRI
    6d56:	f384 8812 	msr	BASEPRI_MAX, r4
    6d5a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6d5e:	6141      	str	r1, [r0, #20]
}
    6d60:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6d62:	2101      	movs	r1, #1
    6d64:	f7fa bb1c 	b.w	13a0 <process_event>

00006d68 <validate_args>:
{
    6d68:	b510      	push	{r4, lr}
    6d6a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6d6c:	b140      	cbz	r0, 6d80 <validate_args+0x18>
    6d6e:	b139      	cbz	r1, 6d80 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6d70:	1d08      	adds	r0, r1, #4
    6d72:	f7ff ff8c 	bl	6c8e <sys_notify_validate>
	if ((rv == 0)
    6d76:	b928      	cbnz	r0, 6d84 <validate_args+0x1c>
	    && ((cli->notify.flags
    6d78:	68a3      	ldr	r3, [r4, #8]
    6d7a:	f033 0303 	bics.w	r3, r3, #3
    6d7e:	d001      	beq.n	6d84 <validate_args+0x1c>
		rv = -EINVAL;
    6d80:	f06f 0015 	mvn.w	r0, #21
}
    6d84:	bd10      	pop	{r4, pc}

00006d86 <onoff_manager_init>:
{
    6d86:	b538      	push	{r3, r4, r5, lr}
    6d88:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6d8a:	4605      	mov	r5, r0
    6d8c:	b158      	cbz	r0, 6da6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6d8e:	b151      	cbz	r1, 6da6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6d90:	680b      	ldr	r3, [r1, #0]
    6d92:	b143      	cbz	r3, 6da6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6d94:	684b      	ldr	r3, [r1, #4]
    6d96:	b133      	cbz	r3, 6da6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6d98:	221c      	movs	r2, #28
    6d9a:	2100      	movs	r1, #0
    6d9c:	f000 f954 	bl	7048 <memset>
    6da0:	612c      	str	r4, [r5, #16]
	return 0;
    6da2:	2000      	movs	r0, #0
}
    6da4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6da6:	f06f 0015 	mvn.w	r0, #21
    6daa:	e7fb      	b.n	6da4 <onoff_manager_init+0x1e>

00006dac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6dac:	b570      	push	{r4, r5, r6, lr}
    6dae:	4604      	mov	r4, r0
    6db0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6db2:	f7ff ffd9 	bl	6d68 <validate_args>

	if (rv < 0) {
    6db6:	1e05      	subs	r5, r0, #0
    6db8:	db31      	blt.n	6e1e <onoff_request+0x72>
    6dba:	f04f 0320 	mov.w	r3, #32
    6dbe:	f3ef 8111 	mrs	r1, BASEPRI
    6dc2:	f383 8812 	msr	BASEPRI_MAX, r3
    6dc6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6dca:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6dcc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    6dce:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6dd2:	42ab      	cmp	r3, r5
    6dd4:	f000 0207 	and.w	r2, r0, #7
    6dd8:	d02e      	beq.n	6e38 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6dda:	2a02      	cmp	r2, #2
    6ddc:	d10e      	bne.n	6dfc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6dde:	3301      	adds	r3, #1
    6de0:	8363      	strh	r3, [r4, #26]
	rv = state;
    6de2:	4615      	mov	r5, r2
		notify = true;
    6de4:	2301      	movs	r3, #1
	__asm__ volatile(
    6de6:	f381 8811 	msr	BASEPRI, r1
    6dea:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6dee:	b1b3      	cbz	r3, 6e1e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    6df0:	2300      	movs	r3, #0
    6df2:	4631      	mov	r1, r6
    6df4:	4620      	mov	r0, r4
    6df6:	f7ff ff93 	bl	6d20 <notify_one>
    6dfa:	e010      	b.n	6e1e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6dfc:	0783      	lsls	r3, r0, #30
    6dfe:	d001      	beq.n	6e04 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    6e00:	2a06      	cmp	r2, #6
    6e02:	d10e      	bne.n	6e22 <onoff_request+0x76>
	parent->next = child;
    6e04:	2300      	movs	r3, #0
    6e06:	6033      	str	r3, [r6, #0]
	return list->tail;
    6e08:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    6e0a:	b993      	cbnz	r3, 6e32 <onoff_request+0x86>
	list->head = node;
    6e0c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    6e10:	4615      	mov	r5, r2
    6e12:	b962      	cbnz	r2, 6e2e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    6e14:	460a      	mov	r2, r1
    6e16:	4620      	mov	r0, r4
    6e18:	2102      	movs	r1, #2
    6e1a:	f7fa fac1 	bl	13a0 <process_event>
		}
	}

	return rv;
}
    6e1e:	4628      	mov	r0, r5
    6e20:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    6e22:	2a05      	cmp	r2, #5
    6e24:	bf0c      	ite	eq
    6e26:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6e2a:	f06f 0504 	mvnne.w	r5, #4
    6e2e:	2300      	movs	r3, #0
    6e30:	e7d9      	b.n	6de6 <onoff_request+0x3a>
	parent->next = child;
    6e32:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6e34:	6066      	str	r6, [r4, #4]
}
    6e36:	e7eb      	b.n	6e10 <onoff_request+0x64>
		rv = -EAGAIN;
    6e38:	f06f 050a 	mvn.w	r5, #10
    6e3c:	e7f7      	b.n	6e2e <onoff_request+0x82>

00006e3e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    6e3e:	b510      	push	{r4, lr}
	__asm__ volatile(
    6e40:	f04f 0320 	mov.w	r3, #32
    6e44:	f3ef 8211 	mrs	r2, BASEPRI
    6e48:	f383 8812 	msr	BASEPRI_MAX, r3
    6e4c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6e50:	8b04      	ldrh	r4, [r0, #24]
    6e52:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    6e56:	2c02      	cmp	r4, #2
    6e58:	d00a      	beq.n	6e70 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    6e5a:	2c01      	cmp	r4, #1
    6e5c:	bf0c      	ite	eq
    6e5e:	f06f 0004 	mvneq.w	r0, #4
    6e62:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    6e66:	f382 8811 	msr	BASEPRI, r2
    6e6a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6e6e:	e008      	b.n	6e82 <onoff_release+0x44>
	mgr->refs -= 1U;
    6e70:	8b43      	ldrh	r3, [r0, #26]
    6e72:	3b01      	subs	r3, #1
    6e74:	b29b      	uxth	r3, r3
    6e76:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6e78:	b923      	cbnz	r3, 6e84 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    6e7a:	4621      	mov	r1, r4
    6e7c:	f7fa fa90 	bl	13a0 <process_event>
	int rv = state;
    6e80:	4620      	mov	r0, r4
}
    6e82:	bd10      	pop	{r4, pc}
	int rv = state;
    6e84:	4620      	mov	r0, r4
    6e86:	e7ee      	b.n	6e66 <onoff_release+0x28>

00006e88 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6e88:	4604      	mov	r4, r0
    6e8a:	b508      	push	{r3, lr}
    6e8c:	4608      	mov	r0, r1
    6e8e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6e90:	461a      	mov	r2, r3
    6e92:	47a0      	blx	r4
	return z_impl_z_current_get();
    6e94:	f7ff f9e4 	bl	6260 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6e98:	f7fb f988 	bl	21ac <z_impl_k_thread_abort>

00006e9c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6e9c:	4770      	bx	lr

00006e9e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    6e9e:	b40f      	push	{r0, r1, r2, r3}
    6ea0:	b507      	push	{r0, r1, r2, lr}
    6ea2:	a904      	add	r1, sp, #16
    6ea4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6ea8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    6eaa:	f7fa fa6b 	bl	1384 <vprintk>
	va_end(ap);
}
    6eae:	b003      	add	sp, #12
    6eb0:	f85d eb04 	ldr.w	lr, [sp], #4
    6eb4:	b004      	add	sp, #16
    6eb6:	4770      	bx	lr

00006eb8 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    6eb8:	4770      	bx	lr

00006eba <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    6eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    6ebe:	1e0c      	subs	r4, r1, #0
    6ec0:	4605      	mov	r5, r0
    6ec2:	4617      	mov	r7, r2
    6ec4:	461e      	mov	r6, r3
    6ec6:	db10      	blt.n	6eea <flash_area_read+0x30>
    6ec8:	6882      	ldr	r2, [r0, #8]
    6eca:	18e3      	adds	r3, r4, r3
    6ecc:	4293      	cmp	r3, r2
    6ece:	d80c      	bhi.n	6eea <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    6ed0:	68c0      	ldr	r0, [r0, #12]
    6ed2:	f7fe fabb 	bl	544c <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    6ed6:	6869      	ldr	r1, [r5, #4]
    6ed8:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    6eda:	6883      	ldr	r3, [r0, #8]
    6edc:	681c      	ldr	r4, [r3, #0]
    6ede:	463a      	mov	r2, r7
    6ee0:	4633      	mov	r3, r6
    6ee2:	46a4      	mov	ip, r4
}
    6ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ee8:	4760      	bx	ip
    6eea:	f06f 0015 	mvn.w	r0, #21
    6eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ef2 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ef6:	1e0c      	subs	r4, r1, #0
    6ef8:	4605      	mov	r5, r0
    6efa:	4617      	mov	r7, r2
    6efc:	461e      	mov	r6, r3
    6efe:	db10      	blt.n	6f22 <flash_area_write+0x30>
    6f00:	6882      	ldr	r2, [r0, #8]
    6f02:	18e3      	adds	r3, r4, r3
    6f04:	4293      	cmp	r3, r2
    6f06:	d80c      	bhi.n	6f22 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6f08:	68c0      	ldr	r0, [r0, #12]
    6f0a:	f7fe fa9f 	bl	544c <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6f0e:	6869      	ldr	r1, [r5, #4]
    6f10:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    6f12:	6883      	ldr	r3, [r0, #8]
    6f14:	685c      	ldr	r4, [r3, #4]
    6f16:	463a      	mov	r2, r7
    6f18:	4633      	mov	r3, r6
    6f1a:	46a4      	mov	ip, r4

	return rc;
}
    6f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f20:	4760      	bx	ip
    6f22:	f06f 0015 	mvn.w	r0, #21
    6f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006f2a <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    6f2a:	b570      	push	{r4, r5, r6, lr}
    6f2c:	1e0c      	subs	r4, r1, #0
    6f2e:	4605      	mov	r5, r0
    6f30:	4616      	mov	r6, r2
    6f32:	db0e      	blt.n	6f52 <flash_area_erase+0x28>
    6f34:	18a3      	adds	r3, r4, r2
    6f36:	6882      	ldr	r2, [r0, #8]
    6f38:	4293      	cmp	r3, r2
    6f3a:	d80a      	bhi.n	6f52 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6f3c:	68c0      	ldr	r0, [r0, #12]
    6f3e:	f7fe fa85 	bl	544c <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    6f42:	6869      	ldr	r1, [r5, #4]
    6f44:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    6f46:	6883      	ldr	r3, [r0, #8]
    6f48:	4632      	mov	r2, r6
    6f4a:	689b      	ldr	r3, [r3, #8]

	return rc;
}
    6f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f50:	4718      	bx	r3
    6f52:	f06f 0015 	mvn.w	r0, #21
    6f56:	bd70      	pop	{r4, r5, r6, pc}

00006f58 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    6f58:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    6f5a:	68c0      	ldr	r0, [r0, #12]
    6f5c:	f7fe fa76 	bl	544c <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    6f60:	6883      	ldr	r3, [r0, #8]
    6f62:	68db      	ldr	r3, [r3, #12]
    6f64:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    6f66:	6800      	ldr	r0, [r0, #0]
    6f68:	bd08      	pop	{r3, pc}

00006f6a <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    6f6a:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    6f6c:	68c0      	ldr	r0, [r0, #12]
    6f6e:	f7fe fa6d 	bl	544c <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6f72:	6883      	ldr	r3, [r0, #8]
    6f74:	68db      	ldr	r3, [r3, #12]
    6f76:	4798      	blx	r3

	return param->erase_value;
}
    6f78:	7900      	ldrb	r0, [r0, #4]
    6f7a:	bd08      	pop	{r3, pc}

00006f7c <get_sectors_cb>:
{
    6f7c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    6f7e:	6802      	ldr	r2, [r0, #0]
    6f80:	684c      	ldr	r4, [r1, #4]
    6f82:	42a2      	cmp	r2, r4
    6f84:	d316      	bcc.n	6fb4 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6f86:	688b      	ldr	r3, [r1, #8]
    6f88:	4423      	add	r3, r4
    6f8a:	429a      	cmp	r2, r3
    6f8c:	d206      	bcs.n	6f9c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    6f8e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    6f92:	42ab      	cmp	r3, r5
    6f94:	d304      	bcc.n	6fa0 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    6f96:	f06f 030b 	mvn.w	r3, #11
    6f9a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    6f9c:	2000      	movs	r0, #0
    6f9e:	e00a      	b.n	6fb6 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6fa0:	68cd      	ldr	r5, [r1, #12]
    6fa2:	1b12      	subs	r2, r2, r4
    6fa4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    6fa8:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6fac:	6842      	ldr	r2, [r0, #4]
    6fae:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    6fb0:	3301      	adds	r3, #1
    6fb2:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    6fb4:	2001      	movs	r0, #1
}
    6fb6:	bd70      	pop	{r4, r5, r6, pc}

00006fb8 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6fb8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6fba:	6800      	ldr	r0, [r0, #0]
    6fbc:	f7fa bd6e 	b.w	1a9c <z_arm_fatal_error>

00006fc0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6fc0:	2100      	movs	r1, #0
    6fc2:	2001      	movs	r0, #1
    6fc4:	f7fa bd6a 	b.w	1a9c <z_arm_fatal_error>

00006fc8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6fc8:	b508      	push	{r3, lr}
	handler();
    6fca:	f7fa fddf 	bl	1b8c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6fd2:	f7fa be8b 	b.w	1cec <z_arm_exc_exit>

00006fd6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6fd6:	3901      	subs	r1, #1
    6fd8:	4603      	mov	r3, r0
    6fda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6fde:	b90a      	cbnz	r2, 6fe4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6fe0:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6fe2:	4770      	bx	lr
		*d = *s;
    6fe4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6fe8:	e7f7      	b.n	6fda <strcpy+0x4>

00006fea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6fea:	4603      	mov	r3, r0
	size_t n = 0;
    6fec:	2000      	movs	r0, #0

	while (*s != '\0') {
    6fee:	5c1a      	ldrb	r2, [r3, r0]
    6ff0:	b902      	cbnz	r2, 6ff4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6ff2:	4770      	bx	lr
		n++;
    6ff4:	3001      	adds	r0, #1
    6ff6:	e7fa      	b.n	6fee <strlen+0x4>

00006ff8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6ff8:	1e43      	subs	r3, r0, #1
    6ffa:	3901      	subs	r1, #1
    6ffc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7000:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7004:	4282      	cmp	r2, r0
    7006:	d101      	bne.n	700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7008:	2a00      	cmp	r2, #0
    700a:	d1f7      	bne.n	6ffc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    700c:	1a10      	subs	r0, r2, r0
    700e:	4770      	bx	lr

00007010 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    7010:	b510      	push	{r4, lr}
    7012:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    7014:	b15a      	cbz	r2, 702e <memcmp+0x1e>
    7016:	3901      	subs	r1, #1
    7018:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    701a:	f813 0b01 	ldrb.w	r0, [r3], #1
    701e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7022:	42a3      	cmp	r3, r4
    7024:	d001      	beq.n	702a <memcmp+0x1a>
    7026:	4290      	cmp	r0, r2
    7028:	d0f7      	beq.n	701a <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    702a:	1a80      	subs	r0, r0, r2
}
    702c:	bd10      	pop	{r4, pc}
		return 0;
    702e:	4610      	mov	r0, r2
    7030:	e7fc      	b.n	702c <memcmp+0x1c>

00007032 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7032:	b510      	push	{r4, lr}
    7034:	1e43      	subs	r3, r0, #1
    7036:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7038:	4291      	cmp	r1, r2
    703a:	d100      	bne.n	703e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    703c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    703e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7042:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7046:	e7f7      	b.n	7038 <memcpy+0x6>

00007048 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7048:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    704a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    704c:	4603      	mov	r3, r0
	while (n > 0) {
    704e:	4293      	cmp	r3, r2
    7050:	d100      	bne.n	7054 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7052:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7054:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7058:	e7f9      	b.n	704e <memset+0x6>

0000705a <_stdout_hook_default>:
}
    705a:	f04f 30ff 	mov.w	r0, #4294967295
    705e:	4770      	bx	lr

00007060 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7060:	6903      	ldr	r3, [r0, #16]
    7062:	b2c9      	uxtb	r1, r1
    7064:	220c      	movs	r2, #12
    7066:	fb01 3302 	mla	r3, r1, r2, r3
    706a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    706c:	f000 0007 	and.w	r0, r0, #7
    7070:	4770      	bx	lr

00007072 <set_on_state>:
	__asm__ volatile(
    7072:	f04f 0320 	mov.w	r3, #32
    7076:	f3ef 8211 	mrs	r2, BASEPRI
    707a:	f383 8812 	msr	BASEPRI_MAX, r3
    707e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7082:	6803      	ldr	r3, [r0, #0]
    7084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7088:	f043 0302 	orr.w	r3, r3, #2
    708c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    708e:	f382 8811 	msr	BASEPRI, r2
    7092:	f3bf 8f6f 	isb	sy
}
    7096:	4770      	bx	lr

00007098 <stop>:
{
    7098:	4603      	mov	r3, r0
    709a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    709c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    709e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    70a0:	f04f 0420 	mov.w	r4, #32
    70a4:	f3ef 8611 	mrs	r6, BASEPRI
    70a8:	f384 8812 	msr	BASEPRI_MAX, r4
    70ac:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    70b0:	250c      	movs	r5, #12
    70b2:	fb05 0401 	mla	r4, r5, r1, r0
    70b6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    70b8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    70bc:	d001      	beq.n	70c2 <stop+0x2a>
    70be:	42a2      	cmp	r2, r4
    70c0:	d111      	bne.n	70e6 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    70c2:	fb05 0001 	mla	r0, r5, r1, r0
    70c6:	2201      	movs	r2, #1
    70c8:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    70ca:	2000      	movs	r0, #0
	__asm__ volatile(
    70cc:	f386 8811 	msr	BASEPRI, r6
    70d0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    70d4:	b930      	cbnz	r0, 70e4 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    70d6:	685b      	ldr	r3, [r3, #4]
    70d8:	220c      	movs	r2, #12
    70da:	fb02 3101 	mla	r1, r2, r1, r3
    70de:	684b      	ldr	r3, [r1, #4]
    70e0:	4798      	blx	r3
	return 0;
    70e2:	2000      	movs	r0, #0
}
    70e4:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    70e6:	f04f 30ff 	mov.w	r0, #4294967295
    70ea:	e7ef      	b.n	70cc <stop+0x34>

000070ec <api_stop>:
	return stop(dev, subsys, CTX_API);
    70ec:	2280      	movs	r2, #128	; 0x80
    70ee:	f7ff bfd3 	b.w	7098 <stop>

000070f2 <async_start>:
{
    70f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70f4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    70f6:	6904      	ldr	r4, [r0, #16]
{
    70f8:	4605      	mov	r5, r0
    70fa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    70fc:	f04f 0020 	mov.w	r0, #32
    7100:	f3ef 8c11 	mrs	ip, BASEPRI
    7104:	f380 8812 	msr	BASEPRI_MAX, r0
    7108:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    710c:	260c      	movs	r6, #12
    710e:	fb06 4601 	mla	r6, r6, r1, r4
    7112:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7114:	f000 0e07 	and.w	lr, r0, #7
    7118:	f1be 0f01 	cmp.w	lr, #1
    711c:	d110      	bne.n	7140 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    711e:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    7120:	2600      	movs	r6, #0
	__asm__ volatile(
    7122:	f38c 8811 	msr	BASEPRI, ip
    7126:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    712a:	b93e      	cbnz	r6, 713c <async_start+0x4a>
	subdata->cb = cb;
    712c:	200c      	movs	r0, #12
    712e:	4341      	muls	r1, r0
    7130:	440c      	add	r4, r1
	subdata->user_data = user_data;
    7132:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7136:	686b      	ldr	r3, [r5, #4]
    7138:	585b      	ldr	r3, [r3, r1]
    713a:	4798      	blx	r3
}
    713c:	4630      	mov	r0, r6
    713e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7140:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    7144:	4287      	cmp	r7, r0
    7146:	bf14      	ite	ne
    7148:	f04f 36ff 	movne.w	r6, #4294967295
    714c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7150:	e7e7      	b.n	7122 <async_start+0x30>

00007152 <api_start>:
{
    7152:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7154:	2480      	movs	r4, #128	; 0x80
    7156:	9400      	str	r4, [sp, #0]
    7158:	f7ff ffcb 	bl	70f2 <async_start>
}
    715c:	b002      	add	sp, #8
    715e:	bd10      	pop	{r4, pc}

00007160 <onoff_started_callback>:
	return &data->mgr[type];
    7160:	6900      	ldr	r0, [r0, #16]
{
    7162:	b410      	push	{r4}
	return &data->mgr[type];
    7164:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7166:	241c      	movs	r4, #28
    7168:	fb03 0004 	mla	r0, r3, r4, r0
    716c:	2100      	movs	r1, #0
}
    716e:	bc10      	pop	{r4}
	notify(mgr, 0);
    7170:	4710      	bx	r2

00007172 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7172:	2000      	movs	r0, #0
    7174:	f002 b82a 	b.w	91cc <nrfx_clock_start>

00007178 <blocking_start_callback>:
{
    7178:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    717a:	f7fe bc13 	b.w	59a4 <z_impl_k_sem_give>

0000717e <lfclk_stop>:
{
    717e:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    7180:	f7fb fb3e 	bl	2800 <z_nrf_clock_calibration_lfclk_stopped>
}
    7184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7188:	2000      	movs	r0, #0
    718a:	f002 b857 	b.w	923c <nrfx_clock_stop>

0000718e <timeout_handler>:
	start_cal_process();
    718e:	f7fb ba6f 	b.w	2670 <start_cal_process>

00007192 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7192:	6843      	ldr	r3, [r0, #4]
    7194:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7196:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    719a:	600b      	str	r3, [r1, #0]
}
    719c:	2000      	movs	r0, #0
    719e:	4770      	bx	lr

000071a0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    71a0:	6843      	ldr	r3, [r0, #4]
    71a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    71a4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    71a8:	4042      	eors	r2, r0
    71aa:	400a      	ands	r2, r1
    71ac:	4042      	eors	r2, r0
    p_reg->OUT = value;
    71ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    71b2:	2000      	movs	r0, #0
    71b4:	4770      	bx	lr

000071b6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    71b6:	6843      	ldr	r3, [r0, #4]
    71b8:	685b      	ldr	r3, [r3, #4]
}
    71ba:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    71bc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    71c0:	4770      	bx	lr

000071c2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    71c2:	6843      	ldr	r3, [r0, #4]
    71c4:	685b      	ldr	r3, [r3, #4]
}
    71c6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    71c8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    71cc:	4770      	bx	lr

000071ce <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    71ce:	6843      	ldr	r3, [r0, #4]
    71d0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    71d2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    71d6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    71d8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    71dc:	2000      	movs	r0, #0
    71de:	4770      	bx	lr

000071e0 <gpio_nrfx_manage_callback>:
	return port->data;
    71e0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    71e2:	6858      	ldr	r0, [r3, #4]
{
    71e4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    71e6:	b158      	cbz	r0, 7200 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    71e8:	2400      	movs	r4, #0
    71ea:	4281      	cmp	r1, r0
    71ec:	d112      	bne.n	7214 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    71ee:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    71f0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    71f2:	b954      	cbnz	r4, 720a <gpio_nrfx_manage_callback+0x2a>
    71f4:	428d      	cmp	r5, r1
	list->head = node;
    71f6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    71f8:	d100      	bne.n	71fc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    71fa:	6098      	str	r0, [r3, #8]
	parent->next = child;
    71fc:	2000      	movs	r0, #0
    71fe:	6008      	str	r0, [r1, #0]
	if (set) {
    7200:	b96a      	cbnz	r2, 721e <gpio_nrfx_manage_callback+0x3e>
	return 0;
    7202:	2000      	movs	r0, #0
}
    7204:	bd30      	pop	{r4, r5, pc}
    7206:	4628      	mov	r0, r5
    7208:	e7ef      	b.n	71ea <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    720a:	428d      	cmp	r5, r1
	parent->next = child;
    720c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    720e:	bf08      	it	eq
    7210:	609c      	streq	r4, [r3, #8]
}
    7212:	e7f3      	b.n	71fc <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    7214:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7216:	4604      	mov	r4, r0
    7218:	2d00      	cmp	r5, #0
    721a:	d1f4      	bne.n	7206 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    721c:	b13a      	cbz	r2, 722e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    721e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    7220:	685a      	ldr	r2, [r3, #4]
    7222:	600a      	str	r2, [r1, #0]
	list->head = node;
    7224:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7226:	2800      	cmp	r0, #0
    7228:	d1eb      	bne.n	7202 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    722a:	6099      	str	r1, [r3, #8]
}
    722c:	e7ea      	b.n	7204 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    722e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7232:	e7e7      	b.n	7204 <gpio_nrfx_manage_callback+0x24>

00007234 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    7234:	b530      	push	{r4, r5, lr}
    7236:	4604      	mov	r4, r0
	while (*count) {
    7238:	6808      	ldr	r0, [r1, #0]
    723a:	b908      	cbnz	r0, 7240 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    723c:	6010      	str	r0, [r2, #0]
	return NULL;
    723e:	e004      	b.n	724a <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    7240:	6823      	ldr	r3, [r4, #0]
    7242:	685d      	ldr	r5, [r3, #4]
    7244:	b115      	cbz	r5, 724c <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    7246:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    7248:	6015      	str	r5, [r2, #0]
}
    724a:	bd30      	pop	{r4, r5, pc}
		++(*current);
    724c:	3308      	adds	r3, #8
		--(*count);
    724e:	3801      	subs	r0, #1
		++(*current);
    7250:	6023      	str	r3, [r4, #0]
		--(*count);
    7252:	6008      	str	r0, [r1, #0]
    7254:	e7f0      	b.n	7238 <spi_context_get_next_buf.constprop.0+0x4>

00007256 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    7256:	4603      	mov	r3, r0
    7258:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    725a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    725c:	7919      	ldrb	r1, [r3, #4]
    725e:	2301      	movs	r3, #1
    7260:	fa03 f101 	lsl.w	r1, r3, r1
    7264:	6903      	ldr	r3, [r0, #16]
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    726a:	bf18      	it	ne
    726c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7270:	b112      	cbz	r2, 7278 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    7272:	6883      	ldr	r3, [r0, #8]
    7274:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7276:	4718      	bx	r3
    7278:	6883      	ldr	r3, [r0, #8]
    727a:	691b      	ldr	r3, [r3, #16]
    727c:	e7fb      	b.n	7276 <gpio_pin_set_dt.isra.0+0x20>

0000727e <_spi_context_cs_control>:
{
    727e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7280:	6803      	ldr	r3, [r0, #0]
{
    7282:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7284:	b1e3      	cbz	r3, 72c0 <_spi_context_cs_control+0x42>
    7286:	6898      	ldr	r0, [r3, #8]
    7288:	b1d0      	cbz	r0, 72c0 <_spi_context_cs_control+0x42>
    728a:	6805      	ldr	r5, [r0, #0]
    728c:	b1c5      	cbz	r5, 72c0 <_spi_context_cs_control+0x42>
		if (on) {
    728e:	b149      	cbz	r1, 72a4 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    7290:	2101      	movs	r1, #1
    7292:	f7ff ffe0 	bl	7256 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    7296:	6823      	ldr	r3, [r4, #0]
    7298:	689b      	ldr	r3, [r3, #8]
    729a:	6898      	ldr	r0, [r3, #8]
}
    729c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    72a0:	f002 b9fa 	b.w	9698 <z_impl_k_busy_wait>
			if (!force_off &&
    72a4:	b912      	cbnz	r2, 72ac <_spi_context_cs_control+0x2e>
    72a6:	889b      	ldrh	r3, [r3, #4]
    72a8:	04db      	lsls	r3, r3, #19
    72aa:	d409      	bmi.n	72c0 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    72ac:	6880      	ldr	r0, [r0, #8]
    72ae:	f002 f9f3 	bl	9698 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    72b2:	6823      	ldr	r3, [r4, #0]
    72b4:	2100      	movs	r1, #0
    72b6:	6898      	ldr	r0, [r3, #8]
}
    72b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    72bc:	f7ff bfcb 	b.w	7256 <gpio_pin_set_dt.isra.0>
}
    72c0:	bd38      	pop	{r3, r4, r5, pc}

000072c2 <spi_context_unlock_unconditionally>:
{
    72c2:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    72c4:	2201      	movs	r2, #1
    72c6:	2100      	movs	r1, #0
{
    72c8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    72ca:	f7ff ffd8 	bl	727e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    72ce:	69a3      	ldr	r3, [r4, #24]
    72d0:	b933      	cbnz	r3, 72e0 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    72d2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    72d4:	f104 0010 	add.w	r0, r4, #16
}
    72d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72dc:	f7fe bb62 	b.w	59a4 <z_impl_k_sem_give>
    72e0:	bd10      	pop	{r4, pc}

000072e2 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    72e2:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    72e4:	6803      	ldr	r3, [r0, #0]
    72e6:	428b      	cmp	r3, r1
{
    72e8:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    72ea:	d106      	bne.n	72fa <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    72ec:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    72f0:	b934      	cbnz	r4, 7300 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    72f2:	f7ff ffe6 	bl	72c2 <spi_context_unlock_unconditionally>
	return 0;
    72f6:	4620      	mov	r0, r4
}
    72f8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    72fa:	f06f 0015 	mvn.w	r0, #21
    72fe:	e7fb      	b.n	72f8 <spi_nrfx_release+0x16>
		return -EBUSY;
    7300:	f06f 000f 	mvn.w	r0, #15
    7304:	e7f8      	b.n	72f8 <spi_nrfx_release+0x16>

00007306 <spi_nor_pages_layout>:
	*layout = &cfg->layout;
    7306:	6843      	ldr	r3, [r0, #4]
    7308:	3314      	adds	r3, #20
    730a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    730c:	2301      	movs	r3, #1
    730e:	6013      	str	r3, [r2, #0]
}
    7310:	4770      	bx	lr

00007312 <release_device.isra.0>:
    7312:	f7fe bb47 	b.w	59a4 <z_impl_k_sem_give>

00007316 <acquire_device.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    7316:	f04f 32ff 	mov.w	r2, #4294967295
    731a:	f04f 33ff 	mov.w	r3, #4294967295
    731e:	f7fe bb61 	b.w	59e4 <z_impl_k_sem_take>

00007322 <spi_nor_access>:
{
    7322:	b5f0      	push	{r4, r5, r6, r7, lr}
    7324:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_nor_config *const driver_cfg = dev->config;
    7326:	6844      	ldr	r4, [r0, #4]
	struct spi_nor_data *const driver_data = dev->data;
    7328:	6907      	ldr	r7, [r0, #16]
{
    732a:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct spi_buf spi_buf[2] = {
    732c:	f8cd d018 	str.w	sp, [sp, #24]
	uint8_t buf[5] = { 0 };
    7330:	2000      	movs	r0, #0
    7332:	9000      	str	r0, [sp, #0]
    7334:	f88d 0004 	strb.w	r0, [sp, #4]
	struct spi_buf spi_buf[2] = {
    7338:	2001      	movs	r0, #1
    733a:	9007      	str	r0, [sp, #28]
    733c:	9810      	ldr	r0, [sp, #64]	; 0x40
	buf[0] = opcode;
    733e:	f88d 1000 	strb.w	r1, [sp]
	if (is_addressed) {
    7342:	07d1      	lsls	r1, r2, #31
	struct spi_buf spi_buf[2] = {
    7344:	e9cd 0608 	strd	r0, r6, [sp, #32]
	bool is_write = (access & NOR_ACCESS_WRITE) != 0U;
    7348:	f002 0580 	and.w	r5, r2, #128	; 0x80
	if (is_addressed) {
    734c:	d50d      	bpl.n	736a <spi_nor_access+0x48>
				      && driver_data->flag_access_32bit));
    734e:	7d3a      	ldrb	r2, [r7, #20]
		union {
    7350:	ba1b      	rev	r3, r3
		} addr32 = {
    7352:	9304      	str	r3, [sp, #16]
		if (use_32bit) {
    7354:	07d3      	lsls	r3, r2, #31
    7356:	d51d      	bpl.n	7394 <spi_nor_access+0x72>
			memcpy(&buf[1], &addr32.u8[0], 4);
    7358:	2204      	movs	r2, #4
    735a:	a904      	add	r1, sp, #16
    735c:	f10d 0001 	add.w	r0, sp, #1
    7360:	f7ff fe67 	bl	7032 <memcpy>
			spi_buf[0].len += 4;
    7364:	9b07      	ldr	r3, [sp, #28]
    7366:	3304      	adds	r3, #4
			spi_buf[0].len += 3;
    7368:	9307      	str	r3, [sp, #28]
		.count = (length != 0) ? 2 : 1,
    736a:	2e00      	cmp	r6, #0
	const struct spi_buf_set tx_set = {
    736c:	ab06      	add	r3, sp, #24
		.count = (length != 0) ? 2 : 1,
    736e:	bf14      	ite	ne
    7370:	2202      	movne	r2, #2
    7372:	2201      	moveq	r2, #1
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
    7374:	4621      	mov	r1, r4
	const struct spi_buf_set rx_set = {
    7376:	e9cd 2303 	strd	r2, r3, [sp, #12]
	const struct spi_buf_set tx_set = {
    737a:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set rx_set = {
    737c:	2302      	movs	r3, #2
    737e:	f851 0b04 	ldr.w	r0, [r1], #4
    7382:	9305      	str	r3, [sp, #20]
	if (is_write) {
    7384:	b185      	cbz	r5, 73a8 <spi_nor_access+0x86>
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    7386:	6883      	ldr	r3, [r0, #8]
    7388:	681c      	ldr	r4, [r3, #0]
    738a:	2300      	movs	r3, #0
    738c:	aa02      	add	r2, sp, #8
    738e:	47a0      	blx	r4
}
    7390:	b00b      	add	sp, #44	; 0x2c
    7392:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(&buf[1], &addr32.u8[1], 3);
    7394:	2203      	movs	r2, #3
    7396:	f10d 0111 	add.w	r1, sp, #17
    739a:	f10d 0001 	add.w	r0, sp, #1
    739e:	f7ff fe48 	bl	7032 <memcpy>
			spi_buf[0].len += 3;
    73a2:	9b07      	ldr	r3, [sp, #28]
    73a4:	3303      	adds	r3, #3
    73a6:	e7df      	b.n	7368 <spi_nor_access+0x46>
    73a8:	6883      	ldr	r3, [r0, #8]
    73aa:	681c      	ldr	r4, [r3, #0]
    73ac:	ab04      	add	r3, sp, #16
    73ae:	e7ed      	b.n	738c <spi_nor_access+0x6a>

000073b0 <spi_nor_write_protection_set>:
{
    73b0:	b507      	push	{r0, r1, r2, lr}
	ret = spi_nor_cmd_write(dev, (write_protect) ?
    73b2:	2900      	cmp	r1, #0
    73b4:	f04f 0300 	mov.w	r3, #0
    73b8:	e9cd 3300 	strd	r3, r3, [sp]
    73bc:	f04f 0280 	mov.w	r2, #128	; 0x80
    73c0:	bf14      	ite	ne
    73c2:	2104      	movne	r1, #4
    73c4:	2106      	moveq	r1, #6
    73c6:	f7ff ffac 	bl	7322 <spi_nor_access>
}
    73ca:	b003      	add	sp, #12
    73cc:	f85d fb04 	ldr.w	pc, [sp], #4

000073d0 <spi_nor_read>:
{
    73d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    73d2:	461e      	mov	r6, r3
	return cfg->flash_size;
    73d4:	6843      	ldr	r3, [r0, #4]
	if ((addr < 0) || ((addr + size) > flash_size)) {
    73d6:	1e0d      	subs	r5, r1, #0
	return cfg->flash_size;
    73d8:	691b      	ldr	r3, [r3, #16]
{
    73da:	4604      	mov	r4, r0
    73dc:	4617      	mov	r7, r2
	if ((addr < 0) || ((addr + size) > flash_size)) {
    73de:	db14      	blt.n	740a <spi_nor_read+0x3a>
    73e0:	19aa      	adds	r2, r5, r6
    73e2:	429a      	cmp	r2, r3
    73e4:	d811      	bhi.n	740a <spi_nor_read+0x3a>
	acquire_device(dev);
    73e6:	6900      	ldr	r0, [r0, #16]
    73e8:	f7ff ff95 	bl	7316 <acquire_device.isra.0>
	ret = spi_nor_cmd_addr_read(dev, SPI_NOR_CMD_READ, addr, dest, size);
    73ec:	462b      	mov	r3, r5
    73ee:	e9cd 7600 	strd	r7, r6, [sp]
    73f2:	2201      	movs	r2, #1
    73f4:	2103      	movs	r1, #3
    73f6:	4620      	mov	r0, r4
    73f8:	f7ff ff93 	bl	7322 <spi_nor_access>
    73fc:	4605      	mov	r5, r0
	release_device(dev);
    73fe:	6920      	ldr	r0, [r4, #16]
    7400:	f7ff ff87 	bl	7312 <release_device.isra.0>
}
    7404:	4628      	mov	r0, r5
    7406:	b003      	add	sp, #12
    7408:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
    740a:	f06f 0515 	mvn.w	r5, #21
    740e:	e7f9      	b.n	7404 <spi_nor_read+0x34>

00007410 <spi_nor_wait_until_ready.isra.0>:
static int spi_nor_wait_until_ready(const struct device *dev)
    7410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7412:	4604      	mov	r4, r0
		ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDSR, &reg, sizeof(reg));
    7414:	2501      	movs	r5, #1
    7416:	f10d 060f 	add.w	r6, sp, #15
    741a:	2300      	movs	r3, #0
    741c:	e9cd 6500 	strd	r6, r5, [sp]
    7420:	461a      	mov	r2, r3
    7422:	2105      	movs	r1, #5
    7424:	4620      	mov	r0, r4
    7426:	f7ff ff7c 	bl	7322 <spi_nor_access>
	} while (!ret && (reg & SPI_NOR_WIP_BIT));
    742a:	b918      	cbnz	r0, 7434 <spi_nor_wait_until_ready.isra.0+0x24>
    742c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7430:	07db      	lsls	r3, r3, #31
    7432:	d4f2      	bmi.n	741a <spi_nor_wait_until_ready.isra.0+0xa>
}
    7434:	b004      	add	sp, #16
    7436:	bd70      	pop	{r4, r5, r6, pc}

00007438 <spi_nor_write>:
{
    7438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    743c:	4605      	mov	r5, r0
    743e:	461f      	mov	r7, r3
	return cfg->flash_size;
    7440:	6843      	ldr	r3, [r0, #4]
	const struct spi_nor_data *data = dev->data;
    7442:	6900      	ldr	r0, [r0, #16]
	return cfg->flash_size;
    7444:	691b      	ldr	r3, [r3, #16]
	return data->page_size;
    7446:	f8b0 901e 	ldrh.w	r9, [r0, #30]
	if ((addr < 0) || ((size + addr) > flash_size)) {
    744a:	1e0e      	subs	r6, r1, #0
{
    744c:	4692      	mov	sl, r2
	if ((addr < 0) || ((size + addr) > flash_size)) {
    744e:	db46      	blt.n	74de <spi_nor_write+0xa6>
    7450:	19f2      	adds	r2, r6, r7
    7452:	429a      	cmp	r2, r3
    7454:	d843      	bhi.n	74de <spi_nor_write+0xa6>
	acquire_device(dev);
    7456:	f7ff ff5e 	bl	7316 <acquire_device.isra.0>
	ret = spi_nor_write_protection_set(dev, false);
    745a:	2100      	movs	r1, #0
    745c:	4628      	mov	r0, r5
    745e:	f7ff ffa7 	bl	73b0 <spi_nor_write_protection_set>
	if (ret == 0) {
    7462:	4604      	mov	r4, r0
    7464:	b908      	cbnz	r0, 746a <spi_nor_write+0x32>
			spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
    7466:	4683      	mov	fp, r0
		while (size > 0) {
    7468:	b96f      	cbnz	r7, 7486 <spi_nor_write+0x4e>
	int ret2 = spi_nor_write_protection_set(dev, true);
    746a:	2101      	movs	r1, #1
    746c:	4628      	mov	r0, r5
    746e:	f7ff ff9f 	bl	73b0 <spi_nor_write_protection_set>
		ret = ret2;
    7472:	2c00      	cmp	r4, #0
    7474:	bf08      	it	eq
    7476:	4604      	moveq	r4, r0
	release_device(dev);
    7478:	6928      	ldr	r0, [r5, #16]
    747a:	f7ff ff4a 	bl	7312 <release_device.isra.0>
}
    747e:	4620      	mov	r0, r4
    7480:	b003      	add	sp, #12
    7482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (to_write >= page_size) {
    7486:	45b9      	cmp	r9, r7
    7488:	46c8      	mov	r8, r9
    748a:	bf28      	it	cs
    748c:	46b8      	movcs	r8, r7
			if (((addr + to_write - 1U) / page_size)
    748e:	eb06 0308 	add.w	r3, r6, r8
			!= (addr / page_size)) {
    7492:	fb96 f2f9 	sdiv	r2, r6, r9
			if (((addr + to_write - 1U) / page_size)
    7496:	3b01      	subs	r3, #1
    7498:	fbb3 f3f9 	udiv	r3, r3, r9
    749c:	4293      	cmp	r3, r2
				to_write = page_size - (addr % page_size);
    749e:	bf1c      	itt	ne
    74a0:	fb09 6212 	mlsne	r2, r9, r2, r6
    74a4:	eba9 0802 	subne.w	r8, r9, r2
			spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
    74a8:	2300      	movs	r3, #0
    74aa:	2280      	movs	r2, #128	; 0x80
    74ac:	2106      	movs	r1, #6
    74ae:	e9cd bb00 	strd	fp, fp, [sp]
    74b2:	4628      	mov	r0, r5
    74b4:	f7ff ff35 	bl	7322 <spi_nor_access>
			ret = spi_nor_cmd_addr_write(dev, SPI_NOR_CMD_PP, addr,
    74b8:	e9cd a800 	strd	sl, r8, [sp]
    74bc:	4633      	mov	r3, r6
    74be:	2281      	movs	r2, #129	; 0x81
    74c0:	2102      	movs	r1, #2
    74c2:	4628      	mov	r0, r5
    74c4:	f7ff ff2d 	bl	7322 <spi_nor_access>
			if (ret != 0) {
    74c8:	b938      	cbnz	r0, 74da <spi_nor_write+0xa2>
			spi_nor_wait_until_ready(dev);
    74ca:	4628      	mov	r0, r5
			size -= to_write;
    74cc:	eba7 0708 	sub.w	r7, r7, r8
			src = (const uint8_t *)src + to_write;
    74d0:	44c2      	add	sl, r8
			addr += to_write;
    74d2:	4446      	add	r6, r8
			spi_nor_wait_until_ready(dev);
    74d4:	f7ff ff9c 	bl	7410 <spi_nor_wait_until_ready.isra.0>
    74d8:	e7c6      	b.n	7468 <spi_nor_write+0x30>
    74da:	4604      	mov	r4, r0
    74dc:	e7c5      	b.n	746a <spi_nor_write+0x32>
		return -EINVAL;
    74de:	f06f 0415 	mvn.w	r4, #21
    74e2:	e7cc      	b.n	747e <spi_nor_write+0x46>

000074e4 <spi_nor_erase>:
	return cfg->flash_size;
    74e4:	6843      	ldr	r3, [r0, #4]
{
    74e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((addr < 0) || ((size + addr) > flash_size)) {
    74ea:	1e0f      	subs	r7, r1, #0
	return cfg->flash_size;
    74ec:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
    74f0:	4605      	mov	r5, r0
    74f2:	4616      	mov	r6, r2
	if ((addr < 0) || ((size + addr) > flash_size)) {
    74f4:	db6d      	blt.n	75d2 <spi_nor_erase+0xee>
    74f6:	18bb      	adds	r3, r7, r2
    74f8:	4553      	cmp	r3, sl
    74fa:	d86a      	bhi.n	75d2 <spi_nor_erase+0xee>
	if ((size % SPI_NOR_SECTOR_SIZE) != 0) {
    74fc:	ea47 0902 	orr.w	r9, r7, r2
    7500:	f3c9 090b 	ubfx	r9, r9, #0, #12
    7504:	f1b9 0f00 	cmp.w	r9, #0
    7508:	d166      	bne.n	75d8 <spi_nor_erase+0xf4>
	acquire_device(dev);
    750a:	6900      	ldr	r0, [r0, #16]
    750c:	f7ff ff03 	bl	7316 <acquire_device.isra.0>
	ret = spi_nor_write_protection_set(dev, false);
    7510:	4649      	mov	r1, r9
    7512:	4628      	mov	r0, r5
    7514:	f7ff ff4c 	bl	73b0 <spi_nor_write_protection_set>
				    && SPI_NOR_IS_ALIGNED(addr, etp->exp)
    7518:	f04f 3bff 	mov.w	fp, #4294967295
	ret = spi_nor_write_protection_set(dev, false);
    751c:	4604      	mov	r4, r0
	while ((size > 0) && (ret == 0)) {
    751e:	2e00      	cmp	r6, #0
    7520:	d13e      	bne.n	75a0 <spi_nor_erase+0xbc>
	int ret2 = spi_nor_write_protection_set(dev, true);
    7522:	2101      	movs	r1, #1
    7524:	4628      	mov	r0, r5
    7526:	f7ff ff43 	bl	73b0 <spi_nor_write_protection_set>
		ret = ret2;
    752a:	2c00      	cmp	r4, #0
    752c:	bf08      	it	eq
    752e:	4604      	moveq	r4, r0
	release_device(dev);
    7530:	6928      	ldr	r0, [r5, #16]
    7532:	f7ff feee 	bl	7312 <release_device.isra.0>
}
    7536:	4620      	mov	r0, r4
    7538:	b003      	add	sp, #12
    753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const struct spi_nor_data *data = dev->data;
    753e:	692a      	ldr	r2, [r5, #16]
			const struct jesd216_erase_type *bet = NULL;
    7540:	46a0      	mov	r8, r4
    7542:	f102 0315 	add.w	r3, r2, #21
				    && SPI_NOR_IS_ALIGNED(size, etp->exp)
    7546:	ea47 0006 	orr.w	r0, r7, r6
    754a:	321d      	adds	r2, #29
				if ((etp->exp != 0)
    754c:	7859      	ldrb	r1, [r3, #1]
    754e:	b161      	cbz	r1, 756a <spi_nor_erase+0x86>
				    && SPI_NOR_IS_ALIGNED(addr, etp->exp)
    7550:	fa0b fc01 	lsl.w	ip, fp, r1
				    && SPI_NOR_IS_ALIGNED(size, etp->exp)
    7554:	ea30 0c0c 	bics.w	ip, r0, ip
    7558:	d107      	bne.n	756a <spi_nor_erase+0x86>
				    && ((bet == NULL)
    755a:	f1b8 0f00 	cmp.w	r8, #0
    755e:	d01a      	beq.n	7596 <spi_nor_erase+0xb2>
					|| (etp->exp > bet->exp))) {
    7560:	f898 c001 	ldrb.w	ip, [r8, #1]
    7564:	458c      	cmp	ip, r1
    7566:	bf38      	it	cc
    7568:	4698      	movcc	r8, r3
			for (uint8_t ei = 0; ei < JESD216_NUM_ERASE_TYPES; ++ei) {
    756a:	3302      	adds	r3, #2
    756c:	4293      	cmp	r3, r2
    756e:	d1ed      	bne.n	754c <spi_nor_erase+0x68>
			if (bet != NULL) {
    7570:	f1b8 0f00 	cmp.w	r8, #0
    7574:	d011      	beq.n	759a <spi_nor_erase+0xb6>
				spi_nor_cmd_addr_write(dev, bet->cmd, addr, NULL, 0);
    7576:	463b      	mov	r3, r7
    7578:	f898 1000 	ldrb.w	r1, [r8]
    757c:	2281      	movs	r2, #129	; 0x81
    757e:	e9cd 9900 	strd	r9, r9, [sp]
    7582:	4628      	mov	r0, r5
    7584:	f7ff fecd 	bl	7322 <spi_nor_access>
				addr += BIT(bet->exp);
    7588:	f898 2001 	ldrb.w	r2, [r8, #1]
    758c:	2301      	movs	r3, #1
    758e:	4093      	lsls	r3, r2
    7590:	441f      	add	r7, r3
				size -= BIT(bet->exp);
    7592:	1af6      	subs	r6, r6, r3
    7594:	e019      	b.n	75ca <spi_nor_erase+0xe6>
    7596:	4698      	mov	r8, r3
    7598:	e7e7      	b.n	756a <spi_nor_erase+0x86>
				ret = -EINVAL;
    759a:	f06f 0415 	mvn.w	r4, #21
    759e:	e014      	b.n	75ca <spi_nor_erase+0xe6>
	while ((size > 0) && (ret == 0)) {
    75a0:	2c00      	cmp	r4, #0
    75a2:	d1be      	bne.n	7522 <spi_nor_erase+0x3e>
		spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
    75a4:	e9cd 4400 	strd	r4, r4, [sp]
    75a8:	4623      	mov	r3, r4
    75aa:	2280      	movs	r2, #128	; 0x80
    75ac:	2106      	movs	r1, #6
    75ae:	4628      	mov	r0, r5
    75b0:	f7ff feb7 	bl	7322 <spi_nor_access>
		if (size == flash_size) {
    75b4:	45b2      	cmp	sl, r6
    75b6:	d1c2      	bne.n	753e <spi_nor_erase+0x5a>
			spi_nor_cmd_write(dev, SPI_NOR_CMD_CE);
    75b8:	e9cd 4400 	strd	r4, r4, [sp]
    75bc:	4623      	mov	r3, r4
    75be:	2280      	movs	r2, #128	; 0x80
    75c0:	21c7      	movs	r1, #199	; 0xc7
    75c2:	4628      	mov	r0, r5
    75c4:	f7ff fead 	bl	7322 <spi_nor_access>
			size -= flash_size;
    75c8:	4626      	mov	r6, r4
		spi_nor_wait_until_ready(dev);
    75ca:	4628      	mov	r0, r5
    75cc:	f7ff ff20 	bl	7410 <spi_nor_wait_until_ready.isra.0>
    75d0:	e7a5      	b.n	751e <spi_nor_erase+0x3a>
		return -ENODEV;
    75d2:	f06f 0412 	mvn.w	r4, #18
    75d6:	e7ae      	b.n	7536 <spi_nor_erase+0x52>
		return -EINVAL;
    75d8:	f06f 0415 	mvn.w	r4, #21
    75dc:	e7ab      	b.n	7536 <spi_nor_erase+0x52>

000075de <is_regular_addr_valid>:
{
    75de:	b538      	push	{r3, r4, r5, lr}
    75e0:	4605      	mov	r5, r0
    75e2:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    75e4:	f001 fe82 	bl	92ec <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    75e8:	2d00      	cmp	r5, #0
    75ea:	db07      	blt.n	75fc <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    75ec:	42a8      	cmp	r0, r5
    75ee:	d905      	bls.n	75fc <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    75f0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    75f2:	4284      	cmp	r4, r0
    75f4:	bf8c      	ite	hi
    75f6:	2000      	movhi	r0, #0
    75f8:	2001      	movls	r0, #1
}
    75fa:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    75fc:	2000      	movs	r0, #0
    75fe:	e7fc      	b.n	75fa <is_regular_addr_valid+0x1c>

00007600 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    7600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    7604:	6883      	ldr	r3, [r0, #8]
{
    7606:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    7608:	691b      	ldr	r3, [r3, #16]
{
    760a:	4688      	mov	r8, r1
    760c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    760e:	a901      	add	r1, sp, #4
    7610:	aa02      	add	r2, sp, #8
    7612:	4798      	blx	r3
	off_t off = 0;
    7614:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    7616:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    7618:	4625      	mov	r5, r4
    761a:	9b02      	ldr	r3, [sp, #8]
    761c:	42ab      	cmp	r3, r5
    761e:	d802      	bhi.n	7626 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    7620:	b006      	add	sp, #24
    7622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    7626:	9f01      	ldr	r7, [sp, #4]
    7628:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    762c:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    762e:	687b      	ldr	r3, [r7, #4]
    7630:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    7632:	683a      	ldr	r2, [r7, #0]
    7634:	42b2      	cmp	r2, r6
    7636:	eb0a 0306 	add.w	r3, sl, r6
    763a:	d802      	bhi.n	7642 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    763c:	3501      	adds	r5, #1
    763e:	469a      	mov	sl, r3
    7640:	e7eb      	b.n	761a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    7642:	4649      	mov	r1, r9
    7644:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    7646:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    7648:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    764a:	47c0      	blx	r8
    764c:	2800      	cmp	r0, #0
    764e:	d0e7      	beq.n	7620 <flash_page_foreach+0x20>
			off += page_info.size;
    7650:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    7652:	3601      	adds	r6, #1
			off += page_info.size;
    7654:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    7656:	e7ec      	b.n	7632 <flash_page_foreach+0x32>

00007658 <jesd216_bfp_erase>:
	const uint32_t *dwp = &bfp->dw8 + (idx - 1U) / 2U;
    7658:	1e4b      	subs	r3, r1, #1
    765a:	085b      	lsrs	r3, r3, #1
	uint32_t dw = sys_le32_to_cpu(*dwp);
    765c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if ((idx & 0x01) == 0x00) {
    7660:	07c9      	lsls	r1, r1, #31
	uint32_t dw = sys_le32_to_cpu(*dwp);
    7662:	69c3      	ldr	r3, [r0, #28]
		dw >>= 16;
    7664:	bf58      	it	pl
    7666:	0c1b      	lsrpl	r3, r3, #16
	uint8_t cmd = (uint8_t)(dw >> 8);
    7668:	f3c3 2107 	ubfx	r1, r3, #8, #8
	if (exp == 0) {
    766c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	return 0;
    7670:	bf1d      	ittte	ne
    7672:	2000      	movne	r0, #0
	etp->cmd = cmd;
    7674:	7011      	strbne	r1, [r2, #0]
	etp->exp = exp;
    7676:	7053      	strbne	r3, [r2, #1]
		return -EINVAL;
    7678:	f06f 0015 	mvneq.w	r0, #21
}
    767c:	4770      	bx	lr

0000767e <uart_nrfx_config_get>:
	*cfg = data->uart_config;
    767e:	6902      	ldr	r2, [r0, #16]
{
    7680:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7682:	e892 0003 	ldmia.w	r2, {r0, r1}
    7686:	e883 0003 	stmia.w	r3, {r0, r1}
}
    768a:	2000      	movs	r0, #0
    768c:	4770      	bx	lr

0000768e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    768e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7690:	6843      	ldr	r3, [r0, #4]
    7692:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7694:	7a03      	ldrb	r3, [r0, #8]
    7696:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    769a:	3b01      	subs	r3, #1
    769c:	00db      	lsls	r3, r3, #3
    769e:	6845      	ldr	r5, [r0, #4]
    76a0:	6814      	ldr	r4, [r2, #0]
    76a2:	441d      	add	r5, r3
    76a4:	42ac      	cmp	r4, r5
    76a6:	d902      	bls.n	76ae <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    76a8:	f06f 0001 	mvn.w	r0, #1
}
    76ac:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    76ae:	7965      	ldrb	r5, [r4, #5]
    76b0:	428d      	cmp	r5, r1
    76b2:	d002      	beq.n	76ba <pinctrl_lookup_state+0x2c>
		(*state)++;
    76b4:	3408      	adds	r4, #8
    76b6:	6014      	str	r4, [r2, #0]
    76b8:	e7f1      	b.n	769e <pinctrl_lookup_state+0x10>
			return 0;
    76ba:	2000      	movs	r0, #0
    76bc:	e7f6      	b.n	76ac <pinctrl_lookup_state+0x1e>

000076be <nrf_gpio_pin_write>:
    if (value == 0)
    76be:	b909      	cbnz	r1, 76c4 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    76c0:	f7fc baf2 	b.w	3ca8 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    76c4:	f7fc bb22 	b.w	3d0c <nrf_gpio_pin_set>

000076c8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    76c8:	b570      	push	{r4, r5, r6, lr}
    76ca:	4615      	mov	r5, r2
    76cc:	4604      	mov	r4, r0
    76ce:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    76d2:	42b4      	cmp	r4, r6
    76d4:	d101      	bne.n	76da <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    76d6:	2000      	movs	r0, #0
}
    76d8:	bd70      	pop	{r4, r5, r6, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    76da:	6823      	ldr	r3, [r4, #0]
		switch (NRF_GET_FUN(pins[i])) {
    76dc:	0c1a      	lsrs	r2, r3, #16
    76de:	2a19      	cmp	r2, #25
    76e0:	d869      	bhi.n	77b6 <pinctrl_configure_pins+0xee>
    76e2:	e8df f002 	tbb	[pc, r2]
    76e6:	180d      	.short	0x180d
    76e8:	34243e1f 	.word	0x34243e1f
    76ec:	6868683e 	.word	0x6868683e
    76f0:	68484368 	.word	0x68484368
    76f4:	68686868 	.word	0x68686868
    76f8:	68686868 	.word	0x68686868
    76fc:	635e594d 	.word	0x635e594d
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7704:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7708:	6820      	ldr	r0, [r4, #0]
    770a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    770e:	f7fc fafd 	bl	3d0c <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7712:	2201      	movs	r2, #1
    7714:	e004      	b.n	7720 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    7716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    771a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    771e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7720:	4611      	mov	r1, r2
    7722:	e00f      	b.n	7744 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    7724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7728:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    772c:	e7ec      	b.n	7708 <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    772e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7732:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7736:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    7738:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    773c:	f7fc fab4 	bl	3ca8 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7740:	2200      	movs	r2, #0
    7742:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7744:	6820      	ldr	r0, [r4, #0]
    7746:	f7fc fabf 	bl	3cc8 <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    774a:	3404      	adds	r4, #4
    774c:	e7c1      	b.n	76d2 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    774e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7752:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7756:	6820      	ldr	r0, [r4, #0]
    7758:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    775c:	f7fc faa4 	bl	3ca8 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7760:	e7d7      	b.n	7712 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    7762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7766:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    776a:	e7d8      	b.n	771e <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    776c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7770:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7774:	e7d3      	b.n	771e <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    777a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    777e:	e7ce      	b.n	771e <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    7780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7784:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7788:	6820      	ldr	r0, [r4, #0]
    778a:	f3c0 3140 	ubfx	r1, r0, #13, #1
    778e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7792:	f7ff ff94 	bl	76be <nrf_gpio_pin_write>
    7796:	e7bc      	b.n	7712 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    779c:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    77a0:	e7f2      	b.n	7788 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    77a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77a6:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    77aa:	e7ed      	b.n	7788 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    77ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77b0:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    77b4:	e7e8      	b.n	7788 <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
    77b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    77ba:	e78d      	b.n	76d8 <pinctrl_configure_pins+0x10>

000077bc <fprotect_set_permission>:

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
    77bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    77be:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(nrf_ficr_codepagesize_get(NRF_FICR) ==
			CONFIG_FPROTECT_BLOCK_SIZE);

	uint32_t region_idx;
	int result = find_free_region(&region_idx);
    77c0:	a801      	add	r0, sp, #4
{
    77c2:	460c      	mov	r4, r1
    77c4:	4616      	mov	r6, r2
	int result = find_free_region(&region_idx);
    77c6:	f7fc fab1 	bl	3d2c <find_free_region>

	if (result != 0) {
    77ca:	bb70      	cbnz	r0, 782a <fprotect_set_permission+0x6e>
    77cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    77d0:	6919      	ldr	r1, [r3, #16]
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77d2:	fbb5 f2f1 	udiv	r2, r5, r1
    77d6:	fb01 5212 	mls	r2, r1, r2, r5
    77da:	bb42      	cbnz	r2, 782e <fprotect_set_permission+0x72>
    77dc:	6919      	ldr	r1, [r3, #16]
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77de:	fbb4 f2f1 	udiv	r2, r4, r1
    77e2:	fb01 4212 	mls	r2, r1, r2, r4
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77e6:	bb12      	cbnz	r2, 782e <fprotect_set_permission+0x72>
    77e8:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    77ea:	695b      	ldr	r3, [r3, #20]
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    77ec:	4353      	muls	r3, r2
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77ee:	42a3      	cmp	r3, r4
    77f0:	d31d      	bcc.n	782e <fprotect_set_permission+0x72>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    77f2:	b1e4      	cbz	r4, 782e <fprotect_set_permission+0x72>
		return -EINVAL;
	}

	nrf_acl_region_set(NRF_ACL, region_idx, start, length, permission);
    77f4:	9b01      	ldr	r3, [sp, #4]
    p_reg->ACL[region_id].ADDR = address;
    77f6:	011b      	lsls	r3, r3, #4
    77f8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    77fc:	f501 31f0 	add.w	r1, r1, #122880	; 0x1e000
    7800:	f8c1 5800 	str.w	r5, [r1, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
    7804:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
    7808:	f8c1 6808 	str.w	r6, [r1, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
    780c:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800

	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
    7810:	4295      	cmp	r5, r2
    7812:	d10f      	bne.n	7834 <fprotect_set_permission+0x78>
    return (size_t)p_reg->ACL[region_id].SIZE;
    7814:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
    7818:	4294      	cmp	r4, r2
    781a:	d10b      	bne.n	7834 <fprotect_set_permission+0x78>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    781c:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
    7820:	b2db      	uxtb	r3, r3
		return -EFAULT;
    7822:	42b3      	cmp	r3, r6
    7824:	bf18      	it	ne
    7826:	f06f 000d 	mvnne.w	r0, #13
	}

	return 0;
}
    782a:	b002      	add	sp, #8
    782c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    782e:	f06f 0015 	mvn.w	r0, #21
    7832:	e7fa      	b.n	782a <fprotect_set_permission+0x6e>
		return -EFAULT;
    7834:	f06f 000d 	mvn.w	r0, #13
    7838:	e7f7      	b.n	782a <fprotect_set_permission+0x6e>

0000783a <fprotect_area>:
}
#endif

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
    783a:	2202      	movs	r2, #2
    783c:	f7ff bfbe 	b.w	77bc <fprotect_set_permission>

00007840 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    7840:	b538      	push	{r3, r4, r5, lr}
    7842:	460c      	mov	r4, r1
    7844:	4615      	mov	r5, r2
    7846:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
    7848:	f7ff fb8f 	bl	6f6a <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    784c:	4621      	mov	r1, r4
    784e:	42a9      	cmp	r1, r5
    7850:	d101      	bne.n	7856 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    7852:	2001      	movs	r0, #1
}
    7854:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    7856:	f811 3b01 	ldrb.w	r3, [r1], #1
    785a:	4298      	cmp	r0, r3
    785c:	d0f7      	beq.n	784e <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    785e:	2000      	movs	r0, #0
    7860:	e7f8      	b.n	7854 <bootutil_buffer_is_erased.part.0+0x14>

00007862 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7862:	6880      	ldr	r0, [r0, #8]
    7864:	3818      	subs	r0, #24
    7866:	f020 0007 	bic.w	r0, r0, #7
}
    786a:	3810      	subs	r0, #16
    786c:	4770      	bx	lr

0000786e <boot_magic_compatible_check>:
    switch (tbl_val) {
    786e:	2804      	cmp	r0, #4
    7870:	d009      	beq.n	7886 <boot_magic_compatible_check+0x18>
    7872:	2805      	cmp	r0, #5
    7874:	d103      	bne.n	787e <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    7876:	1e48      	subs	r0, r1, #1
    7878:	bf18      	it	ne
    787a:	2001      	movne	r0, #1
    787c:	4770      	bx	lr
        return tbl_val == val;
    787e:	1a43      	subs	r3, r0, r1
    7880:	4258      	negs	r0, r3
    7882:	4158      	adcs	r0, r3
    7884:	4770      	bx	lr
    switch (tbl_val) {
    7886:	2001      	movs	r0, #1
}
    7888:	4770      	bx	lr

0000788a <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    788a:	b111      	cbz	r1, 7892 <bootutil_buffer_is_erased+0x8>
    788c:	b10a      	cbz	r2, 7892 <bootutil_buffer_is_erased+0x8>
    788e:	f7ff bfd7 	b.w	7840 <bootutil_buffer_is_erased.part.0>
}
    7892:	2000      	movs	r0, #0
    7894:	4770      	bx	lr

00007896 <boot_read_flag>:
{
    7896:	b538      	push	{r3, r4, r5, lr}
    7898:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    789a:	2301      	movs	r3, #1
{
    789c:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    789e:	4622      	mov	r2, r4
{
    78a0:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    78a2:	f7ff fb0a 	bl	6eba <flash_area_read>
    if (rc < 0) {
    78a6:	2800      	cmp	r0, #0
    78a8:	db10      	blt.n	78cc <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    78aa:	2201      	movs	r2, #1
    78ac:	4621      	mov	r1, r4
    78ae:	4628      	mov	r0, r5
    78b0:	f7ff ffeb 	bl	788a <bootutil_buffer_is_erased>
    78b4:	b118      	cbz	r0, 78be <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    78b6:	2303      	movs	r3, #3
    78b8:	7023      	strb	r3, [r4, #0]
    return 0;
    78ba:	2000      	movs	r0, #0
}
    78bc:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    78be:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    78c0:	2b01      	cmp	r3, #1
    78c2:	bf0c      	ite	eq
    78c4:	2301      	moveq	r3, #1
    78c6:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    78c8:	7023      	strb	r3, [r4, #0]
    78ca:	e7f7      	b.n	78bc <boot_read_flag+0x26>
        return BOOT_EFLASH;
    78cc:	2001      	movs	r0, #1
    78ce:	e7f5      	b.n	78bc <boot_read_flag+0x26>

000078d0 <boot_write_trailer>:
{
    78d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    78d4:	461d      	mov	r5, r3
    78d6:	4606      	mov	r6, r0
    78d8:	460f      	mov	r7, r1
    78da:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    78dc:	f7ff fb3c 	bl	6f58 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    78e0:	1e6c      	subs	r4, r5, #1
    78e2:	4404      	add	r4, r0
    78e4:	4240      	negs	r0, r0
    78e6:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    78e8:	2c08      	cmp	r4, #8
    78ea:	d81a      	bhi.n	7922 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    78ec:	4630      	mov	r0, r6
    78ee:	f7ff fb3c 	bl	6f6a <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    78f2:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    78f4:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    78f6:	4641      	mov	r1, r8
    78f8:	4668      	mov	r0, sp
    78fa:	f7ff fb9a 	bl	7032 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    78fe:	1b62      	subs	r2, r4, r5
    7900:	4649      	mov	r1, r9
    7902:	eb0d 0005 	add.w	r0, sp, r5
    7906:	f7ff fb9f 	bl	7048 <memset>
    rc = flash_area_write(fap, off, buf, align);
    790a:	4623      	mov	r3, r4
    790c:	466a      	mov	r2, sp
    790e:	4639      	mov	r1, r7
    7910:	4630      	mov	r0, r6
    7912:	f7ff faee 	bl	6ef2 <flash_area_write>
    if (rc != 0) {
    7916:	3800      	subs	r0, #0
    7918:	bf18      	it	ne
    791a:	2001      	movne	r0, #1
}
    791c:	b003      	add	sp, #12
    791e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    7922:	f04f 30ff 	mov.w	r0, #4294967295
    7926:	e7f9      	b.n	791c <boot_write_trailer+0x4c>

00007928 <boot_write_trailer_flag>:
{
    7928:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    792a:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    792c:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    7930:	aa01      	add	r2, sp, #4
    7932:	f7ff ffcd 	bl	78d0 <boot_write_trailer>
}
    7936:	b003      	add	sp, #12
    7938:	f85d fb04 	ldr.w	pc, [sp], #4

0000793c <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    793c:	6881      	ldr	r1, [r0, #8]
    793e:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    7940:	2201      	movs	r2, #1
    7942:	f021 0107 	bic.w	r1, r1, #7
    7946:	f7ff bfef 	b.w	7928 <boot_write_trailer_flag>

0000794a <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    794a:	6882      	ldr	r2, [r0, #8]
    794c:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    794e:	f022 0207 	bic.w	r2, r2, #7
    7952:	f7ff bfa0 	b.w	7896 <boot_read_flag>

00007956 <boot_read_swap_state_by_id>:
{
    7956:	b513      	push	{r0, r1, r4, lr}
    7958:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    795a:	b2c0      	uxtb	r0, r0
    795c:	a901      	add	r1, sp, #4
    795e:	f7fa f82d 	bl	19bc <flash_area_open>
    if (rc != 0) {
    7962:	b950      	cbnz	r0, 797a <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    7964:	4621      	mov	r1, r4
    7966:	9801      	ldr	r0, [sp, #4]
    7968:	f7fc fa28 	bl	3dbc <boot_read_swap_state>
    796c:	4604      	mov	r4, r0
    flash_area_close(fap);
    796e:	9801      	ldr	r0, [sp, #4]
    7970:	f7ff faa2 	bl	6eb8 <flash_area_close>
}
    7974:	4620      	mov	r0, r4
    7976:	b002      	add	sp, #8
    7978:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    797a:	2401      	movs	r4, #1
    797c:	e7fa      	b.n	7974 <boot_read_swap_state_by_id+0x1e>

0000797e <boot_write_swap_info>:
{
    797e:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    7980:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    7984:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    7986:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    798a:	f7ff ff6a 	bl	7862 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    798e:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    7990:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    7992:	f10d 0207 	add.w	r2, sp, #7
    7996:	4620      	mov	r0, r4
    7998:	f7ff ff9a 	bl	78d0 <boot_write_trailer>
}
    799c:	b002      	add	sp, #8
    799e:	bd10      	pop	{r4, pc}

000079a0 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    79a0:	2000      	movs	r0, #0
    79a2:	4770      	bx	lr

000079a4 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    79a4:	6803      	ldr	r3, [r0, #0]
{
    79a6:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    79a8:	1acd      	subs	r5, r1, r3
    79aa:	2d00      	cmp	r5, #0
    79ac:	dd0d      	ble.n	79ca <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    79ae:	f993 6000 	ldrsb.w	r6, [r3]
    79b2:	781c      	ldrb	r4, [r3, #0]
    79b4:	2e00      	cmp	r6, #0
    79b6:	db0b      	blt.n	79d0 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    79b8:	1c5c      	adds	r4, r3, #1
    79ba:	6004      	str	r4, [r0, #0]
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    79c0:	6803      	ldr	r3, [r0, #0]
    79c2:	1ac9      	subs	r1, r1, r3
    79c4:	6813      	ldr	r3, [r2, #0]
    79c6:	428b      	cmp	r3, r1
    79c8:	d932      	bls.n	7a30 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    79ca:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    79ce:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    79d0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    79d4:	3c01      	subs	r4, #1
    79d6:	2c03      	cmp	r4, #3
    79d8:	d827      	bhi.n	7a2a <mbedtls_asn1_get_len+0x86>
    79da:	e8df f004 	tbb	[pc, r4]
    79de:	0902      	.short	0x0902
    79e0:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    79e2:	2d01      	cmp	r5, #1
    79e4:	d0f1      	beq.n	79ca <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    79e6:	785c      	ldrb	r4, [r3, #1]
    79e8:	6014      	str	r4, [r2, #0]
            (*p) += 2;
    79ea:	3302      	adds	r3, #2
            (*p) += 5;
    79ec:	6003      	str	r3, [r0, #0]
            break;
    79ee:	e7e7      	b.n	79c0 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    79f0:	2d02      	cmp	r5, #2
    79f2:	ddea      	ble.n	79ca <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    79f4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
    79f8:	ba64      	rev16	r4, r4
    79fa:	b2a4      	uxth	r4, r4
    79fc:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    79fe:	3303      	adds	r3, #3
    7a00:	e7f4      	b.n	79ec <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    7a02:	2d03      	cmp	r5, #3
    7a04:	dde1      	ble.n	79ca <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7a06:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7a08:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7a0a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    7a0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7a10:	78dd      	ldrb	r5, [r3, #3]
    7a12:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    7a14:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    7a16:	3304      	adds	r3, #4
    7a18:	e7e8      	b.n	79ec <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    7a1a:	2d04      	cmp	r5, #4
    7a1c:	ddd5      	ble.n	79ca <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7a1e:	f8d3 4001 	ldr.w	r4, [r3, #1]
    7a22:	ba24      	rev	r4, r4
    7a24:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    7a26:	3305      	adds	r3, #5
    7a28:	e7e0      	b.n	79ec <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    7a2a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    7a2e:	e7ce      	b.n	79ce <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    7a30:	2000      	movs	r0, #0
    7a32:	e7cc      	b.n	79ce <mbedtls_asn1_get_len+0x2a>

00007a34 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    7a34:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    7a36:	6804      	ldr	r4, [r0, #0]
    7a38:	1b0e      	subs	r6, r1, r4
    7a3a:	2e00      	cmp	r6, #0
    7a3c:	dd07      	ble.n	7a4e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    7a3e:	7826      	ldrb	r6, [r4, #0]
    7a40:	429e      	cmp	r6, r3
    7a42:	d108      	bne.n	7a56 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    7a44:	3401      	adds	r4, #1
    7a46:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    7a48:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    7a4a:	f7ff bfab 	b.w	79a4 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7a4e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    7a52:	bc70      	pop	{r4, r5, r6}
    7a54:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    7a56:	f06f 0061 	mvn.w	r0, #97	; 0x61
    7a5a:	e7fa      	b.n	7a52 <mbedtls_asn1_get_tag+0x1e>

00007a5c <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    7a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7a5e:	2302      	movs	r3, #2
{
    7a60:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7a62:	aa01      	add	r2, sp, #4
{
    7a64:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7a66:	f7ff ffe5 	bl	7a34 <mbedtls_asn1_get_tag>
    7a6a:	b940      	cbnz	r0, 7a7e <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    7a6c:	9a01      	ldr	r2, [sp, #4]
    7a6e:	6821      	ldr	r1, [r4, #0]
    7a70:	4628      	mov	r0, r5
    7a72:	f000 fb59 	bl	8128 <mbedtls_mpi_read_binary>

    *p += len;
    7a76:	6823      	ldr	r3, [r4, #0]
    7a78:	9a01      	ldr	r2, [sp, #4]
    7a7a:	4413      	add	r3, r2
    7a7c:	6023      	str	r3, [r4, #0]

    return( ret );
}
    7a7e:	b003      	add	sp, #12
    7a80:	bd30      	pop	{r4, r5, pc}

00007a82 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    7a82:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a84:	3904      	subs	r1, #4
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    const mbedtls_mpi_uint mask = -assign;
    7a86:	425f      	negs	r7, r3

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    7a88:	2500      	movs	r5, #0
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    7a8a:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    7a8c:	4285      	cmp	r5, r0
    7a8e:	d100      	bne.n	7a92 <mpi_safe_cond_assign+0x10>
}
    7a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    7a92:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    7a96:	f851 4f04 	ldr.w	r4, [r1, #4]!
    7a9a:	403e      	ands	r6, r7
    7a9c:	401c      	ands	r4, r3
    7a9e:	4334      	orrs	r4, r6
    7aa0:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    7aa2:	3501      	adds	r5, #1
    7aa4:	e7f2      	b.n	7a8c <mpi_safe_cond_assign+0xa>

00007aa6 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    7aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    7aaa:	4684      	mov	ip, r0
{
    7aac:	4688      	mov	r8, r1
    7aae:	460e      	mov	r6, r1
    7ab0:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    7ab2:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    7ab4:	f1bc 0f0f 	cmp.w	ip, #15
    7ab8:	f106 0640 	add.w	r6, r6, #64	; 0x40
    7abc:	f104 0440 	add.w	r4, r4, #64	; 0x40
    7ac0:	d878      	bhi.n	7bb4 <mpi_mul_hlp+0x10e>
    7ac2:	0907      	lsrs	r7, r0, #4
    7ac4:	f06f 060f 	mvn.w	r6, #15
    7ac8:	fb06 0607 	mla	r6, r6, r7, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    7acc:	2e07      	cmp	r6, #7
    7ace:	ea4f 1c87 	mov.w	ip, r7, lsl #6
    7ad2:	eb08 1487 	add.w	r4, r8, r7, lsl #6
    7ad6:	eb02 1087 	add.w	r0, r2, r7, lsl #6
    7ada:	d95d      	bls.n	7b98 <mpi_mul_hlp+0xf2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    7adc:	f858 700c 	ldr.w	r7, [r8, ip]
    7ae0:	fba3 1707 	umull	r1, r7, r3, r7
    7ae4:	186d      	adds	r5, r5, r1
    7ae6:	f852 100c 	ldr.w	r1, [r2, ip]
    7aea:	f147 0700 	adc.w	r7, r7, #0
    7aee:	186d      	adds	r5, r5, r1
    7af0:	f842 500c 	str.w	r5, [r2, ip]
    7af4:	6861      	ldr	r1, [r4, #4]
    7af6:	f147 0200 	adc.w	r2, r7, #0
    7afa:	fba3 5101 	umull	r5, r1, r3, r1
    7afe:	1952      	adds	r2, r2, r5
    7b00:	6845      	ldr	r5, [r0, #4]
    7b02:	f141 0100 	adc.w	r1, r1, #0
    7b06:	1952      	adds	r2, r2, r5
    7b08:	6042      	str	r2, [r0, #4]
        MULADDC_CORE   MULADDC_CORE
    7b0a:	68a2      	ldr	r2, [r4, #8]
        MULADDC_CORE   MULADDC_CORE
    7b0c:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    7b10:	fba3 5202 	umull	r5, r2, r3, r2
    7b14:	1949      	adds	r1, r1, r5
    7b16:	6885      	ldr	r5, [r0, #8]
    7b18:	f142 0200 	adc.w	r2, r2, #0
    7b1c:	1949      	adds	r1, r1, r5
    7b1e:	6081      	str	r1, [r0, #8]
    7b20:	68e1      	ldr	r1, [r4, #12]
    7b22:	f142 0200 	adc.w	r2, r2, #0
    7b26:	fba3 5101 	umull	r5, r1, r3, r1
    7b2a:	1952      	adds	r2, r2, r5
    7b2c:	68c5      	ldr	r5, [r0, #12]
    7b2e:	f141 0100 	adc.w	r1, r1, #0
    7b32:	1952      	adds	r2, r2, r5
    7b34:	60c2      	str	r2, [r0, #12]

        MULADDC_CORE   MULADDC_CORE
    7b36:	6922      	ldr	r2, [r4, #16]
        MULADDC_CORE   MULADDC_CORE
    7b38:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    7b3c:	fba3 5202 	umull	r5, r2, r3, r2
    7b40:	1949      	adds	r1, r1, r5
    7b42:	6905      	ldr	r5, [r0, #16]
    7b44:	f142 0200 	adc.w	r2, r2, #0
    7b48:	1949      	adds	r1, r1, r5
    7b4a:	6101      	str	r1, [r0, #16]
    7b4c:	6961      	ldr	r1, [r4, #20]
    7b4e:	f142 0200 	adc.w	r2, r2, #0
    7b52:	fba3 5101 	umull	r5, r1, r3, r1
    7b56:	1952      	adds	r2, r2, r5
    7b58:	6945      	ldr	r5, [r0, #20]
    7b5a:	f141 0100 	adc.w	r1, r1, #0
    7b5e:	1952      	adds	r2, r2, r5
    7b60:	6142      	str	r2, [r0, #20]
        MULADDC_CORE   MULADDC_CORE
    7b62:	69a2      	ldr	r2, [r4, #24]
        MULADDC_CORE   MULADDC_CORE
    7b64:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    7b68:	fba3 5202 	umull	r5, r2, r3, r2
    7b6c:	1949      	adds	r1, r1, r5
    7b6e:	6985      	ldr	r5, [r0, #24]
    7b70:	f142 0200 	adc.w	r2, r2, #0
    7b74:	1949      	adds	r1, r1, r5
    7b76:	6181      	str	r1, [r0, #24]
    7b78:	69e5      	ldr	r5, [r4, #28]
    7b7a:	f142 0200 	adc.w	r2, r2, #0
    7b7e:	fba3 5105 	umull	r5, r1, r3, r5
    7b82:	1952      	adds	r2, r2, r5
    7b84:	f141 0500 	adc.w	r5, r1, #0
    7b88:	69c1      	ldr	r1, [r0, #28]
    7b8a:	1852      	adds	r2, r2, r1
    7b8c:	61c2      	str	r2, [r0, #28]
    7b8e:	f145 0500 	adc.w	r5, r5, #0
    for( ; i >= 8; i -= 8 )
    7b92:	3e08      	subs	r6, #8
        MULADDC_CORE   MULADDC_CORE
    7b94:	3020      	adds	r0, #32
    7b96:	3420      	adds	r4, #32
    7b98:	ea4f 0c86 	mov.w	ip, r6, lsl #2
    7b9c:	4607      	mov	r7, r0
    7b9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    7ba2:	42a6      	cmp	r6, r4
    7ba4:	f040 8105 	bne.w	7db2 <mpi_mul_hlp+0x30c>
    7ba8:	4460      	add	r0, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    7baa:	2d00      	cmp	r5, #0
    7bac:	f040 810f 	bne.w	7dce <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    7bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MULADDC_CORE   MULADDC_CORE
    7bb4:	f856 7c40 	ldr.w	r7, [r6, #-64]
    7bb8:	f854 1c40 	ldr.w	r1, [r4, #-64]
    7bbc:	fba3 e707 	umull	lr, r7, r3, r7
    7bc0:	eb15 050e 	adds.w	r5, r5, lr
    7bc4:	f147 0700 	adc.w	r7, r7, #0
    7bc8:	194d      	adds	r5, r1, r5
    7bca:	f844 5c40 	str.w	r5, [r4, #-64]
    7bce:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    7bd2:	f854 1c3c 	ldr.w	r1, [r4, #-60]
    7bd6:	fba3 e505 	umull	lr, r5, r3, r5
    7bda:	f147 0700 	adc.w	r7, r7, #0
    7bde:	eb17 070e 	adds.w	r7, r7, lr
    7be2:	f145 0500 	adc.w	r5, r5, #0
    7be6:	19cf      	adds	r7, r1, r7
    7be8:	f844 7c3c 	str.w	r7, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    7bec:	f856 7c38 	ldr.w	r7, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    7bf0:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7bf4:	fba3 e707 	umull	lr, r7, r3, r7
    7bf8:	eb15 0e0e 	adds.w	lr, r5, lr
    7bfc:	f854 5c38 	ldr.w	r5, [r4, #-56]
    7c00:	f147 0700 	adc.w	r7, r7, #0
    7c04:	eb15 050e 	adds.w	r5, r5, lr
    7c08:	f844 5c38 	str.w	r5, [r4, #-56]
    7c0c:	f856 5c34 	ldr.w	r5, [r6, #-52]
    7c10:	f147 0700 	adc.w	r7, r7, #0
    7c14:	fba3 e505 	umull	lr, r5, r3, r5
    7c18:	eb17 0e0e 	adds.w	lr, r7, lr
    7c1c:	f854 7c34 	ldr.w	r7, [r4, #-52]
    7c20:	f145 0500 	adc.w	r5, r5, #0
    7c24:	eb17 070e 	adds.w	r7, r7, lr
    7c28:	f844 7c34 	str.w	r7, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    7c2c:	f856 7c30 	ldr.w	r7, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    7c30:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7c34:	fba3 e707 	umull	lr, r7, r3, r7
    7c38:	eb15 0e0e 	adds.w	lr, r5, lr
    7c3c:	f854 5c30 	ldr.w	r5, [r4, #-48]
    7c40:	f147 0700 	adc.w	r7, r7, #0
    7c44:	eb15 050e 	adds.w	r5, r5, lr
    7c48:	f844 5c30 	str.w	r5, [r4, #-48]
    7c4c:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    7c50:	f147 0700 	adc.w	r7, r7, #0
    7c54:	fba3 e505 	umull	lr, r5, r3, r5
    7c58:	eb17 0e0e 	adds.w	lr, r7, lr
    7c5c:	f854 7c2c 	ldr.w	r7, [r4, #-44]
    7c60:	f145 0500 	adc.w	r5, r5, #0
    7c64:	eb17 070e 	adds.w	r7, r7, lr
    7c68:	f844 7c2c 	str.w	r7, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    7c6c:	f856 7c28 	ldr.w	r7, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    7c70:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7c74:	fba3 e707 	umull	lr, r7, r3, r7
    7c78:	eb15 0e0e 	adds.w	lr, r5, lr
    7c7c:	f854 5c28 	ldr.w	r5, [r4, #-40]
    7c80:	f147 0700 	adc.w	r7, r7, #0
    7c84:	eb15 050e 	adds.w	r5, r5, lr
    7c88:	f844 5c28 	str.w	r5, [r4, #-40]
    7c8c:	f856 5c24 	ldr.w	r5, [r6, #-36]
    7c90:	f147 0700 	adc.w	r7, r7, #0
    7c94:	fba3 e505 	umull	lr, r5, r3, r5
    7c98:	eb17 0e0e 	adds.w	lr, r7, lr
    7c9c:	f854 7c24 	ldr.w	r7, [r4, #-36]
    7ca0:	f145 0500 	adc.w	r5, r5, #0
    7ca4:	eb17 070e 	adds.w	r7, r7, lr
    7ca8:	f844 7c24 	str.w	r7, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    7cac:	f856 7c20 	ldr.w	r7, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    7cb0:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7cb4:	fba3 e707 	umull	lr, r7, r3, r7
    7cb8:	eb15 0e0e 	adds.w	lr, r5, lr
    7cbc:	f854 5c20 	ldr.w	r5, [r4, #-32]
    7cc0:	f147 0700 	adc.w	r7, r7, #0
    7cc4:	eb15 050e 	adds.w	r5, r5, lr
    7cc8:	f844 5c20 	str.w	r5, [r4, #-32]
    7ccc:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    7cd0:	f147 0700 	adc.w	r7, r7, #0
    7cd4:	fba3 e505 	umull	lr, r5, r3, r5
    7cd8:	eb17 0e0e 	adds.w	lr, r7, lr
    7cdc:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    7ce0:	f145 0500 	adc.w	r5, r5, #0
    7ce4:	eb17 070e 	adds.w	r7, r7, lr
    7ce8:	f844 7c1c 	str.w	r7, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    7cec:	f856 7c18 	ldr.w	r7, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    7cf0:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7cf4:	fba3 e707 	umull	lr, r7, r3, r7
    7cf8:	eb15 0e0e 	adds.w	lr, r5, lr
    7cfc:	f854 5c18 	ldr.w	r5, [r4, #-24]
    7d00:	f147 0700 	adc.w	r7, r7, #0
    7d04:	eb15 050e 	adds.w	r5, r5, lr
    7d08:	f844 5c18 	str.w	r5, [r4, #-24]
    7d0c:	f856 5c14 	ldr.w	r5, [r6, #-20]
        MULADDC_CORE   MULADDC_CORE
    7d10:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MULADDC_CORE   MULADDC_CORE
    7d14:	fba3 e505 	umull	lr, r5, r3, r5
    7d18:	f147 0700 	adc.w	r7, r7, #0
    7d1c:	eb17 0e0e 	adds.w	lr, r7, lr
    7d20:	f854 7c14 	ldr.w	r7, [r4, #-20]
    7d24:	f145 0500 	adc.w	r5, r5, #0
    7d28:	eb17 070e 	adds.w	r7, r7, lr
    7d2c:	f844 7c14 	str.w	r7, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    7d30:	f856 7c10 	ldr.w	r7, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    7d34:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7d38:	fba3 e707 	umull	lr, r7, r3, r7
    7d3c:	eb15 0e0e 	adds.w	lr, r5, lr
    7d40:	f854 5c10 	ldr.w	r5, [r4, #-16]
    7d44:	f147 0700 	adc.w	r7, r7, #0
    7d48:	eb15 050e 	adds.w	r5, r5, lr
    7d4c:	f844 5c10 	str.w	r5, [r4, #-16]
    7d50:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    7d54:	f147 0700 	adc.w	r7, r7, #0
    7d58:	fba3 e505 	umull	lr, r5, r3, r5
    7d5c:	eb17 0e0e 	adds.w	lr, r7, lr
    7d60:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    7d64:	f145 0500 	adc.w	r5, r5, #0
    7d68:	eb17 070e 	adds.w	r7, r7, lr
    7d6c:	f844 7c0c 	str.w	r7, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    7d70:	f856 7c08 	ldr.w	r7, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    7d74:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7d78:	fba3 e707 	umull	lr, r7, r3, r7
    7d7c:	eb15 0e0e 	adds.w	lr, r5, lr
    7d80:	f854 5c08 	ldr.w	r5, [r4, #-8]
    7d84:	f147 0700 	adc.w	r7, r7, #0
    7d88:	eb15 050e 	adds.w	r5, r5, lr
    7d8c:	f844 5c08 	str.w	r5, [r4, #-8]
    7d90:	f856 5c04 	ldr.w	r5, [r6, #-4]
    7d94:	f147 0700 	adc.w	r7, r7, #0
    7d98:	fba3 5e05 	umull	r5, lr, r3, r5
    7d9c:	197f      	adds	r7, r7, r5
    7d9e:	f14e 0500 	adc.w	r5, lr, #0
    7da2:	19cf      	adds	r7, r1, r7
    7da4:	f145 0500 	adc.w	r5, r5, #0
    7da8:	f844 7c04 	str.w	r7, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    7dac:	f1ac 0c10 	sub.w	ip, ip, #16
    7db0:	e680      	b.n	7ab4 <mpi_mul_hlp+0xe>
        MULADDC_CORE
    7db2:	f854 2b04 	ldr.w	r2, [r4], #4
    7db6:	fba3 2102 	umull	r2, r1, r3, r2
    7dba:	18ad      	adds	r5, r5, r2
    7dbc:	f141 0200 	adc.w	r2, r1, #0
    7dc0:	6839      	ldr	r1, [r7, #0]
    7dc2:	1949      	adds	r1, r1, r5
    7dc4:	f847 1b04 	str.w	r1, [r7], #4
    7dc8:	f142 0500 	adc.w	r5, r2, #0
    for( ; i > 0; i-- )
    7dcc:	e6e9      	b.n	7ba2 <mpi_mul_hlp+0xfc>
        *d += c; c = ( *d < c ); d++;
    7dce:	6803      	ldr	r3, [r0, #0]
    7dd0:	195b      	adds	r3, r3, r5
    7dd2:	f840 3b04 	str.w	r3, [r0], #4
    7dd6:	bf2c      	ite	cs
    7dd8:	2501      	movcs	r5, #1
    7dda:	2500      	movcc	r5, #0
    7ddc:	e6e5      	b.n	7baa <mpi_mul_hlp+0x104>

00007dde <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    7dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7de2:	b085      	sub	sp, #20
    7de4:	4617      	mov	r7, r2
    7de6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    7de8:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    7dea:	6862      	ldr	r2, [r4, #4]
    7dec:	68a0      	ldr	r0, [r4, #8]
{
    7dee:	9303      	str	r3, [sp, #12]
    7df0:	468a      	mov	sl, r1
    memset( T->p, 0, T->n * ciL );
    7df2:	0092      	lsls	r2, r2, #2
    7df4:	2100      	movs	r1, #0
    7df6:	f7ff f927 	bl	7048 <memset>

    d = T->p;
    n = N->n;
    7dfa:	687d      	ldr	r5, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    7dfc:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    7e00:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    7e02:	42ab      	cmp	r3, r5
    7e04:	bf28      	it	cs
    7e06:	462b      	movcs	r3, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    7e08:	1c6c      	adds	r4, r5, #1
    m = ( B->n < n ) ? B->n : n;
    7e0a:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    7e0c:	00a4      	lsls	r4, r4, #2
    d = T->p;
    7e0e:	46b1      	mov	r9, r6
    for( i = 0; i < n; i++ )
    7e10:	f04f 0800 	mov.w	r8, #0
        u0 = A->p[i];
    7e14:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    7e16:	45a8      	cmp	r8, r5
        u0 = A->p[i];
    7e18:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    7e1a:	d122      	bne.n	7e62 <mpi_montmul+0x84>
    7e1c:	3c04      	subs	r4, #4
    7e1e:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    7e22:	4622      	mov	r2, r4
    7e24:	4641      	mov	r1, r8
    7e26:	f7ff f904 	bl	7032 <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    7e2a:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7e2e:	f8d7 e008 	ldr.w	lr, [r7, #8]
    d[n] += 1;
    7e32:	3301      	adds	r3, #1
    7e34:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mbedtls_mpi_uint c = 0, t, z;
    7e38:	2300      	movs	r3, #0
    7e3a:	f1a8 0004 	sub.w	r0, r8, #4
    for( i = 0; i < n; i++ )
    7e3e:	461a      	mov	r2, r3
    7e40:	4295      	cmp	r5, r2
    7e42:	d12d      	bne.n	7ea0 <mpi_montmul+0xc2>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7e44:	f856 2014 	ldr.w	r2, [r6, r4, lsl #1]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7e48:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7e4a:	1ad3      	subs	r3, r2, r3
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7e4c:	6889      	ldr	r1, [r1, #8]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7e4e:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7e52:	4642      	mov	r2, r8
    7e54:	b2db      	uxtb	r3, r3
    7e56:	4628      	mov	r0, r5
}
    7e58:	b005      	add	sp, #20
    7e5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7e5e:	f7ff be10 	b.w	7a82 <mpi_safe_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7e62:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    7e66:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7e6a:	f8d9 3000 	ldr.w	r3, [r9]
    7e6e:	6808      	ldr	r0, [r1, #0]
    7e70:	9a03      	ldr	r2, [sp, #12]
    7e72:	fb00 330b 	mla	r3, r0, fp, r3
    7e76:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    7e78:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7e7a:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    7e7c:	464a      	mov	r2, r9
    7e7e:	465b      	mov	r3, fp
    7e80:	f7ff fe11 	bl	7aa6 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    7e84:	9b02      	ldr	r3, [sp, #8]
    7e86:	68b9      	ldr	r1, [r7, #8]
    7e88:	464a      	mov	r2, r9
    7e8a:	4628      	mov	r0, r5
    7e8c:	f7ff fe0b 	bl	7aa6 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    7e90:	f849 bb04 	str.w	fp, [r9], #4
    7e94:	2300      	movs	r3, #0
    7e96:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    7e9a:	f108 0801 	add.w	r8, r8, #1
    7e9e:	e7b9      	b.n	7e14 <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    7ea0:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7ea4:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    7ea8:	ebac 0103 	sub.w	r1, ip, r3
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7eac:	42b9      	cmp	r1, r7
    7eae:	bf2c      	ite	cs
    7eb0:	f04f 0900 	movcs.w	r9, #0
    7eb4:	f04f 0901 	movcc.w	r9, #1
    7eb8:	1bc9      	subs	r1, r1, r7
    7eba:	459c      	cmp	ip, r3
    7ebc:	bf2c      	ite	cs
    7ebe:	464b      	movcs	r3, r9
    7ec0:	f109 0301 	addcc.w	r3, r9, #1
    7ec4:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    7ec6:	3201      	adds	r2, #1
    7ec8:	e7ba      	b.n	7e40 <mpi_montmul+0x62>

00007eca <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    7eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    7ecc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7ed0:	3901      	subs	r1, #1
    7ed2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7ed6:	4281      	cmp	r1, r0
    7ed8:	d201      	bcs.n	7ede <mpi_bigendian_to_host.part.0+0x14>
}
    7eda:	b002      	add	sp, #8
    7edc:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    7ede:	6803      	ldr	r3, [r0, #0]
    7ee0:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    7ee2:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7ee4:	eb0d 0203 	add.w	r2, sp, r3
    mbedtls_mpi_uint tmp = 0;
    7ee8:	2500      	movs	r5, #0
    7eea:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7eec:	f812 6b01 	ldrb.w	r6, [r2], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7ef0:	3b01      	subs	r3, #1
    7ef2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7ef6:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7efa:	d1f7      	bne.n	7eec <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    7efc:	680a      	ldr	r2, [r1, #0]
    7efe:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7f00:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7f02:	f814 6b01 	ldrb.w	r6, [r4], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7f06:	3a01      	subs	r2, #1
    7f08:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7f0c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7f10:	d1f7      	bne.n	7f02 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7f12:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    7f16:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    7f1a:	e7dc      	b.n	7ed6 <mpi_bigendian_to_host.part.0+0xc>

00007f1c <mbedtls_mpi_init>:
    X->n = 0;
    7f1c:	2300      	movs	r3, #0
    7f1e:	2201      	movs	r2, #1
    7f20:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
    7f24:	6083      	str	r3, [r0, #8]
}
    7f26:	4770      	bx	lr

00007f28 <mbedtls_mpi_free>:
{
    7f28:	b510      	push	{r4, lr}
    if( X == NULL )
    7f2a:	4604      	mov	r4, r0
    7f2c:	b168      	cbz	r0, 7f4a <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    7f2e:	6880      	ldr	r0, [r0, #8]
    7f30:	b130      	cbz	r0, 7f40 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    7f32:	6861      	ldr	r1, [r4, #4]
    7f34:	0089      	lsls	r1, r1, #2
    7f36:	f7fc f9af 	bl	4298 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    7f3a:	68a0      	ldr	r0, [r4, #8]
    7f3c:	f7fc f99c 	bl	4278 <mbedtls_free>
    X->n = 0;
    7f40:	2300      	movs	r3, #0
    7f42:	2201      	movs	r2, #1
    7f44:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    7f48:	60a3      	str	r3, [r4, #8]
}
    7f4a:	bd10      	pop	{r4, pc}

00007f4c <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7f4c:	f242 7310 	movw	r3, #10000	; 0x2710
    7f50:	4299      	cmp	r1, r3
{
    7f52:	b570      	push	{r4, r5, r6, lr}
    7f54:	4604      	mov	r4, r0
    7f56:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7f58:	d902      	bls.n	7f60 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    7f5a:	f06f 000f 	mvn.w	r0, #15
}
    7f5e:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    7f60:	6843      	ldr	r3, [r0, #4]
    7f62:	428b      	cmp	r3, r1
    7f64:	d216      	bcs.n	7f94 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    7f66:	2104      	movs	r1, #4
    7f68:	4628      	mov	r0, r5
    7f6a:	f7fc f97f 	bl	426c <mbedtls_calloc>
    7f6e:	4606      	mov	r6, r0
    7f70:	2800      	cmp	r0, #0
    7f72:	d0f2      	beq.n	7f5a <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    7f74:	68a1      	ldr	r1, [r4, #8]
    7f76:	b159      	cbz	r1, 7f90 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    7f78:	6862      	ldr	r2, [r4, #4]
    7f7a:	0092      	lsls	r2, r2, #2
    7f7c:	f7ff f859 	bl	7032 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    7f80:	6861      	ldr	r1, [r4, #4]
    7f82:	68a0      	ldr	r0, [r4, #8]
    7f84:	0089      	lsls	r1, r1, #2
    7f86:	f7fc f987 	bl	4298 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    7f8a:	68a0      	ldr	r0, [r4, #8]
    7f8c:	f7fc f974 	bl	4278 <mbedtls_free>
        X->p = p;
    7f90:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    7f94:	2000      	movs	r0, #0
    7f96:	e7e2      	b.n	7f5e <mbedtls_mpi_grow+0x12>

00007f98 <mbedtls_mpi_resize_clear>:
{
    7f98:	b538      	push	{r3, r4, r5, lr}
    7f9a:	4604      	mov	r4, r0
    if( limbs == 0 )
    7f9c:	460d      	mov	r5, r1
    7f9e:	b919      	cbnz	r1, 7fa8 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    7fa0:	f7ff ffc2 	bl	7f28 <mbedtls_mpi_free>
}
    7fa4:	2000      	movs	r0, #0
    7fa6:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    7fa8:	6842      	ldr	r2, [r0, #4]
    7faa:	428a      	cmp	r2, r1
    7fac:	d107      	bne.n	7fbe <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    7fae:	6880      	ldr	r0, [r0, #8]
    7fb0:	0092      	lsls	r2, r2, #2
    7fb2:	2100      	movs	r1, #0
    7fb4:	f7ff f848 	bl	7048 <memset>
        X->s = 1;
    7fb8:	2301      	movs	r3, #1
    7fba:	6023      	str	r3, [r4, #0]
        return( 0 );
    7fbc:	e7f2      	b.n	7fa4 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    7fbe:	f7ff ffb3 	bl	7f28 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    7fc2:	4629      	mov	r1, r5
    7fc4:	4620      	mov	r0, r4
}
    7fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    7fca:	f7ff bfbf 	b.w	7f4c <mbedtls_mpi_grow>

00007fce <mbedtls_mpi_copy>:
    if( X == Y )
    7fce:	4288      	cmp	r0, r1
{
    7fd0:	b570      	push	{r4, r5, r6, lr}
    7fd2:	4605      	mov	r5, r0
    7fd4:	460e      	mov	r6, r1
    if( X == Y )
    7fd6:	d00a      	beq.n	7fee <mbedtls_mpi_copy+0x20>
    if( Y->n == 0 )
    7fd8:	684c      	ldr	r4, [r1, #4]
        if( X->n != 0 )
    7fda:	6840      	ldr	r0, [r0, #4]
    if( Y->n == 0 )
    7fdc:	b96c      	cbnz	r4, 7ffa <mbedtls_mpi_copy+0x2c>
        if( X->n != 0 )
    7fde:	b1c8      	cbz	r0, 8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
            X->s = 1;
    7fe0:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    7fe2:	0082      	lsls	r2, r0, #2
            X->s = 1;
    7fe4:	602b      	str	r3, [r5, #0]
            memset( X->p, 0, X->n * ciL );
    7fe6:	68a8      	ldr	r0, [r5, #8]
    7fe8:	4621      	mov	r1, r4
    7fea:	f7ff f82d 	bl	7048 <memset>
        return( 0 );
    7fee:	2000      	movs	r0, #0
    7ff0:	e010      	b.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
        if( Y->p[i] != 0 )
    7ff2:	68b3      	ldr	r3, [r6, #8]
    7ff4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7ff8:	b913      	cbnz	r3, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    for( i = Y->n - 1; i > 0; i-- )
    7ffa:	3c01      	subs	r4, #1
    7ffc:	2c00      	cmp	r4, #0
    7ffe:	d1f8      	bne.n	7ff2 <mbedtls_mpi_copy+0x24>
    i++;
    8000:	3401      	adds	r4, #1
    X->s = Y->s;
    8002:	6833      	ldr	r3, [r6, #0]
    8004:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    8006:	4284      	cmp	r4, r0
    8008:	d905      	bls.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    800a:	4621      	mov	r1, r4
    800c:	4628      	mov	r0, r5
    800e:	f7ff ff9d 	bl	7f4c <mbedtls_mpi_grow>
    8012:	b140      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
}
    8014:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    8016:	1b02      	subs	r2, r0, r4
    8018:	68a8      	ldr	r0, [r5, #8]
    801a:	0092      	lsls	r2, r2, #2
    801c:	2100      	movs	r1, #0
    801e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8022:	f7ff f811 	bl	7048 <memset>
    memcpy( X->p, Y->p, i * ciL );
    8026:	68b1      	ldr	r1, [r6, #8]
    8028:	68a8      	ldr	r0, [r5, #8]
    802a:	00a2      	lsls	r2, r4, #2
    802c:	f7ff f801 	bl	7032 <memcpy>
    8030:	e7dd      	b.n	7fee <mbedtls_mpi_copy+0x20>

00008032 <mbedtls_mpi_safe_cond_assign>:
{
    8032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8034:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    8036:	6849      	ldr	r1, [r1, #4]
{
    8038:	4605      	mov	r5, r0
    803a:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    803c:	f7ff ff86 	bl	7f4c <mbedtls_mpi_grow>
    8040:	4607      	mov	r7, r0
    8042:	b9c0      	cbnz	r0, 8076 <mbedtls_mpi_safe_cond_assign+0x44>
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    8044:	4263      	negs	r3, r4
    8046:	431c      	orrs	r4, r3
    unsigned ua = a + 1;
    8048:	682b      	ldr	r3, [r5, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    804a:	68a9      	ldr	r1, [r5, #8]
    804c:	6870      	ldr	r0, [r6, #4]
    unsigned ua = a + 1;
    804e:	1c5a      	adds	r2, r3, #1
    unsigned ub = b + 1;
    8050:	6833      	ldr	r3, [r6, #0]
    8052:	3301      	adds	r3, #1
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    8054:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    unsigned ur = ( ua & ~mask ) | ( ub & mask );
    8058:	4053      	eors	r3, r2
    805a:	ea03 0344 	and.w	r3, r3, r4, lsl #1
    805e:	4053      	eors	r3, r2
    return( (int) ur - 1 );
    8060:	3b01      	subs	r3, #1
    X->s = mpi_safe_cond_select_sign( X->s, Y->s, assign );
    8062:	602b      	str	r3, [r5, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    8064:	68b2      	ldr	r2, [r6, #8]
    8066:	4623      	mov	r3, r4
    8068:	f7ff fd0b 	bl	7a82 <mpi_safe_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    806c:	6873      	ldr	r3, [r6, #4]
        X->p[i] &= ~limb_mask;
    806e:	3c01      	subs	r4, #1
    for( i = Y->n; i < X->n; i++ )
    8070:	686a      	ldr	r2, [r5, #4]
    8072:	429a      	cmp	r2, r3
    8074:	d801      	bhi.n	807a <mbedtls_mpi_safe_cond_assign+0x48>
}
    8076:	4638      	mov	r0, r7
    8078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] &= ~limb_mask;
    807a:	68a9      	ldr	r1, [r5, #8]
    807c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    8080:	4022      	ands	r2, r4
    8082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    8086:	3301      	adds	r3, #1
    8088:	e7f2      	b.n	8070 <mbedtls_mpi_safe_cond_assign+0x3e>

0000808a <mbedtls_mpi_lset>:
{
    808a:	b570      	push	{r4, r5, r6, lr}
    808c:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    808e:	2101      	movs	r1, #1
{
    8090:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    8092:	f7ff ff5b 	bl	7f4c <mbedtls_mpi_grow>
    8096:	4605      	mov	r5, r0
    8098:	b988      	cbnz	r0, 80be <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    809a:	6862      	ldr	r2, [r4, #4]
    809c:	4601      	mov	r1, r0
    809e:	0092      	lsls	r2, r2, #2
    80a0:	68a0      	ldr	r0, [r4, #8]
    80a2:	f7fe ffd1 	bl	7048 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    80a6:	68a3      	ldr	r3, [r4, #8]
    80a8:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    80ac:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    80ae:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    80b2:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    80b4:	bfb4      	ite	lt
    80b6:	f04f 33ff 	movlt.w	r3, #4294967295
    80ba:	2301      	movge	r3, #1
    80bc:	6023      	str	r3, [r4, #0]
}
    80be:	4628      	mov	r0, r5
    80c0:	bd70      	pop	{r4, r5, r6, pc}

000080c2 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    80c2:	6843      	ldr	r3, [r0, #4]
    80c4:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    80c8:	bf3f      	itttt	cc
    80ca:	094a      	lsrcc	r2, r1, #5
    80cc:	6883      	ldrcc	r3, [r0, #8]
    80ce:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    80d2:	f001 011f 	andcc.w	r1, r1, #31
    80d6:	bf3a      	itte	cc
    80d8:	fa20 f101 	lsrcc.w	r1, r0, r1
    80dc:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    80e0:	2000      	movcs	r0, #0
}
    80e2:	4770      	bx	lr

000080e4 <mbedtls_mpi_bitlen>:
{
    80e4:	4602      	mov	r2, r0
    if( X->n == 0 )
    80e6:	6840      	ldr	r0, [r0, #4]
    80e8:	b188      	cbz	r0, 810e <mbedtls_mpi_bitlen+0x2a>
        if( X->p[i] != 0 )
    80ea:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    80ec:	1e43      	subs	r3, r0, #1
    80ee:	b97b      	cbnz	r3, 8110 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    80f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    80f4:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    80f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    80fa:	4211      	tst	r1, r2
    80fc:	d104      	bne.n	8108 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    80fe:	3001      	adds	r0, #1
    8100:	2820      	cmp	r0, #32
        mask >>= 1;
    8102:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    8106:	d1f8      	bne.n	80fa <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    8108:	3301      	adds	r3, #1
    810a:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    810e:	4770      	bx	lr
        if( X->p[i] != 0 )
    8110:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    8114:	2900      	cmp	r1, #0
    8116:	d1eb      	bne.n	80f0 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    8118:	3b01      	subs	r3, #1
    811a:	e7e8      	b.n	80ee <mbedtls_mpi_bitlen+0xa>

0000811c <mbedtls_mpi_size>:
{
    811c:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    811e:	f7ff ffe1 	bl	80e4 <mbedtls_mpi_bitlen>
    8122:	3007      	adds	r0, #7
}
    8124:	08c0      	lsrs	r0, r0, #3
    8126:	bd08      	pop	{r3, pc}

00008128 <mbedtls_mpi_read_binary>:
{
    8128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    812c:	f012 0403 	ands.w	r4, r2, #3
    8130:	bf18      	it	ne
    8132:	2401      	movne	r4, #1
    8134:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    8138:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    813a:	4621      	mov	r1, r4
{
    813c:	4607      	mov	r7, r0
    813e:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    8140:	f7ff ff2a 	bl	7f98 <mbedtls_mpi_resize_clear>
    8144:	4606      	mov	r6, r0
    8146:	b968      	cbnz	r0, 8164 <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    8148:	b165      	cbz	r5, 8164 <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    814a:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    814c:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    8150:	462a      	mov	r2, r5
    8152:	4641      	mov	r1, r8
    8154:	4418      	add	r0, r3
    8156:	f7fe ff6c 	bl	7032 <memcpy>
    if( limbs == 0 )
    815a:	b11c      	cbz	r4, 8164 <mbedtls_mpi_read_binary+0x3c>
    815c:	68b8      	ldr	r0, [r7, #8]
    815e:	4621      	mov	r1, r4
    8160:	f7ff feb3 	bl	7eca <mpi_bigendian_to_host.part.0>
}
    8164:	4630      	mov	r0, r6
    8166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000816a <mbedtls_mpi_write_binary>:
{
    816a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    816c:	4604      	mov	r4, r0
    816e:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    8170:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
    8172:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    8176:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    817a:	d91b      	bls.n	81b4 <mbedtls_mpi_write_binary+0x4a>
        p = buf + buflen - stored_bytes;
    817c:	1b52      	subs	r2, r2, r5
    817e:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    8180:	2100      	movs	r1, #0
    8182:	f7fe ff61 	bl	7048 <memset>
        p = buf + buflen - stored_bytes;
    8186:	4630      	mov	r0, r6
    8188:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    818a:	1881      	adds	r1, r0, r2
    818c:	2300      	movs	r3, #0
    818e:	429a      	cmp	r2, r3
    8190:	d112      	bne.n	81b8 <mbedtls_mpi_write_binary+0x4e>
    return( 0 );
    8192:	2000      	movs	r0, #0
}
    8194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    8196:	68a7      	ldr	r7, [r4, #8]
    8198:	f023 0c03 	bic.w	ip, r3, #3
    819c:	f003 0103 	and.w	r1, r3, #3
    81a0:	00ce      	lsls	r6, r1, #3
    81a2:	f857 100c 	ldr.w	r1, [r7, ip]
    81a6:	40f1      	lsrs	r1, r6
    81a8:	b2c9      	uxtb	r1, r1
    81aa:	b989      	cbnz	r1, 81d0 <mbedtls_mpi_write_binary+0x66>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    81ac:	3301      	adds	r3, #1
    81ae:	42ab      	cmp	r3, r5
    81b0:	d1f1      	bne.n	8196 <mbedtls_mpi_write_binary+0x2c>
    81b2:	e7ea      	b.n	818a <mbedtls_mpi_write_binary+0x20>
    81b4:	4613      	mov	r3, r2
    81b6:	e7fa      	b.n	81ae <mbedtls_mpi_write_binary+0x44>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    81b8:	68a7      	ldr	r7, [r4, #8]
    81ba:	f023 0603 	bic.w	r6, r3, #3
    81be:	f003 0003 	and.w	r0, r3, #3
    81c2:	00c5      	lsls	r5, r0, #3
    81c4:	59b8      	ldr	r0, [r7, r6]
    81c6:	40e8      	lsrs	r0, r5
    81c8:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    81cc:	3301      	adds	r3, #1
    81ce:	e7de      	b.n	818e <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    81d0:	f06f 0007 	mvn.w	r0, #7
    81d4:	e7de      	b.n	8194 <mbedtls_mpi_write_binary+0x2a>

000081d6 <mbedtls_mpi_shift_l>:
{
    81d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81d8:	4605      	mov	r5, r0
    81da:	460e      	mov	r6, r1
    v0 = count / (biL    );
    81dc:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    81de:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    81e2:	f7ff ff7f 	bl	80e4 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    81e6:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    81e8:	4430      	add	r0, r6
    if( X->n * biL < i )
    81ea:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    81ee:	d805      	bhi.n	81fc <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    81f0:	2e1f      	cmp	r6, #31
    81f2:	d80f      	bhi.n	8214 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    81f4:	2f00      	cmp	r7, #0
    81f6:	d13c      	bne.n	8272 <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    81f8:	2000      	movs	r0, #0
    81fa:	e00a      	b.n	8212 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    81fc:	f010 011f 	ands.w	r1, r0, #31
    8200:	bf18      	it	ne
    8202:	2101      	movne	r1, #1
    8204:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    8208:	4628      	mov	r0, r5
    820a:	f7ff fe9f 	bl	7f4c <mbedtls_mpi_grow>
    820e:	2800      	cmp	r0, #0
    8210:	d0ee      	beq.n	81f0 <mbedtls_mpi_shift_l+0x1a>
}
    8212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    8214:	686b      	ldr	r3, [r5, #4]
    8216:	f06f 0003 	mvn.w	r0, #3
    821a:	009a      	lsls	r2, r3, #2
    821c:	4360      	muls	r0, r4
    821e:	4619      	mov	r1, r3
    8220:	42a1      	cmp	r1, r4
    8222:	f1a2 0204 	sub.w	r2, r2, #4
    8226:	d80c      	bhi.n	8242 <mbedtls_mpi_shift_l+0x6c>
    8228:	1ae2      	subs	r2, r4, r3
    822a:	429c      	cmp	r4, r3
    822c:	bf88      	it	hi
    822e:	2200      	movhi	r2, #0
    8230:	4413      	add	r3, r2
    8232:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
    8234:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
    8236:	3b04      	subs	r3, #4
    8238:	1d19      	adds	r1, r3, #4
    823a:	d0db      	beq.n	81f4 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    823c:	68a9      	ldr	r1, [r5, #8]
    823e:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    8240:	e7f9      	b.n	8236 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    8242:	68ae      	ldr	r6, [r5, #8]
    8244:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
    8248:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    824a:	f85c c000 	ldr.w	ip, [ip, r0]
    824e:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    8252:	e7e5      	b.n	8220 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    8254:	68a8      	ldr	r0, [r5, #8]
    8256:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            X->p[i] <<= t1;
    825a:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    825e:	4313      	orrs	r3, r2
    8260:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    8264:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    8268:	3401      	adds	r4, #1
    826a:	686b      	ldr	r3, [r5, #4]
    826c:	42a3      	cmp	r3, r4
    826e:	d8f1      	bhi.n	8254 <mbedtls_mpi_shift_l+0x7e>
    8270:	e7c2      	b.n	81f8 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    8272:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    8274:	f1c7 0620 	rsb	r6, r7, #32
    8278:	e7f7      	b.n	826a <mbedtls_mpi_shift_l+0x94>

0000827a <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    827a:	6843      	ldr	r3, [r0, #4]
{
    827c:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    827e:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    8280:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    8282:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    8286:	d301      	bcc.n	828c <mbedtls_mpi_shift_r+0x12>
    8288:	d104      	bne.n	8294 <mbedtls_mpi_shift_r+0x1a>
    828a:	b36a      	cbz	r2, 82e8 <mbedtls_mpi_shift_r+0x6e>
}
    828c:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    828e:	2100      	movs	r1, #0
    8290:	f7ff befb 	b.w	808a <mbedtls_mpi_lset>
    if( v0 > 0 )
    8294:	291f      	cmp	r1, #31
    8296:	d829      	bhi.n	82ec <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    8298:	b9aa      	cbnz	r2, 82c6 <mbedtls_mpi_shift_r+0x4c>
}
    829a:	2000      	movs	r0, #0
    829c:	bcf0      	pop	{r4, r5, r6, r7}
    829e:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    82a0:	6885      	ldr	r5, [r0, #8]
    82a2:	586e      	ldr	r6, [r5, r1]
    82a4:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    82a8:	3104      	adds	r1, #4
    82aa:	3301      	adds	r3, #1
    82ac:	6845      	ldr	r5, [r0, #4]
    82ae:	1b2d      	subs	r5, r5, r4
    82b0:	429d      	cmp	r5, r3
    82b2:	d8f5      	bhi.n	82a0 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    82b4:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    82b6:	6841      	ldr	r1, [r0, #4]
    82b8:	4299      	cmp	r1, r3
    82ba:	d9ed      	bls.n	8298 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    82bc:	6881      	ldr	r1, [r0, #8]
    82be:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    82c2:	3301      	adds	r3, #1
    82c4:	e7f7      	b.n	82b6 <mbedtls_mpi_shift_r+0x3c>
        for( i = X->n; i > 0; i-- )
    82c6:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    82c8:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
    82ca:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    82ce:	3b01      	subs	r3, #1
    82d0:	d3e3      	bcc.n	829a <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    82d2:	6886      	ldr	r6, [r0, #8]
    82d4:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    82d8:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    82dc:	4321      	orrs	r1, r4
    82de:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    82e2:	fa05 f407 	lsl.w	r4, r5, r7
    82e6:	e7f2      	b.n	82ce <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    82e8:	291f      	cmp	r1, #31
    82ea:	d9d6      	bls.n	829a <mbedtls_mpi_shift_r+0x20>
    82ec:	00a1      	lsls	r1, r4, #2
{
    82ee:	2300      	movs	r3, #0
    82f0:	e7dc      	b.n	82ac <mbedtls_mpi_shift_r+0x32>

000082f2 <mbedtls_mpi_cmp_abs>:
{
    82f2:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    82f4:	6843      	ldr	r3, [r0, #4]
    82f6:	b92b      	cbnz	r3, 8304 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    82f8:	684a      	ldr	r2, [r1, #4]
    82fa:	b962      	cbnz	r2, 8316 <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    82fc:	1e18      	subs	r0, r3, #0
    82fe:	bf18      	it	ne
    8300:	2001      	movne	r0, #1
    8302:	e028      	b.n	8356 <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    8304:	6882      	ldr	r2, [r0, #8]
    8306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    830a:	f852 2c04 	ldr.w	r2, [r2, #-4]
    830e:	2a00      	cmp	r2, #0
    8310:	d1f2      	bne.n	82f8 <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    8312:	3b01      	subs	r3, #1
    8314:	e7ef      	b.n	82f6 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    8316:	688c      	ldr	r4, [r1, #8]
    8318:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    831c:	f855 5c04 	ldr.w	r5, [r5, #-4]
    8320:	b935      	cbnz	r5, 8330 <mbedtls_mpi_cmp_abs+0x3e>
    for( j = Y->n; j > 0; j-- )
    8322:	3a01      	subs	r2, #1
    8324:	e7e9      	b.n	82fa <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    8326:	2001      	movs	r0, #1
    8328:	e015      	b.n	8356 <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
    832a:	f04f 30ff 	mov.w	r0, #4294967295
    832e:	e012      	b.n	8356 <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    8330:	2b00      	cmp	r3, #0
    8332:	d0fa      	beq.n	832a <mbedtls_mpi_cmp_abs+0x38>
    if( i > j ) return(  1 );
    8334:	4293      	cmp	r3, r2
    8336:	d8f6      	bhi.n	8326 <mbedtls_mpi_cmp_abs+0x34>
    if( j > i ) return( -1 );
    8338:	d3f7      	bcc.n	832a <mbedtls_mpi_cmp_abs+0x38>
    833a:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    833c:	6882      	ldr	r2, [r0, #8]
    833e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    8342:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    8346:	4291      	cmp	r1, r2
    8348:	d8ed      	bhi.n	8326 <mbedtls_mpi_cmp_abs+0x34>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    834a:	f103 33ff 	add.w	r3, r3, #4294967295
    834e:	d3ec      	bcc.n	832a <mbedtls_mpi_cmp_abs+0x38>
    for( ; i > 0; i-- )
    8350:	1c5a      	adds	r2, r3, #1
    8352:	d1f3      	bne.n	833c <mbedtls_mpi_cmp_abs+0x4a>
    return( 0 );
    8354:	2000      	movs	r0, #0
}
    8356:	bd30      	pop	{r4, r5, pc}

00008358 <mbedtls_mpi_cmp_mpi>:
{
    8358:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    835a:	6843      	ldr	r3, [r0, #4]
{
    835c:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
    835e:	b923      	cbnz	r3, 836a <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    8360:	6848      	ldr	r0, [r1, #4]
    8362:	b958      	cbnz	r0, 837c <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    8364:	2b00      	cmp	r3, #0
    8366:	d136      	bne.n	83d6 <mbedtls_mpi_cmp_mpi+0x7e>
    8368:	e02f      	b.n	83ca <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    836a:	6890      	ldr	r0, [r2, #8]
    836c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8370:	f850 0c04 	ldr.w	r0, [r0, #-4]
    8374:	2800      	cmp	r0, #0
    8376:	d1f3      	bne.n	8360 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    8378:	3b01      	subs	r3, #1
    837a:	e7f0      	b.n	835e <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    837c:	688c      	ldr	r4, [r1, #8]
    837e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    8382:	f855 5c04 	ldr.w	r5, [r5, #-4]
    8386:	bb15      	cbnz	r5, 83ce <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    8388:	3801      	subs	r0, #1
    838a:	e7ea      	b.n	8362 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    838c:	d202      	bcs.n	8394 <mbedtls_mpi_cmp_mpi+0x3c>
    838e:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    8390:	4240      	negs	r0, r0
    8392:	e021      	b.n	83d8 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    8394:	6810      	ldr	r0, [r2, #0]
    if( j > i ) return( -Y->s );
    8396:	6809      	ldr	r1, [r1, #0]
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    8398:	2800      	cmp	r0, #0
    839a:	dd03      	ble.n	83a4 <mbedtls_mpi_cmp_mpi+0x4c>
    839c:	2900      	cmp	r1, #0
    839e:	da07      	bge.n	83b0 <mbedtls_mpi_cmp_mpi+0x58>
    83a0:	2001      	movs	r0, #1
    83a2:	e019      	b.n	83d8 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    83a4:	2900      	cmp	r1, #0
    83a6:	dd03      	ble.n	83b0 <mbedtls_mpi_cmp_mpi+0x58>
    83a8:	b110      	cbz	r0, 83b0 <mbedtls_mpi_cmp_mpi+0x58>
    83aa:	f04f 30ff 	mov.w	r0, #4294967295
    83ae:	e013      	b.n	83d8 <mbedtls_mpi_cmp_mpi+0x80>
    83b0:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    83b2:	6891      	ldr	r1, [r2, #8]
    83b4:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    83b8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    83bc:	428d      	cmp	r5, r1
    83be:	d80b      	bhi.n	83d8 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    83c0:	f103 33ff 	add.w	r3, r3, #4294967295
    83c4:	d3e4      	bcc.n	8390 <mbedtls_mpi_cmp_mpi+0x38>
    for( ; i > 0; i-- )
    83c6:	1c59      	adds	r1, r3, #1
    83c8:	d1f3      	bne.n	83b2 <mbedtls_mpi_cmp_mpi+0x5a>
    return( 0 );
    83ca:	2000      	movs	r0, #0
    83cc:	e004      	b.n	83d8 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    83ce:	2b00      	cmp	r3, #0
    83d0:	d0dd      	beq.n	838e <mbedtls_mpi_cmp_mpi+0x36>
    if( i > j ) return(  X->s );
    83d2:	4283      	cmp	r3, r0
    83d4:	d9da      	bls.n	838c <mbedtls_mpi_cmp_mpi+0x34>
    83d6:	6810      	ldr	r0, [r2, #0]
}
    83d8:	bd30      	pop	{r4, r5, pc}

000083da <mbedtls_mpi_cmp_int>:
{
    83da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    83dc:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    83e0:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    83e4:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    83e6:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    83e8:	bfb4      	ite	lt
    83ea:	f04f 33ff 	movlt.w	r3, #4294967295
    83ee:	2301      	movge	r3, #1
    83f0:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    83f2:	a901      	add	r1, sp, #4
    Y.n = 1;
    83f4:	2301      	movs	r3, #1
    83f6:	9302      	str	r3, [sp, #8]
    Y.p = p;
    83f8:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    83fc:	f7ff ffac 	bl	8358 <mbedtls_mpi_cmp_mpi>
}
    8400:	b005      	add	sp, #20
    8402:	f85d fb04 	ldr.w	pc, [sp], #4

00008406 <mbedtls_mpi_add_abs>:
    if( X == B )
    8406:	4290      	cmp	r0, r2
{
    8408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    840c:	4606      	mov	r6, r0
    840e:	460f      	mov	r7, r1
    8410:	4615      	mov	r5, r2
    if( X == B )
    8412:	d002      	beq.n	841a <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    8414:	4288      	cmp	r0, r1
    8416:	d129      	bne.n	846c <mbedtls_mpi_add_abs+0x66>
{
    8418:	462f      	mov	r7, r5
    X->s = 1;
    841a:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    841c:	687d      	ldr	r5, [r7, #4]
    X->s = 1;
    841e:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    8420:	bb65      	cbnz	r5, 847c <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    8422:	4629      	mov	r1, r5
    8424:	4630      	mov	r0, r6
    8426:	f7ff fd91 	bl	7f4c <mbedtls_mpi_grow>
    842a:	4604      	mov	r4, r0
    842c:	bb18      	cbnz	r0, 8476 <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    842e:	68b3      	ldr	r3, [r6, #8]
    8430:	68b9      	ldr	r1, [r7, #8]
    8432:	469c      	mov	ip, r3
    8434:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    8436:	4285      	cmp	r5, r0
    8438:	d129      	bne.n	848e <mbedtls_mpi_add_abs+0x88>
    843a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    843e:	b1d7      	cbz	r7, 8476 <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    8440:	6872      	ldr	r2, [r6, #4]
    8442:	42aa      	cmp	r2, r5
    8444:	f105 0801 	add.w	r8, r5, #1
    8448:	d807      	bhi.n	845a <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    844a:	4641      	mov	r1, r8
    844c:	4630      	mov	r0, r6
    844e:	f7ff fd7d 	bl	7f4c <mbedtls_mpi_grow>
    8452:	bb68      	cbnz	r0, 84b0 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    8454:	68b3      	ldr	r3, [r6, #8]
    8456:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    845a:	681a      	ldr	r2, [r3, #0]
    845c:	19d2      	adds	r2, r2, r7
    845e:	f843 2b04 	str.w	r2, [r3], #4
    8462:	bf2c      	ite	cs
    8464:	2701      	movcs	r7, #1
    8466:	2700      	movcc	r7, #0
    8468:	4645      	mov	r5, r8
    846a:	e7e8      	b.n	843e <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    846c:	f7ff fdaf 	bl	7fce <mbedtls_mpi_copy>
    8470:	4604      	mov	r4, r0
    8472:	2800      	cmp	r0, #0
    8474:	d0d0      	beq.n	8418 <mbedtls_mpi_add_abs+0x12>
}
    8476:	4620      	mov	r0, r4
    8478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    847c:	68bb      	ldr	r3, [r7, #8]
    847e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    8482:	f853 3c04 	ldr.w	r3, [r3, #-4]
    8486:	2b00      	cmp	r3, #0
    8488:	d1cb      	bne.n	8422 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    848a:	3d01      	subs	r5, #1
    848c:	e7c8      	b.n	8420 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    848e:	f8dc 2000 	ldr.w	r2, [ip]
    8492:	19d2      	adds	r2, r2, r7
    8494:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    8498:	bf2c      	ite	cs
    849a:	f04f 0e01 	movcs.w	lr, #1
    849e:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    84a2:	19d2      	adds	r2, r2, r7
    84a4:	f84c 2b04 	str.w	r2, [ip], #4
    84a8:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    84ac:	3001      	adds	r0, #1
    84ae:	e7c2      	b.n	8436 <mbedtls_mpi_add_abs+0x30>
    return( ret );
    84b0:	4604      	mov	r4, r0
    84b2:	e7e0      	b.n	8476 <mbedtls_mpi_add_abs+0x70>

000084b4 <mbedtls_mpi_sub_abs>:
{
    84b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for( n = B->n; n > 0; n-- )
    84b8:	6854      	ldr	r4, [r2, #4]
{
    84ba:	4605      	mov	r5, r0
    84bc:	460e      	mov	r6, r1
    84be:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    84c0:	b93c      	cbnz	r4, 84d2 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    84c2:	6871      	ldr	r1, [r6, #4]
    84c4:	42a1      	cmp	r1, r4
    84c6:	d20e      	bcs.n	84e6 <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    84c8:	f06f 0709 	mvn.w	r7, #9
}
    84cc:	4638      	mov	r0, r7
    84ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    84d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    84d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    84da:	f853 3c04 	ldr.w	r3, [r3, #-4]
    84de:	2b00      	cmp	r3, #0
    84e0:	d1ef      	bne.n	84c2 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    84e2:	3c01      	subs	r4, #1
    84e4:	e7ec      	b.n	84c0 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    84e6:	4628      	mov	r0, r5
    84e8:	f7ff fd30 	bl	7f4c <mbedtls_mpi_grow>
    84ec:	4607      	mov	r7, r0
    84ee:	2800      	cmp	r0, #0
    84f0:	d1ec      	bne.n	84cc <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    84f2:	6872      	ldr	r2, [r6, #4]
    84f4:	42a2      	cmp	r2, r4
    84f6:	d909      	bls.n	850c <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    84f8:	68b1      	ldr	r1, [r6, #8]
    84fa:	68a8      	ldr	r0, [r5, #8]
    84fc:	1b12      	subs	r2, r2, r4
    84fe:	0092      	lsls	r2, r2, #2
    8500:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    8504:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8508:	f7fe fd93 	bl	7032 <memcpy>
    if( X->n > A->n )
    850c:	686a      	ldr	r2, [r5, #4]
    850e:	6870      	ldr	r0, [r6, #4]
    8510:	4282      	cmp	r2, r0
    8512:	d907      	bls.n	8524 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    8514:	68ab      	ldr	r3, [r5, #8]
    8516:	1a12      	subs	r2, r2, r0
    8518:	0092      	lsls	r2, r2, #2
    851a:	2100      	movs	r1, #0
    851c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8520:	f7fe fd92 	bl	7048 <memset>
    mbedtls_mpi_uint c = 0, t, z;
    8524:	2200      	movs	r2, #0
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    8526:	68a9      	ldr	r1, [r5, #8]
    8528:	f8d6 e008 	ldr.w	lr, [r6, #8]
    852c:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    8530:	4613      	mov	r3, r2
    8532:	429c      	cmp	r4, r3
    8534:	d111      	bne.n	855a <mbedtls_mpi_sub_abs+0xa6>
    if( carry != 0 )
    8536:	b16a      	cbz	r2, 8554 <mbedtls_mpi_sub_abs+0xa0>
    8538:	eb01 0384 	add.w	r3, r1, r4, lsl #2
            --X->p[n];
    853c:	f04f 30ff 	mov.w	r0, #4294967295
        for( ; n < X->n && X->p[n] == 0; n++ )
    8540:	686a      	ldr	r2, [r5, #4]
    8542:	42a2      	cmp	r2, r4
    8544:	d923      	bls.n	858e <mbedtls_mpi_sub_abs+0xda>
    8546:	681a      	ldr	r2, [r3, #0]
    8548:	b1ea      	cbz	r2, 8586 <mbedtls_mpi_sub_abs+0xd2>
        --X->p[n];
    854a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    854e:	3b01      	subs	r3, #1
    8550:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    X->s = 1;
    8554:	2301      	movs	r3, #1
    8556:	602b      	str	r3, [r5, #0]
    return( ret );
    8558:	e7b8      	b.n	84cc <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    855a:	f85e c023 	ldr.w	ip, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    855e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    8562:	ebac 0002 	sub.w	r0, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    8566:	42b0      	cmp	r0, r6
    8568:	bf2c      	ite	cs
    856a:	f04f 0900 	movcs.w	r9, #0
    856e:	f04f 0901 	movcc.w	r9, #1
    8572:	1b80      	subs	r0, r0, r6
    8574:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    8578:	4594      	cmp	ip, r2
    857a:	bf2c      	ite	cs
    857c:	464a      	movcs	r2, r9
    857e:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    8582:	3301      	adds	r3, #1
    8584:	e7d5      	b.n	8532 <mbedtls_mpi_sub_abs+0x7e>
            --X->p[n];
    8586:	f843 0b04 	str.w	r0, [r3], #4
        for( ; n < X->n && X->p[n] == 0; n++ )
    858a:	3401      	adds	r4, #1
    858c:	e7d8      	b.n	8540 <mbedtls_mpi_sub_abs+0x8c>
        if( n == X->n )
    858e:	d1dc      	bne.n	854a <mbedtls_mpi_sub_abs+0x96>
    8590:	e79a      	b.n	84c8 <mbedtls_mpi_sub_abs+0x14>

00008592 <mbedtls_mpi_add_mpi>:
{
    8592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    8594:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    8596:	6813      	ldr	r3, [r2, #0]
    8598:	436b      	muls	r3, r5
{
    859a:	4604      	mov	r4, r0
    859c:	460f      	mov	r7, r1
    859e:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    85a0:	d516      	bpl.n	85d0 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    85a2:	4611      	mov	r1, r2
    85a4:	4638      	mov	r0, r7
    85a6:	f7ff fea4 	bl	82f2 <mbedtls_mpi_cmp_abs>
    85aa:	2800      	cmp	r0, #0
    85ac:	db06      	blt.n	85bc <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    85ae:	4632      	mov	r2, r6
    85b0:	4639      	mov	r1, r7
    85b2:	4620      	mov	r0, r4
    85b4:	f7ff ff7e 	bl	84b4 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    85b8:	b140      	cbz	r0, 85cc <mbedtls_mpi_add_mpi+0x3a>
}
    85ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    85bc:	463a      	mov	r2, r7
    85be:	4631      	mov	r1, r6
    85c0:	4620      	mov	r0, r4
    85c2:	f7ff ff77 	bl	84b4 <mbedtls_mpi_sub_abs>
    85c6:	2800      	cmp	r0, #0
    85c8:	d1f7      	bne.n	85ba <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    85ca:	426d      	negs	r5, r5
        X->s = s;
    85cc:	6025      	str	r5, [r4, #0]
    return( ret );
    85ce:	e7f4      	b.n	85ba <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    85d0:	f7ff ff19 	bl	8406 <mbedtls_mpi_add_abs>
    85d4:	e7f0      	b.n	85b8 <mbedtls_mpi_add_mpi+0x26>

000085d6 <mbedtls_mpi_sub_mpi>:
{
    85d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    85d8:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    85da:	6813      	ldr	r3, [r2, #0]
    85dc:	436b      	muls	r3, r5
    85de:	2b00      	cmp	r3, #0
{
    85e0:	4604      	mov	r4, r0
    85e2:	460f      	mov	r7, r1
    85e4:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    85e6:	dd16      	ble.n	8616 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    85e8:	4611      	mov	r1, r2
    85ea:	4638      	mov	r0, r7
    85ec:	f7ff fe81 	bl	82f2 <mbedtls_mpi_cmp_abs>
    85f0:	2800      	cmp	r0, #0
    85f2:	db06      	blt.n	8602 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    85f4:	4632      	mov	r2, r6
    85f6:	4639      	mov	r1, r7
    85f8:	4620      	mov	r0, r4
    85fa:	f7ff ff5b 	bl	84b4 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    85fe:	b140      	cbz	r0, 8612 <mbedtls_mpi_sub_mpi+0x3c>
}
    8600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    8602:	463a      	mov	r2, r7
    8604:	4631      	mov	r1, r6
    8606:	4620      	mov	r0, r4
    8608:	f7ff ff54 	bl	84b4 <mbedtls_mpi_sub_abs>
    860c:	2800      	cmp	r0, #0
    860e:	d1f7      	bne.n	8600 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    8610:	426d      	negs	r5, r5
        X->s = s;
    8612:	6025      	str	r5, [r4, #0]
    return( ret );
    8614:	e7f4      	b.n	8600 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    8616:	f7ff fef6 	bl	8406 <mbedtls_mpi_add_abs>
    861a:	e7f0      	b.n	85fe <mbedtls_mpi_sub_mpi+0x28>

0000861c <mbedtls_mpi_mul_int>:
{
    861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n = A->n;
    8620:	684e      	ldr	r6, [r1, #4]
{
    8622:	4605      	mov	r5, r0
    8624:	460f      	mov	r7, r1
    8626:	4690      	mov	r8, r2
    while( n > 0 && A->p[n - 1] == 0 )
    8628:	b146      	cbz	r6, 863c <mbedtls_mpi_mul_int+0x20>
    862a:	68bb      	ldr	r3, [r7, #8]
    862c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    8630:	f853 3c04 	ldr.w	r3, [r3, #-4]
    8634:	b143      	cbz	r3, 8648 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    8636:	f1b8 0f00 	cmp.w	r8, #0
    863a:	d107      	bne.n	864c <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    863c:	4628      	mov	r0, r5
    863e:	2100      	movs	r1, #0
}
    8640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    8644:	f7ff bd21 	b.w	808a <mbedtls_mpi_lset>
        --n;
    8648:	3e01      	subs	r6, #1
    864a:	e7ed      	b.n	8628 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    864c:	1c71      	adds	r1, r6, #1
    864e:	4628      	mov	r0, r5
    8650:	f7ff fc7c 	bl	7f4c <mbedtls_mpi_grow>
    8654:	4604      	mov	r4, r0
    8656:	b960      	cbnz	r0, 8672 <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    8658:	4639      	mov	r1, r7
    865a:	4628      	mov	r0, r5
    865c:	f7ff fcb7 	bl	7fce <mbedtls_mpi_copy>
    8660:	4604      	mov	r4, r0
    8662:	b930      	cbnz	r0, 8672 <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    8664:	68aa      	ldr	r2, [r5, #8]
    8666:	68b9      	ldr	r1, [r7, #8]
    8668:	f108 33ff 	add.w	r3, r8, #4294967295
    866c:	4630      	mov	r0, r6
    866e:	f7ff fa1a 	bl	7aa6 <mpi_mul_hlp>
}
    8672:	4620      	mov	r0, r4
    8674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008678 <mbedtls_mpi_div_mpi>:
{
    8678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    867c:	b099      	sub	sp, #100	; 0x64
    867e:	4688      	mov	r8, r1
    8680:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    8682:	2100      	movs	r1, #0
    8684:	4618      	mov	r0, r3
{
    8686:	4616      	mov	r6, r2
    8688:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    868a:	f7ff fea6 	bl	83da <mbedtls_mpi_cmp_int>
    868e:	2800      	cmp	r0, #0
    8690:	f000 8194 	beq.w	89bc <mbedtls_mpi_div_mpi+0x344>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    8694:	2303      	movs	r3, #3
    X->n = 0;
    8696:	2400      	movs	r4, #0
    8698:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    869a:	9313      	str	r3, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    869c:	9901      	ldr	r1, [sp, #4]
    T2.s = 1;
    869e:	9512      	str	r5, [sp, #72]	; 0x48
    T2.p = TP2;
    86a0:	ab15      	add	r3, sp, #84	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    86a2:	4630      	mov	r0, r6
    X->n = 0;
    86a4:	e9cd 5406 	strd	r5, r4, [sp, #24]
    X->s = 1;
    86a8:	e9cd 4508 	strd	r4, r5, [sp, #32]
    X->p = NULL;
    86ac:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    X->n = 0;
    86b0:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    X->s = 1;
    86b4:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    X->p = NULL;
    86b8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    T2.p = TP2;
    86bc:	9314      	str	r3, [sp, #80]	; 0x50
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    86be:	f7ff fe18 	bl	82f2 <mbedtls_mpi_cmp_abs>
    86c2:	42a0      	cmp	r0, r4
    86c4:	da29      	bge.n	871a <mbedtls_mpi_div_mpi+0xa2>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    86c6:	9b00      	ldr	r3, [sp, #0]
    86c8:	b93b      	cbnz	r3, 86da <mbedtls_mpi_div_mpi+0x62>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    86ca:	f1b8 0f00 	cmp.w	r8, #0
    86ce:	d11c      	bne.n	870a <mbedtls_mpi_div_mpi+0x92>
        return( 0 );
    86d0:	2400      	movs	r4, #0
}
    86d2:	4620      	mov	r0, r4
    86d4:	b019      	add	sp, #100	; 0x64
    86d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    86da:	4621      	mov	r1, r4
    86dc:	9800      	ldr	r0, [sp, #0]
    86de:	f7ff fcd4 	bl	808a <mbedtls_mpi_lset>
    86e2:	4604      	mov	r4, r0
    86e4:	2800      	cmp	r0, #0
    86e6:	d0f0      	beq.n	86ca <mbedtls_mpi_div_mpi+0x52>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    86e8:	a806      	add	r0, sp, #24
    86ea:	f7ff fc1d 	bl	7f28 <mbedtls_mpi_free>
    86ee:	a809      	add	r0, sp, #36	; 0x24
    86f0:	f7ff fc1a 	bl	7f28 <mbedtls_mpi_free>
    86f4:	a80c      	add	r0, sp, #48	; 0x30
    86f6:	f7ff fc17 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    86fa:	a80f      	add	r0, sp, #60	; 0x3c
    86fc:	f7ff fc14 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    8700:	210c      	movs	r1, #12
    8702:	a815      	add	r0, sp, #84	; 0x54
    8704:	f7fb fdc8 	bl	4298 <mbedtls_platform_zeroize>
    return( ret );
    8708:	e7e3      	b.n	86d2 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    870a:	4631      	mov	r1, r6
    870c:	4640      	mov	r0, r8
    870e:	f7ff fc5e 	bl	7fce <mbedtls_mpi_copy>
    8712:	4604      	mov	r4, r0
    8714:	2800      	cmp	r0, #0
    8716:	d1e7      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    8718:	e7da      	b.n	86d0 <mbedtls_mpi_div_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    871a:	4631      	mov	r1, r6
    871c:	a806      	add	r0, sp, #24
    871e:	f7ff fc56 	bl	7fce <mbedtls_mpi_copy>
    8722:	4604      	mov	r4, r0
    8724:	2800      	cmp	r0, #0
    8726:	d1df      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    8728:	af09      	add	r7, sp, #36	; 0x24
    872a:	9901      	ldr	r1, [sp, #4]
    872c:	4638      	mov	r0, r7
    872e:	f7ff fc4e 	bl	7fce <mbedtls_mpi_copy>
    8732:	4604      	mov	r4, r0
    8734:	2800      	cmp	r0, #0
    8736:	d1d7      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    8738:	6871      	ldr	r1, [r6, #4]
    X.s = Y.s = 1;
    873a:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    873c:	3102      	adds	r1, #2
    873e:	a80c      	add	r0, sp, #48	; 0x30
    X.s = Y.s = 1;
    8740:	9506      	str	r5, [sp, #24]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    8742:	f7ff fc03 	bl	7f4c <mbedtls_mpi_grow>
    8746:	4604      	mov	r4, r0
    8748:	2800      	cmp	r0, #0
    874a:	d1cd      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    874c:	4601      	mov	r1, r0
    874e:	a80c      	add	r0, sp, #48	; 0x30
    8750:	f7ff fc9b 	bl	808a <mbedtls_mpi_lset>
    8754:	4604      	mov	r4, r0
    8756:	2800      	cmp	r0, #0
    8758:	d1c6      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    875a:	6871      	ldr	r1, [r6, #4]
    875c:	a80f      	add	r0, sp, #60	; 0x3c
    875e:	3102      	adds	r1, #2
    8760:	f7ff fbf4 	bl	7f4c <mbedtls_mpi_grow>
    8764:	4604      	mov	r4, r0
    8766:	2800      	cmp	r0, #0
    8768:	d1be      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    876a:	4638      	mov	r0, r7
    876c:	f7ff fcba 	bl	80e4 <mbedtls_mpi_bitlen>
    8770:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    8774:	281f      	cmp	r0, #31
    8776:	d073      	beq.n	8860 <mbedtls_mpi_div_mpi+0x1e8>
        k = biL - 1 - k;
    8778:	f1c0 0a1f 	rsb	sl, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    877c:	4651      	mov	r1, sl
    877e:	a806      	add	r0, sp, #24
    8780:	f7ff fd29 	bl	81d6 <mbedtls_mpi_shift_l>
    8784:	4604      	mov	r4, r0
    8786:	2800      	cmp	r0, #0
    8788:	d1ae      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    878a:	4651      	mov	r1, sl
    878c:	4638      	mov	r0, r7
    878e:	f7ff fd22 	bl	81d6 <mbedtls_mpi_shift_l>
    8792:	4604      	mov	r4, r0
    8794:	2800      	cmp	r0, #0
    8796:	d1a7      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    n = X.n - 1;
    8798:	f8dd 901c 	ldr.w	r9, [sp, #28]
    t = Y.n - 1;
    879c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    879e:	eba9 0305 	sub.w	r3, r9, r5
    87a2:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    87a6:	4659      	mov	r1, fp
    87a8:	4638      	mov	r0, r7
    87aa:	9302      	str	r3, [sp, #8]
    87ac:	f7ff fd13 	bl	81d6 <mbedtls_mpi_shift_l>
    87b0:	4604      	mov	r4, r0
    87b2:	2800      	cmp	r0, #0
    87b4:	d198      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
        Z.p[n - t]++;
    87b6:	9b02      	ldr	r3, [sp, #8]
    87b8:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    87ba:	4639      	mov	r1, r7
    87bc:	a806      	add	r0, sp, #24
    87be:	9302      	str	r3, [sp, #8]
    87c0:	f7ff fdca 	bl	8358 <mbedtls_mpi_cmp_mpi>
    87c4:	2800      	cmp	r0, #0
    87c6:	9b02      	ldr	r3, [sp, #8]
    87c8:	da4c      	bge.n	8864 <mbedtls_mpi_div_mpi+0x1ec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    87ca:	4659      	mov	r1, fp
    87cc:	4638      	mov	r0, r7
    87ce:	f7ff fd54 	bl	827a <mbedtls_mpi_shift_r>
    87d2:	4604      	mov	r4, r0
    87d4:	2800      	cmp	r0, #0
    87d6:	d187      	bne.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    t = Y.n - 1;
    87d8:	1e6b      	subs	r3, r5, #1
    87da:	9302      	str	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    87dc:	009b      	lsls	r3, r3, #2
    87de:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    87e0:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    87e4:	3b02      	subs	r3, #2
    87e6:	009b      	lsls	r3, r3, #2
    87e8:	9305      	str	r3, [sp, #20]
    87ea:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
    n = X.n - 1;
    87ee:	f109 37ff 	add.w	r7, r9, #4294967295
    87f2:	3b01      	subs	r3, #1
    87f4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    87f8:	1b5d      	subs	r5, r3, r5
    87fa:	f1a9 0902 	sub.w	r9, r9, #2
    87fe:	00ad      	lsls	r5, r5, #2
    8800:	ea4f 0b89 	mov.w	fp, r9, lsl #2
    for( i = n; i > t ; i-- )
    8804:	9b02      	ldr	r3, [sp, #8]
    8806:	429f      	cmp	r7, r3
    8808:	d83b      	bhi.n	8882 <mbedtls_mpi_div_mpi+0x20a>
    if( Q != NULL )
    880a:	9b00      	ldr	r3, [sp, #0]
    880c:	b153      	cbz	r3, 8824 <mbedtls_mpi_div_mpi+0x1ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    880e:	a90c      	add	r1, sp, #48	; 0x30
    8810:	4618      	mov	r0, r3
    8812:	f7ff fbdc 	bl	7fce <mbedtls_mpi_copy>
    8816:	bb08      	cbnz	r0, 885c <mbedtls_mpi_div_mpi+0x1e4>
        Q->s = A->s * B->s;
    8818:	9a01      	ldr	r2, [sp, #4]
    881a:	6833      	ldr	r3, [r6, #0]
    881c:	6812      	ldr	r2, [r2, #0]
    881e:	4353      	muls	r3, r2
    8820:	9a00      	ldr	r2, [sp, #0]
    8822:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    8824:	f1b8 0f00 	cmp.w	r8, #0
    8828:	f43f af5e 	beq.w	86e8 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    882c:	4651      	mov	r1, sl
    882e:	a806      	add	r0, sp, #24
    8830:	f7ff fd23 	bl	827a <mbedtls_mpi_shift_r>
    8834:	b990      	cbnz	r0, 885c <mbedtls_mpi_div_mpi+0x1e4>
        X.s = A->s;
    8836:	6833      	ldr	r3, [r6, #0]
    8838:	9306      	str	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    883a:	a906      	add	r1, sp, #24
    883c:	4640      	mov	r0, r8
    883e:	f7ff fbc6 	bl	7fce <mbedtls_mpi_copy>
    8842:	4601      	mov	r1, r0
    8844:	2800      	cmp	r0, #0
    8846:	f040 80b7 	bne.w	89b8 <mbedtls_mpi_div_mpi+0x340>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    884a:	4640      	mov	r0, r8
    884c:	f7ff fdc5 	bl	83da <mbedtls_mpi_cmp_int>
    8850:	2800      	cmp	r0, #0
    8852:	f47f af49 	bne.w	86e8 <mbedtls_mpi_div_mpi+0x70>
            R->s = 1;
    8856:	2301      	movs	r3, #1
    8858:	f8c8 3000 	str.w	r3, [r8]
    885c:	4604      	mov	r4, r0
    885e:	e743      	b.n	86e8 <mbedtls_mpi_div_mpi+0x70>
    else k = 0;
    8860:	46a2      	mov	sl, r4
    8862:	e799      	b.n	8798 <mbedtls_mpi_div_mpi+0x120>
        Z.p[n - t]++;
    8864:	990e      	ldr	r1, [sp, #56]	; 0x38
    8866:	9302      	str	r3, [sp, #8]
    8868:	58ca      	ldr	r2, [r1, r3]
    886a:	3201      	adds	r2, #1
    886c:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    886e:	a906      	add	r1, sp, #24
    8870:	463a      	mov	r2, r7
    8872:	4608      	mov	r0, r1
    8874:	f7ff feaf 	bl	85d6 <mbedtls_mpi_sub_mpi>
    8878:	9b02      	ldr	r3, [sp, #8]
    887a:	4604      	mov	r4, r0
    887c:	2800      	cmp	r0, #0
    887e:	d09c      	beq.n	87ba <mbedtls_mpi_div_mpi+0x142>
    8880:	e732      	b.n	86e8 <mbedtls_mpi_div_mpi+0x70>
        if( X.p[i] >= Y.p[t] )
    8882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8884:	f8dd 9020 	ldr.w	r9, [sp, #32]
    8888:	9a04      	ldr	r2, [sp, #16]
    888a:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
    888e:	589a      	ldr	r2, [r3, r2]
            Z.p[i - t - 1] = ~0;
    8890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        if( X.p[i] >= Y.p[t] )
    8892:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    8894:	eb03 0005 	add.w	r0, r3, r5
    8898:	9003      	str	r0, [sp, #12]
        if( X.p[i] >= Y.p[t] )
    889a:	d376      	bcc.n	898a <mbedtls_mpi_div_mpi+0x312>
            Z.p[i - t - 1] = ~0;
    889c:	f04f 32ff 	mov.w	r2, #4294967295
    88a0:	515a      	str	r2, [r3, r5]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    88a2:	2f01      	cmp	r7, #1
    88a4:	bf8a      	itet	hi
    88a6:	eb09 030b 	addhi.w	r3, r9, fp
    88aa:	2300      	movls	r3, #0
    88ac:	f853 3c04 	ldrhi.w	r3, [r3, #-4]
    88b0:	9315      	str	r3, [sp, #84]	; 0x54
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    88b2:	2f00      	cmp	r7, #0
    88b4:	d07c      	beq.n	89b0 <mbedtls_mpi_div_mpi+0x338>
    88b6:	f859 300b 	ldr.w	r3, [r9, fp]
    88ba:	9316      	str	r3, [sp, #88]	; 0x58
        T2.p[2] = X.p[i];
    88bc:	00bb      	lsls	r3, r7, #2
        Z.p[i - t - 1]++;
    88be:	9a03      	ldr	r2, [sp, #12]
        T2.p[2] = X.p[i];
    88c0:	f859 3003 	ldr.w	r3, [r9, r3]
    88c4:	9317      	str	r3, [sp, #92]	; 0x5c
        Z.p[i - t - 1]++;
    88c6:	9b03      	ldr	r3, [sp, #12]
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	3301      	adds	r3, #1
    88cc:	6013      	str	r3, [r2, #0]
            Z.p[i - t - 1]--;
    88ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    88d0:	5953      	ldr	r3, [r2, r5]
    88d2:	3b01      	subs	r3, #1
    88d4:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    88d6:	2100      	movs	r1, #0
    88d8:	a80f      	add	r0, sp, #60	; 0x3c
    88da:	f7ff fbd6 	bl	808a <mbedtls_mpi_lset>
    88de:	2800      	cmp	r0, #0
    88e0:	d1bc      	bne.n	885c <mbedtls_mpi_div_mpi+0x1e4>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    88e2:	9b02      	ldr	r3, [sp, #8]
    88e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    88e6:	2b00      	cmp	r3, #0
    88e8:	d064      	beq.n	89b4 <mbedtls_mpi_div_mpi+0x33c>
    88ea:	9b05      	ldr	r3, [sp, #20]
    88ec:	58d1      	ldr	r1, [r2, r3]
    88ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    88f0:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    88f2:	9904      	ldr	r1, [sp, #16]
    88f4:	5852      	ldr	r2, [r2, r1]
    88f6:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    88f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88fa:	a90f      	add	r1, sp, #60	; 0x3c
    88fc:	595a      	ldr	r2, [r3, r5]
    88fe:	4608      	mov	r0, r1
    8900:	f7ff fe8c 	bl	861c <mbedtls_mpi_mul_int>
    8904:	2800      	cmp	r0, #0
    8906:	d1a9      	bne.n	885c <mbedtls_mpi_div_mpi+0x1e4>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    8908:	a912      	add	r1, sp, #72	; 0x48
    890a:	a80f      	add	r0, sp, #60	; 0x3c
    890c:	f7ff fd24 	bl	8358 <mbedtls_mpi_cmp_mpi>
    8910:	2800      	cmp	r0, #0
    8912:	dcdc      	bgt.n	88ce <mbedtls_mpi_div_mpi+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    8914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8916:	a909      	add	r1, sp, #36	; 0x24
    8918:	595a      	ldr	r2, [r3, r5]
    891a:	a80f      	add	r0, sp, #60	; 0x3c
    891c:	f7ff fe7e 	bl	861c <mbedtls_mpi_mul_int>
    8920:	2800      	cmp	r0, #0
    8922:	d19b      	bne.n	885c <mbedtls_mpi_div_mpi+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    8924:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    8928:	4649      	mov	r1, r9
    892a:	a80f      	add	r0, sp, #60	; 0x3c
    892c:	f7ff fc53 	bl	81d6 <mbedtls_mpi_shift_l>
    8930:	2800      	cmp	r0, #0
    8932:	d193      	bne.n	885c <mbedtls_mpi_div_mpi+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    8934:	a906      	add	r1, sp, #24
    8936:	4608      	mov	r0, r1
    8938:	aa0f      	add	r2, sp, #60	; 0x3c
    893a:	f7ff fe4c 	bl	85d6 <mbedtls_mpi_sub_mpi>
    893e:	4601      	mov	r1, r0
    8940:	2800      	cmp	r0, #0
    8942:	d139      	bne.n	89b8 <mbedtls_mpi_div_mpi+0x340>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    8944:	a806      	add	r0, sp, #24
    8946:	f7ff fd48 	bl	83da <mbedtls_mpi_cmp_int>
    894a:	2800      	cmp	r0, #0
    894c:	da18      	bge.n	8980 <mbedtls_mpi_div_mpi+0x308>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    894e:	a909      	add	r1, sp, #36	; 0x24
    8950:	a80f      	add	r0, sp, #60	; 0x3c
    8952:	f7ff fb3c 	bl	7fce <mbedtls_mpi_copy>
    8956:	2800      	cmp	r0, #0
    8958:	d180      	bne.n	885c <mbedtls_mpi_div_mpi+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    895a:	4649      	mov	r1, r9
    895c:	a80f      	add	r0, sp, #60	; 0x3c
    895e:	f7ff fc3a 	bl	81d6 <mbedtls_mpi_shift_l>
    8962:	2800      	cmp	r0, #0
    8964:	f47f af7a 	bne.w	885c <mbedtls_mpi_div_mpi+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    8968:	a906      	add	r1, sp, #24
    896a:	aa0f      	add	r2, sp, #60	; 0x3c
    896c:	4608      	mov	r0, r1
    896e:	f7ff fe10 	bl	8592 <mbedtls_mpi_add_mpi>
    8972:	2800      	cmp	r0, #0
    8974:	f47f af72 	bne.w	885c <mbedtls_mpi_div_mpi+0x1e4>
            Z.p[i - t - 1]--;
    8978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    897a:	5953      	ldr	r3, [r2, r5]
    897c:	3b01      	subs	r3, #1
    897e:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
    8980:	3f01      	subs	r7, #1
    8982:	3d04      	subs	r5, #4
    8984:	f1ab 0b04 	sub.w	fp, fp, #4
    8988:	e73c      	b.n	8804 <mbedtls_mpi_div_mpi+0x18c>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    898a:	f859 000b 	ldr.w	r0, [r9, fp]
    if( 0 == d || u1 >= d )
    898e:	b152      	cbz	r2, 89a6 <mbedtls_mpi_div_mpi+0x32e>
    dividend  = (mbedtls_t_udbl) u1 << biL;
    8990:	2300      	movs	r3, #0
    quotient = dividend / d;
    8992:	f7f7 fbb5 	bl	100 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
    8996:	f04f 33ff 	mov.w	r3, #4294967295
    899a:	4283      	cmp	r3, r0
    899c:	f04f 0300 	mov.w	r3, #0
    89a0:	418b      	sbcs	r3, r1
    89a2:	4602      	mov	r2, r0
    89a4:	d201      	bcs.n	89aa <mbedtls_mpi_div_mpi+0x332>
        return ( ~0 );
    89a6:	f04f 32ff 	mov.w	r2, #4294967295
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    89aa:	9b03      	ldr	r3, [sp, #12]
    89ac:	601a      	str	r2, [r3, #0]
    89ae:	e778      	b.n	88a2 <mbedtls_mpi_div_mpi+0x22a>
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    89b0:	463b      	mov	r3, r7
    89b2:	e782      	b.n	88ba <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    89b4:	9902      	ldr	r1, [sp, #8]
    89b6:	e79a      	b.n	88ee <mbedtls_mpi_div_mpi+0x276>
    89b8:	460c      	mov	r4, r1
    89ba:	e695      	b.n	86e8 <mbedtls_mpi_div_mpi+0x70>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    89bc:	f06f 040b 	mvn.w	r4, #11
    89c0:	e687      	b.n	86d2 <mbedtls_mpi_div_mpi+0x5a>

000089c2 <mbedtls_mpi_mod_mpi>:
{
    89c2:	b570      	push	{r4, r5, r6, lr}
    89c4:	4604      	mov	r4, r0
    89c6:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    89c8:	4610      	mov	r0, r2
    89ca:	2100      	movs	r1, #0
{
    89cc:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    89ce:	f7ff fd04 	bl	83da <mbedtls_mpi_cmp_int>
    89d2:	2800      	cmp	r0, #0
    89d4:	db24      	blt.n	8a20 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    89d6:	462a      	mov	r2, r5
    89d8:	4633      	mov	r3, r6
    89da:	4621      	mov	r1, r4
    89dc:	2000      	movs	r0, #0
    89de:	f7ff fe4b 	bl	8678 <mbedtls_mpi_div_mpi>
    89e2:	4605      	mov	r5, r0
    89e4:	b138      	cbz	r0, 89f6 <mbedtls_mpi_mod_mpi+0x34>
}
    89e6:	4628      	mov	r0, r5
    89e8:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    89ea:	4632      	mov	r2, r6
    89ec:	4621      	mov	r1, r4
    89ee:	4620      	mov	r0, r4
    89f0:	f7ff fdcf 	bl	8592 <mbedtls_mpi_add_mpi>
    89f4:	b990      	cbnz	r0, 8a1c <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    89f6:	2100      	movs	r1, #0
    89f8:	4620      	mov	r0, r4
    89fa:	f7ff fcee 	bl	83da <mbedtls_mpi_cmp_int>
    89fe:	2800      	cmp	r0, #0
    8a00:	dbf3      	blt.n	89ea <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    8a02:	4631      	mov	r1, r6
    8a04:	4620      	mov	r0, r4
    8a06:	f7ff fca7 	bl	8358 <mbedtls_mpi_cmp_mpi>
    8a0a:	2800      	cmp	r0, #0
    8a0c:	dbeb      	blt.n	89e6 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    8a0e:	4632      	mov	r2, r6
    8a10:	4621      	mov	r1, r4
    8a12:	4620      	mov	r0, r4
    8a14:	f7ff fddf 	bl	85d6 <mbedtls_mpi_sub_mpi>
    8a18:	2800      	cmp	r0, #0
    8a1a:	d0f2      	beq.n	8a02 <mbedtls_mpi_mod_mpi+0x40>
    8a1c:	4605      	mov	r5, r0
    8a1e:	e7e2      	b.n	89e6 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    8a20:	f06f 0509 	mvn.w	r5, #9
    8a24:	e7df      	b.n	89e6 <mbedtls_mpi_mod_mpi+0x24>

00008a26 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    8a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a2a:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    8a2e:	4606      	mov	r6, r0
    8a30:	4688      	mov	r8, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    8a32:	4618      	mov	r0, r3
    8a34:	2100      	movs	r1, #0
{
    8a36:	9204      	str	r2, [sp, #16]
    8a38:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    8a3a:	f7ff fcce 	bl	83da <mbedtls_mpi_cmp_int>
    8a3e:	2800      	cmp	r0, #0
    8a40:	f340 8217 	ble.w	8e72 <mbedtls_mpi_exp_mod+0x44c>
    8a44:	68ab      	ldr	r3, [r5, #8]
    8a46:	681c      	ldr	r4, [r3, #0]
    8a48:	f014 0301 	ands.w	r3, r4, #1
    8a4c:	9307      	str	r3, [sp, #28]
    8a4e:	f000 8210 	beq.w	8e72 <mbedtls_mpi_exp_mod+0x44c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    8a52:	9804      	ldr	r0, [sp, #16]
    8a54:	2100      	movs	r1, #0
    8a56:	f7ff fcc0 	bl	83da <mbedtls_mpi_cmp_int>
    8a5a:	2800      	cmp	r0, #0
    8a5c:	f2c0 8209 	blt.w	8e72 <mbedtls_mpi_exp_mod+0x44c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    8a60:	9804      	ldr	r0, [sp, #16]
    8a62:	f7ff fb3f 	bl	80e4 <mbedtls_mpi_bitlen>
    8a66:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    8a6a:	f200 8202 	bhi.w	8e72 <mbedtls_mpi_exp_mod+0x44c>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    8a6e:	4628      	mov	r0, r5
    8a70:	f7ff fb38 	bl	80e4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    8a74:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    8a78:	f200 81fb 	bhi.w	8e72 <mbedtls_mpi_exp_mod+0x44c>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    8a7c:	1ca7      	adds	r7, r4, #2
    8a7e:	007f      	lsls	r7, r7, #1
    8a80:	f007 0708 	and.w	r7, r7, #8
    8a84:	4427      	add	r7, r4
    8a86:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
    8a88:	fb07 f304 	mul.w	r3, r7, r4
    8a8c:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
    8a90:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    8a92:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
    8a96:	d1f7      	bne.n	8a88 <mbedtls_mpi_exp_mod+0x62>
    X->s = 1;
    8a98:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    8a9a:	f44f 7240 	mov.w	r2, #768	; 0x300
    8a9e:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    8aa0:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    8aa4:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    8aa8:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    8aac:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    8ab0:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    8ab4:	9116      	str	r1, [sp, #88]	; 0x58
    8ab6:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    8ab8:	f7fe fac6 	bl	7048 <memset>

    i = mbedtls_mpi_bitlen( E );
    8abc:	9804      	ldr	r0, [sp, #16]
    8abe:	f7ff fb11 	bl	80e4 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8ac2:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    8ac6:	f080 80f8 	bcs.w	8cba <mbedtls_mpi_exp_mod+0x294>
    8aca:	28ef      	cmp	r0, #239	; 0xef
    8acc:	f200 80f7 	bhi.w	8cbe <mbedtls_mpi_exp_mod+0x298>
    8ad0:	284f      	cmp	r0, #79	; 0x4f
    8ad2:	f200 80f6 	bhi.w	8cc2 <mbedtls_mpi_exp_mod+0x29c>
    8ad6:	2817      	cmp	r0, #23
    8ad8:	9b07      	ldr	r3, [sp, #28]
    8ada:	bf88      	it	hi
    8adc:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    8ade:	6869      	ldr	r1, [r5, #4]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8ae0:	9303      	str	r3, [sp, #12]
    j = N->n + 1;
    8ae2:	f101 0901 	add.w	r9, r1, #1
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    8ae6:	4649      	mov	r1, r9
    8ae8:	4630      	mov	r0, r6
    8aea:	f7ff fa2f 	bl	7f4c <mbedtls_mpi_grow>
    8aee:	4604      	mov	r4, r0
    8af0:	2800      	cmp	r0, #0
    8af2:	f040 80be 	bne.w	8c72 <mbedtls_mpi_exp_mod+0x24c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    8af6:	4649      	mov	r1, r9
    8af8:	a81d      	add	r0, sp, #116	; 0x74
    8afa:	f7ff fa27 	bl	7f4c <mbedtls_mpi_grow>
    8afe:	4604      	mov	r4, r0
    8b00:	2800      	cmp	r0, #0
    8b02:	f040 80b6 	bne.w	8c72 <mbedtls_mpi_exp_mod+0x24c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    8b06:	ea4f 0149 	mov.w	r1, r9, lsl #1
    8b0a:	a80e      	add	r0, sp, #56	; 0x38
    8b0c:	f7ff fa1e 	bl	7f4c <mbedtls_mpi_grow>
    8b10:	4604      	mov	r4, r0
    8b12:	2800      	cmp	r0, #0
    8b14:	f040 80ad 	bne.w	8c72 <mbedtls_mpi_exp_mod+0x24c>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    8b18:	f8d8 3000 	ldr.w	r3, [r8]
    8b1c:	9306      	str	r3, [sp, #24]
    if( neg )
    8b1e:	3301      	adds	r3, #1
    8b20:	d10b      	bne.n	8b3a <mbedtls_mpi_exp_mod+0x114>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    8b22:	4641      	mov	r1, r8
    8b24:	a814      	add	r0, sp, #80	; 0x50
    8b26:	f7ff fa52 	bl	7fce <mbedtls_mpi_copy>
    8b2a:	4604      	mov	r4, r0
    8b2c:	2800      	cmp	r0, #0
    8b2e:	f040 80a0 	bne.w	8c72 <mbedtls_mpi_exp_mod+0x24c>
        Apos.s = 1;
    8b32:	2301      	movs	r3, #1
    8b34:	9314      	str	r3, [sp, #80]	; 0x50
        A = &Apos;
    8b36:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    8b3a:	9be4      	ldr	r3, [sp, #912]	; 0x390
    8b3c:	b11b      	cbz	r3, 8b46 <mbedtls_mpi_exp_mod+0x120>
    8b3e:	689b      	ldr	r3, [r3, #8]
    8b40:	2b00      	cmp	r3, #0
    8b42:	f040 80c0 	bne.w	8cc6 <mbedtls_mpi_exp_mod+0x2a0>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    8b46:	2101      	movs	r1, #1
    8b48:	a80b      	add	r0, sp, #44	; 0x2c
    8b4a:	f7ff fa9e 	bl	808a <mbedtls_mpi_lset>
    8b4e:	4604      	mov	r4, r0
    8b50:	2800      	cmp	r0, #0
    8b52:	f040 808e 	bne.w	8c72 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    8b56:	6869      	ldr	r1, [r5, #4]
    8b58:	a80b      	add	r0, sp, #44	; 0x2c
    8b5a:	0189      	lsls	r1, r1, #6
    8b5c:	f7ff fb3b 	bl	81d6 <mbedtls_mpi_shift_l>
    8b60:	4604      	mov	r4, r0
    8b62:	2800      	cmp	r0, #0
    8b64:	f040 8085 	bne.w	8c72 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    8b68:	a90b      	add	r1, sp, #44	; 0x2c
    8b6a:	462a      	mov	r2, r5
    8b6c:	4608      	mov	r0, r1
    8b6e:	f7ff ff28 	bl	89c2 <mbedtls_mpi_mod_mpi>
    8b72:	4604      	mov	r4, r0
    8b74:	2800      	cmp	r0, #0
    8b76:	d17c      	bne.n	8c72 <mbedtls_mpi_exp_mod+0x24c>

        if( _RR != NULL )
    8b78:	9be4      	ldr	r3, [sp, #912]	; 0x390
    8b7a:	b123      	cbz	r3, 8b86 <mbedtls_mpi_exp_mod+0x160>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    8b7c:	220c      	movs	r2, #12
    8b7e:	a90b      	add	r1, sp, #44	; 0x2c
    8b80:	4618      	mov	r0, r3
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    8b82:	f7fe fa56 	bl	7032 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    8b86:	4629      	mov	r1, r5
    8b88:	4640      	mov	r0, r8
    8b8a:	f7ff fbe5 	bl	8358 <mbedtls_mpi_cmp_mpi>
    8b8e:	2800      	cmp	r0, #0
    8b90:	f2c0 809d 	blt.w	8cce <mbedtls_mpi_exp_mod+0x2a8>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    8b94:	462a      	mov	r2, r5
    8b96:	4641      	mov	r1, r8
    8b98:	a81d      	add	r0, sp, #116	; 0x74
    8b9a:	f7ff ff12 	bl	89c2 <mbedtls_mpi_mod_mpi>
    8b9e:	4604      	mov	r4, r0
    8ba0:	2800      	cmp	r0, #0
    8ba2:	d166      	bne.n	8c72 <mbedtls_mpi_exp_mod+0x24c>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    8ba4:	6869      	ldr	r1, [r5, #4]
    8ba6:	a81d      	add	r0, sp, #116	; 0x74
    8ba8:	3101      	adds	r1, #1
    8baa:	f7ff f9cf 	bl	7f4c <mbedtls_mpi_grow>
    8bae:	4604      	mov	r4, r0
    8bb0:	2800      	cmp	r0, #0
    8bb2:	d15e      	bne.n	8c72 <mbedtls_mpi_exp_mod+0x24c>
    *mm = ~x + 1;
    8bb4:	f1c7 0b00 	rsb	fp, r7, #0
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    8bb8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    8bbc:	465b      	mov	r3, fp
    8bbe:	462a      	mov	r2, r5
    8bc0:	a90b      	add	r1, sp, #44	; 0x2c
    8bc2:	a81d      	add	r0, sp, #116	; 0x74
    8bc4:	f8cd 9000 	str.w	r9, [sp]
    8bc8:	f7ff f909 	bl	7dde <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    8bcc:	a90b      	add	r1, sp, #44	; 0x2c
    8bce:	4630      	mov	r0, r6
    8bd0:	f7ff f9fd 	bl	7fce <mbedtls_mpi_copy>
    8bd4:	4604      	mov	r4, r0
    8bd6:	2800      	cmp	r0, #0
    8bd8:	d14b      	bne.n	8c72 <mbedtls_mpi_exp_mod+0x24c>
    mbedtls_mpi_uint z = 1;
    8bda:	ab0a      	add	r3, sp, #40	; 0x28
    8bdc:	2701      	movs	r7, #1
    U.p = &z;
    8bde:	9319      	str	r3, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    8be0:	f8cd 9000 	str.w	r9, [sp]
    8be4:	465b      	mov	r3, fp
    8be6:	462a      	mov	r2, r5
    8be8:	a917      	add	r1, sp, #92	; 0x5c
    8bea:	4630      	mov	r0, r6
    U.n = U.s = (int) z;
    8bec:	e9cd 7717 	strd	r7, r7, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    8bf0:	970a      	str	r7, [sp, #40]	; 0x28
    mpi_montmul( A, &U, N, mm, T );
    8bf2:	f7ff f8f4 	bl	7dde <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    8bf6:	9b03      	ldr	r3, [sp, #12]
    8bf8:	42bb      	cmp	r3, r7
    8bfa:	d16d      	bne.n	8cd8 <mbedtls_mpi_exp_mod+0x2b2>

            mpi_montmul( &W[i], &W[1], N, mm, &T );
        }
    }

    nblimbs = E->n;
    8bfc:	9b04      	ldr	r3, [sp, #16]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    8bfe:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
    8c02:	f8d3 9004 	ldr.w	r9, [r3, #4]
    bufsize = 0;
    8c06:	f8cd 8014 	str.w	r8, [sp, #20]
    nbits   = 0;
    8c0a:	4647      	mov	r7, r8
    wbits   = 0;
    8c0c:	46c2      	mov	sl, r8

    while( 1 )
    {
        if( bufsize == 0 )
    8c0e:	9b05      	ldr	r3, [sp, #20]
    8c10:	2b00      	cmp	r3, #0
    8c12:	f040 80b3 	bne.w	8d7c <mbedtls_mpi_exp_mod+0x356>
        {
            if( nblimbs == 0 )
    8c16:	f1b9 0f00 	cmp.w	r9, #0
    8c1a:	f040 80ab 	bne.w	8d74 <mbedtls_mpi_exp_mod+0x34e>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    8c1e:	9a03      	ldr	r2, [sp, #12]
    8c20:	2301      	movs	r3, #1
    8c22:	4093      	lsls	r3, r2
    8c24:	9305      	str	r3, [sp, #20]
    8c26:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    for( i = 0; i < nbits; i++ )
    8c2a:	45b9      	cmp	r9, r7
    8c2c:	f040 80ff 	bne.w	8e2e <mbedtls_mpi_exp_mod+0x408>
    mbedtls_mpi_uint z = 1;
    8c30:	2301      	movs	r3, #1
    8c32:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    8c34:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    8c38:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    8c3a:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    8c3c:	465b      	mov	r3, fp
    8c3e:	f8cd 8000 	str.w	r8, [sp]
    8c42:	462a      	mov	r2, r5
    8c44:	a917      	add	r1, sp, #92	; 0x5c
    8c46:	4630      	mov	r0, r6
    8c48:	f7ff f8c9 	bl	7dde <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    8c4c:	9b06      	ldr	r3, [sp, #24]
    8c4e:	3301      	adds	r3, #1
    8c50:	d10f      	bne.n	8c72 <mbedtls_mpi_exp_mod+0x24c>
    8c52:	9b04      	ldr	r3, [sp, #16]
    8c54:	685b      	ldr	r3, [r3, #4]
    8c56:	b163      	cbz	r3, 8c72 <mbedtls_mpi_exp_mod+0x24c>
    8c58:	9b04      	ldr	r3, [sp, #16]
    8c5a:	689b      	ldr	r3, [r3, #8]
    8c5c:	681b      	ldr	r3, [r3, #0]
    8c5e:	07db      	lsls	r3, r3, #31
    8c60:	d507      	bpl.n	8c72 <mbedtls_mpi_exp_mod+0x24c>
    {
        X->s = -1;
    8c62:	9b06      	ldr	r3, [sp, #24]
    8c64:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    8c66:	4632      	mov	r2, r6
    8c68:	4629      	mov	r1, r5
    8c6a:	4630      	mov	r0, r6
    8c6c:	f7ff fc91 	bl	8592 <mbedtls_mpi_add_mpi>
    8c70:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8c72:	9b03      	ldr	r3, [sp, #12]
    8c74:	9a03      	ldr	r2, [sp, #12]
    8c76:	1e5d      	subs	r5, r3, #1
    8c78:	2301      	movs	r3, #1
    8c7a:	fa03 f505 	lsl.w	r5, r3, r5
    8c7e:	fa03 f602 	lsl.w	r6, r3, r2
        mbedtls_mpi_free( &W[i] );
    8c82:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8c84:	42ae      	cmp	r6, r5
    8c86:	f200 80ed 	bhi.w	8e64 <mbedtls_mpi_exp_mod+0x43e>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    8c8a:	a81d      	add	r0, sp, #116	; 0x74
    8c8c:	f7ff f94c 	bl	7f28 <mbedtls_mpi_free>
    8c90:	a80e      	add	r0, sp, #56	; 0x38
    8c92:	f7ff f949 	bl	7f28 <mbedtls_mpi_free>
    8c96:	a814      	add	r0, sp, #80	; 0x50
    8c98:	f7ff f946 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    8c9c:	a811      	add	r0, sp, #68	; 0x44
    8c9e:	f7ff f943 	bl	7f28 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    8ca2:	9be4      	ldr	r3, [sp, #912]	; 0x390
    8ca4:	b10b      	cbz	r3, 8caa <mbedtls_mpi_exp_mod+0x284>
    8ca6:	689b      	ldr	r3, [r3, #8]
    8ca8:	b913      	cbnz	r3, 8cb0 <mbedtls_mpi_exp_mod+0x28a>
        mbedtls_mpi_free( &RR );
    8caa:	a80b      	add	r0, sp, #44	; 0x2c
    8cac:	f7ff f93c 	bl	7f28 <mbedtls_mpi_free>

    return( ret );
}
    8cb0:	4620      	mov	r0, r4
    8cb2:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    8cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8cba:	2306      	movs	r3, #6
    8cbc:	e70f      	b.n	8ade <mbedtls_mpi_exp_mod+0xb8>
    8cbe:	2305      	movs	r3, #5
    8cc0:	e70d      	b.n	8ade <mbedtls_mpi_exp_mod+0xb8>
    8cc2:	2304      	movs	r3, #4
    8cc4:	e70b      	b.n	8ade <mbedtls_mpi_exp_mod+0xb8>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    8cc6:	99e4      	ldr	r1, [sp, #912]	; 0x390
    8cc8:	220c      	movs	r2, #12
    8cca:	a80b      	add	r0, sp, #44	; 0x2c
    8ccc:	e759      	b.n	8b82 <mbedtls_mpi_exp_mod+0x15c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    8cce:	4641      	mov	r1, r8
    8cd0:	a81d      	add	r0, sp, #116	; 0x74
    8cd2:	f7ff f97c 	bl	7fce <mbedtls_mpi_copy>
    8cd6:	e76a      	b.n	8bae <mbedtls_mpi_exp_mod+0x188>
        j =  one << ( wsize - 1 );
    8cd8:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    8cda:	6869      	ldr	r1, [r5, #4]
        j =  one << ( wsize - 1 );
    8cdc:	f103 38ff 	add.w	r8, r3, #4294967295
    8ce0:	fa07 f308 	lsl.w	r3, r7, r8
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    8ce4:	270c      	movs	r7, #12
        j =  one << ( wsize - 1 );
    8ce6:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    8ce8:	fa07 f708 	lsl.w	r7, r7, r8
    8cec:	ab1a      	add	r3, sp, #104	; 0x68
    8cee:	441f      	add	r7, r3
    8cf0:	3101      	adds	r1, #1
    8cf2:	4638      	mov	r0, r7
    8cf4:	f7ff f92a 	bl	7f4c <mbedtls_mpi_grow>
    8cf8:	2800      	cmp	r0, #0
    8cfa:	d1b9      	bne.n	8c70 <mbedtls_mpi_exp_mod+0x24a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    8cfc:	a91d      	add	r1, sp, #116	; 0x74
    8cfe:	4638      	mov	r0, r7
    8d00:	f7ff f965 	bl	7fce <mbedtls_mpi_copy>
    8d04:	2800      	cmp	r0, #0
    8d06:	d1b3      	bne.n	8c70 <mbedtls_mpi_exp_mod+0x24a>
        for( i = 0; i < wsize - 1; i++ )
    8d08:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8d0a:	f8cd 9000 	str.w	r9, [sp]
    8d0e:	465b      	mov	r3, fp
    8d10:	462a      	mov	r2, r5
    8d12:	4639      	mov	r1, r7
    8d14:	4638      	mov	r0, r7
        for( i = 0; i < wsize - 1; i++ )
    8d16:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8d1a:	f7ff f860 	bl	7dde <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    8d1e:	45d0      	cmp	r8, sl
    8d20:	d8f3      	bhi.n	8d0a <mbedtls_mpi_exp_mod+0x2e4>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8d22:	9b05      	ldr	r3, [sp, #20]
    8d24:	f103 0801 	add.w	r8, r3, #1
    8d28:	9b03      	ldr	r3, [sp, #12]
    8d2a:	f04f 0a01 	mov.w	sl, #1
    8d2e:	fa0a fa03 	lsl.w	sl, sl, r3
    8d32:	45c2      	cmp	sl, r8
    8d34:	f67f af62 	bls.w	8bfc <mbedtls_mpi_exp_mod+0x1d6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    8d38:	6869      	ldr	r1, [r5, #4]
    8d3a:	f107 090c 	add.w	r9, r7, #12
    8d3e:	3101      	adds	r1, #1
    8d40:	4648      	mov	r0, r9
    8d42:	f7ff f903 	bl	7f4c <mbedtls_mpi_grow>
    8d46:	2800      	cmp	r0, #0
    8d48:	d192      	bne.n	8c70 <mbedtls_mpi_exp_mod+0x24a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    8d4a:	4639      	mov	r1, r7
    8d4c:	4648      	mov	r0, r9
    8d4e:	f7ff f93e 	bl	7fce <mbedtls_mpi_copy>
    8d52:	2800      	cmp	r0, #0
    8d54:	d18c      	bne.n	8c70 <mbedtls_mpi_exp_mod+0x24a>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    8d56:	ab0e      	add	r3, sp, #56	; 0x38
    8d58:	9300      	str	r3, [sp, #0]
    8d5a:	462a      	mov	r2, r5
    8d5c:	465b      	mov	r3, fp
    8d5e:	a91d      	add	r1, sp, #116	; 0x74
    8d60:	4648      	mov	r0, r9
    8d62:	f7ff f83c 	bl	7dde <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8d66:	f108 0801 	add.w	r8, r8, #1
    8d6a:	464f      	mov	r7, r9
    8d6c:	e7e1      	b.n	8d32 <mbedtls_mpi_exp_mod+0x30c>
        state = 2;
    8d6e:	f04f 0802 	mov.w	r8, #2
    8d72:	e74c      	b.n	8c0e <mbedtls_mpi_exp_mod+0x1e8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    8d74:	2320      	movs	r3, #32
            nblimbs--;
    8d76:	f109 39ff 	add.w	r9, r9, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    8d7a:	9305      	str	r3, [sp, #20]
        bufsize--;
    8d7c:	9b05      	ldr	r3, [sp, #20]
    8d7e:	3b01      	subs	r3, #1
    8d80:	9305      	str	r3, [sp, #20]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    8d82:	9b04      	ldr	r3, [sp, #16]
    8d84:	9a05      	ldr	r2, [sp, #20]
    8d86:	689b      	ldr	r3, [r3, #8]
    8d88:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    8d8c:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    8d8e:	f013 0301 	ands.w	r3, r3, #1
    8d92:	d10f      	bne.n	8db4 <mbedtls_mpi_exp_mod+0x38e>
    8d94:	f1b8 0f00 	cmp.w	r8, #0
    8d98:	f43f af39 	beq.w	8c0e <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    8d9c:	f1b8 0f01 	cmp.w	r8, #1
    8da0:	d108      	bne.n	8db4 <mbedtls_mpi_exp_mod+0x38e>
            mpi_montmul( X, X, N, mm, &T );
    8da2:	ab0e      	add	r3, sp, #56	; 0x38
    8da4:	9300      	str	r3, [sp, #0]
    8da6:	462a      	mov	r2, r5
    8da8:	465b      	mov	r3, fp
    8daa:	4631      	mov	r1, r6
    8dac:	4630      	mov	r0, r6
    8dae:	f7ff f816 	bl	7dde <mpi_montmul>
            continue;
    8db2:	e72c      	b.n	8c0e <mbedtls_mpi_exp_mod+0x1e8>
        wbits |= ( ei << ( wsize - nbits ) );
    8db4:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    8db6:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
    8db8:	1bd2      	subs	r2, r2, r7
    8dba:	4093      	lsls	r3, r2
    8dbc:	ea4a 0a03 	orr.w	sl, sl, r3
        if( nbits == wsize )
    8dc0:	9b03      	ldr	r3, [sp, #12]
    8dc2:	42bb      	cmp	r3, r7
    8dc4:	d1d3      	bne.n	8d6e <mbedtls_mpi_exp_mod+0x348>
            for( i = 0; i < wsize; i++ )
    8dc6:	f04f 0800 	mov.w	r8, #0
                mpi_montmul( X, X, N, mm, &T );
    8dca:	ab0e      	add	r3, sp, #56	; 0x38
    8dcc:	9300      	str	r3, [sp, #0]
    8dce:	462a      	mov	r2, r5
    8dd0:	465b      	mov	r3, fp
    8dd2:	4631      	mov	r1, r6
    8dd4:	4630      	mov	r0, r6
            for( i = 0; i < wsize; i++ )
    8dd6:	f108 0801 	add.w	r8, r8, #1
                mpi_montmul( X, X, N, mm, &T );
    8dda:	f7ff f800 	bl	7dde <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    8dde:	4547      	cmp	r7, r8
    8de0:	d8f3      	bhi.n	8dca <mbedtls_mpi_exp_mod+0x3a4>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    8de2:	2301      	movs	r3, #1
    8de4:	40bb      	lsls	r3, r7
    8de6:	9308      	str	r3, [sp, #32]
    for( size_t i = 0; i < T_size; i++ )
    8de8:	a91a      	add	r1, sp, #104	; 0x68
    8dea:	f04f 0800 	mov.w	r8, #0
    const size_t diff = x ^ y;
    8dee:	ea8a 0308 	eor.w	r3, sl, r8
    const size_t diff_msb = ( diff | (size_t) -diff );
    8df2:	425a      	negs	r2, r3
    8df4:	431a      	orrs	r2, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8df6:	43d2      	mvns	r2, r2
    8df8:	0fd2      	lsrs	r2, r2, #31
    8dfa:	a811      	add	r0, sp, #68	; 0x44
    8dfc:	9109      	str	r1, [sp, #36]	; 0x24
    8dfe:	f7ff f918 	bl	8032 <mbedtls_mpi_safe_cond_assign>
    8e02:	4607      	mov	r7, r0
    8e04:	bb60      	cbnz	r0, 8e60 <mbedtls_mpi_exp_mod+0x43a>
    for( size_t i = 0; i < T_size; i++ )
    8e06:	9b08      	ldr	r3, [sp, #32]
    8e08:	9909      	ldr	r1, [sp, #36]	; 0x24
    8e0a:	f108 0801 	add.w	r8, r8, #1
    8e0e:	4543      	cmp	r3, r8
    8e10:	f101 010c 	add.w	r1, r1, #12
    8e14:	d1eb      	bne.n	8dee <mbedtls_mpi_exp_mod+0x3c8>
            mpi_montmul( X, &WW, N, mm, &T );
    8e16:	ab0e      	add	r3, sp, #56	; 0x38
    8e18:	9300      	str	r3, [sp, #0]
    8e1a:	462a      	mov	r2, r5
    8e1c:	465b      	mov	r3, fp
    8e1e:	a911      	add	r1, sp, #68	; 0x44
    8e20:	4630      	mov	r0, r6
    8e22:	f7fe ffdc 	bl	7dde <mpi_montmul>
            nbits = 0;
    8e26:	46ba      	mov	sl, r7
            state--;
    8e28:	f8dd 801c 	ldr.w	r8, [sp, #28]
    8e2c:	e6ef      	b.n	8c0e <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    8e2e:	465b      	mov	r3, fp
    8e30:	f8cd 8000 	str.w	r8, [sp]
    8e34:	462a      	mov	r2, r5
    8e36:	4631      	mov	r1, r6
    8e38:	4630      	mov	r0, r6
    8e3a:	f7fe ffd0 	bl	7dde <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    8e3e:	9b05      	ldr	r3, [sp, #20]
        wbits <<= 1;
    8e40:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    8e44:	ea13 0f0a 	tst.w	r3, sl
    8e48:	d007      	beq.n	8e5a <mbedtls_mpi_exp_mod+0x434>
            mpi_montmul( X, &W[1], N, mm, &T );
    8e4a:	f8cd 8000 	str.w	r8, [sp]
    8e4e:	465b      	mov	r3, fp
    8e50:	462a      	mov	r2, r5
    8e52:	a91d      	add	r1, sp, #116	; 0x74
    8e54:	4630      	mov	r0, r6
    8e56:	f7fe ffc2 	bl	7dde <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    8e5a:	f109 0901 	add.w	r9, r9, #1
    8e5e:	e6e4      	b.n	8c2a <mbedtls_mpi_exp_mod+0x204>
    8e60:	4604      	mov	r4, r0
    8e62:	e706      	b.n	8c72 <mbedtls_mpi_exp_mod+0x24c>
        mbedtls_mpi_free( &W[i] );
    8e64:	ab1a      	add	r3, sp, #104	; 0x68
    8e66:	fb07 3005 	mla	r0, r7, r5, r3
    8e6a:	f7ff f85d 	bl	7f28 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8e6e:	3501      	adds	r5, #1
    8e70:	e708      	b.n	8c84 <mbedtls_mpi_exp_mod+0x25e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8e72:	f06f 0403 	mvn.w	r4, #3
    8e76:	e71b      	b.n	8cb0 <mbedtls_mpi_exp_mod+0x28a>

00008e78 <platform_calloc_uninit>:
}
    8e78:	2000      	movs	r0, #0
    8e7a:	4770      	bx	lr

00008e7c <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    8e7c:	4770      	bx	lr

00008e7e <platform_free_uninit>:
    8e7e:	4770      	bx	lr

00008e80 <mbedtls_rsa_import>:
{
    8e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e84:	4605      	mov	r5, r0
    8e86:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    8e8a:	4691      	mov	r9, r2
    8e8c:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8e8e:	460c      	mov	r4, r1
    8e90:	b979      	cbnz	r1, 8eb2 <mbedtls_rsa_import+0x32>
    8e92:	f1b9 0f00 	cmp.w	r9, #0
    8e96:	d115      	bne.n	8ec4 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8e98:	f1b8 0f00 	cmp.w	r8, #0
    8e9c:	d11a      	bne.n	8ed4 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8e9e:	bb0f      	cbnz	r7, 8ee4 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8ea0:	bb46      	cbnz	r6, 8ef4 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    8ea2:	b37c      	cbz	r4, 8f04 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    8ea4:	f105 0008 	add.w	r0, r5, #8
    8ea8:	f7ff f938 	bl	811c <mbedtls_mpi_size>
    8eac:	6068      	str	r0, [r5, #4]
    return( 0 );
    8eae:	2000      	movs	r0, #0
    8eb0:	e006      	b.n	8ec0 <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8eb2:	3008      	adds	r0, #8
    8eb4:	f7ff f88b 	bl	7fce <mbedtls_mpi_copy>
    8eb8:	2800      	cmp	r0, #0
    8eba:	d0ea      	beq.n	8e92 <mbedtls_rsa_import+0x12>
    8ebc:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    8ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8ec4:	4649      	mov	r1, r9
    8ec6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    8eca:	f7ff f880 	bl	7fce <mbedtls_mpi_copy>
    8ece:	2800      	cmp	r0, #0
    8ed0:	d0e2      	beq.n	8e98 <mbedtls_rsa_import+0x18>
    8ed2:	e7f3      	b.n	8ebc <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8ed4:	4641      	mov	r1, r8
    8ed6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    8eda:	f7ff f878 	bl	7fce <mbedtls_mpi_copy>
    8ede:	2800      	cmp	r0, #0
    8ee0:	d0dd      	beq.n	8e9e <mbedtls_rsa_import+0x1e>
    8ee2:	e7eb      	b.n	8ebc <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8ee4:	4639      	mov	r1, r7
    8ee6:	f105 0020 	add.w	r0, r5, #32
    8eea:	f7ff f870 	bl	7fce <mbedtls_mpi_copy>
    8eee:	2800      	cmp	r0, #0
    8ef0:	d0d6      	beq.n	8ea0 <mbedtls_rsa_import+0x20>
    8ef2:	e7e3      	b.n	8ebc <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    8ef4:	4631      	mov	r1, r6
    8ef6:	f105 0014 	add.w	r0, r5, #20
    8efa:	f7ff f868 	bl	7fce <mbedtls_mpi_copy>
    8efe:	2800      	cmp	r0, #0
    8f00:	d0cf      	beq.n	8ea2 <mbedtls_rsa_import+0x22>
    8f02:	e7db      	b.n	8ebc <mbedtls_rsa_import+0x3c>
    return( 0 );
    8f04:	4620      	mov	r0, r4
    8f06:	e7db      	b.n	8ec0 <mbedtls_rsa_import+0x40>

00008f08 <mbedtls_rsa_init>:
{
    8f08:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8f0a:	22ac      	movs	r2, #172	; 0xac
    8f0c:	2100      	movs	r1, #0
{
    8f0e:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8f10:	f7fe f89a 	bl	7048 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    8f14:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    8f16:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    8f1a:	bd10      	pop	{r4, pc}

00008f1c <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    8f1c:	b510      	push	{r4, lr}
    if( ctx == NULL )
    8f1e:	4604      	mov	r4, r0
    8f20:	b3a0      	cbz	r0, 8f8c <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    8f22:	308c      	adds	r0, #140	; 0x8c
    8f24:	f7ff f800 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    8f28:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8f2c:	f7fe fffc 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    8f30:	f104 0068 	add.w	r0, r4, #104	; 0x68
    8f34:	f7fe fff8 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    8f38:	f104 0020 	add.w	r0, r4, #32
    8f3c:	f7fe fff4 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    8f40:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8f44:	f7fe fff0 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    8f48:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8f4c:	f7fe ffec 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    8f50:	f104 0014 	add.w	r0, r4, #20
    8f54:	f7fe ffe8 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    8f58:	f104 0008 	add.w	r0, r4, #8
    8f5c:	f7fe ffe4 	bl	7f28 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    8f60:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8f64:	f7fe ffe0 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    8f68:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8f6c:	f7fe ffdc 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    8f70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8f74:	f7fe ffd8 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    8f78:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8f7c:	f7fe ffd4 	bl	7f28 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    8f80:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    8f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    8f88:	f7fe bfce 	b.w	7f28 <mbedtls_mpi_free>
}
    8f8c:	bd10      	pop	{r4, pc}

00008f8e <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    8f8e:	226c      	movs	r2, #108	; 0x6c
    8f90:	2100      	movs	r1, #0
    8f92:	f7fe b859 	b.w	7048 <memset>

00008f96 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8f96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f9a:	4605      	mov	r5, r0
    8f9c:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    8f9e:	4614      	mov	r4, r2
    8fa0:	b912      	cbnz	r2, 8fa8 <mbedtls_sha256_update+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    8fa2:	2000      	movs	r0, #0
}
    8fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    8fa8:	6803      	ldr	r3, [r0, #0]
    8faa:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    8fae:	18d3      	adds	r3, r2, r3
    8fb0:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    8fb2:	bf22      	ittt	cs
    8fb4:	6843      	ldrcs	r3, [r0, #4]
    8fb6:	3301      	addcs	r3, #1
    8fb8:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    8fba:	b1a7      	cbz	r7, 8fe6 <mbedtls_sha256_update+0x50>
    fill = 64 - left;
    8fbc:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    8fc0:	454a      	cmp	r2, r9
    8fc2:	d310      	bcc.n	8fe6 <mbedtls_sha256_update+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8fc4:	f100 0828 	add.w	r8, r0, #40	; 0x28
    8fc8:	464a      	mov	r2, r9
    8fca:	eb08 0007 	add.w	r0, r8, r7
    8fce:	f7fe f830 	bl	7032 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8fd2:	4641      	mov	r1, r8
    8fd4:	4628      	mov	r0, r5
    8fd6:	f7fb fa79 	bl	44cc <mbedtls_internal_sha256_process>
    8fda:	2800      	cmp	r0, #0
    8fdc:	d1e2      	bne.n	8fa4 <mbedtls_sha256_update+0xe>
        ilen  -= fill;
    8fde:	443c      	add	r4, r7
        input += fill;
    8fe0:	444e      	add	r6, r9
        ilen  -= fill;
    8fe2:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    8fe4:	4607      	mov	r7, r0
    8fe6:	4426      	add	r6, r4
    8fe8:	e005      	b.n	8ff6 <mbedtls_sha256_update+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    8fea:	4628      	mov	r0, r5
    8fec:	f7fb fa6e 	bl	44cc <mbedtls_internal_sha256_process>
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d1d7      	bne.n	8fa4 <mbedtls_sha256_update+0xe>
        ilen  -= 64;
    8ff4:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    8ff6:	2c3f      	cmp	r4, #63	; 0x3f
    8ff8:	eba6 0104 	sub.w	r1, r6, r4
    8ffc:	d8f5      	bhi.n	8fea <mbedtls_sha256_update+0x54>
    if( ilen > 0 )
    8ffe:	2c00      	cmp	r4, #0
    9000:	d0cf      	beq.n	8fa2 <mbedtls_sha256_update+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    9002:	f105 0028 	add.w	r0, r5, #40	; 0x28
    9006:	4622      	mov	r2, r4
    9008:	4438      	add	r0, r7
    900a:	f7fe f812 	bl	7032 <memcpy>
    900e:	e7c8      	b.n	8fa2 <mbedtls_sha256_update+0xc>

00009010 <mbedtls_sha256_finish>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    9010:	6803      	ldr	r3, [r0, #0]
    9012:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    9016:	1c5a      	adds	r2, r3, #1
    9018:	4403      	add	r3, r0
{
    901a:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    901c:	2a38      	cmp	r2, #56	; 0x38
{
    901e:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    9020:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    9024:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    9028:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    902a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    902e:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    9032:	d861      	bhi.n	90f8 <mbedtls_sha256_finish+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
    9034:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    9038:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    903a:	f7fe f805 	bl	7048 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    903e:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    9042:	0f5a      	lsrs	r2, r3, #29
    9044:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    9048:	00db      	lsls	r3, r3, #3
    904a:	ba12      	rev	r2, r2
    904c:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    904e:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    9050:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    9052:	4631      	mov	r1, r6
    9054:	4620      	mov	r0, r4
    9056:	f7fb fa39 	bl	44cc <mbedtls_internal_sha256_process>
    905a:	2800      	cmp	r0, #0
    905c:	d14b      	bne.n	90f6 <mbedtls_sha256_finish+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    905e:	7ae3      	ldrb	r3, [r4, #11]
    9060:	702b      	strb	r3, [r5, #0]
    9062:	8963      	ldrh	r3, [r4, #10]
    9064:	706b      	strb	r3, [r5, #1]
    9066:	68a3      	ldr	r3, [r4, #8]
    9068:	0a1b      	lsrs	r3, r3, #8
    906a:	70ab      	strb	r3, [r5, #2]
    906c:	68a3      	ldr	r3, [r4, #8]
    906e:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    9070:	7be3      	ldrb	r3, [r4, #15]
    9072:	712b      	strb	r3, [r5, #4]
    9074:	89e3      	ldrh	r3, [r4, #14]
    9076:	716b      	strb	r3, [r5, #5]
    9078:	68e3      	ldr	r3, [r4, #12]
    907a:	0a1b      	lsrs	r3, r3, #8
    907c:	71ab      	strb	r3, [r5, #6]
    907e:	68e3      	ldr	r3, [r4, #12]
    9080:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    9082:	7ce3      	ldrb	r3, [r4, #19]
    9084:	722b      	strb	r3, [r5, #8]
    9086:	8a63      	ldrh	r3, [r4, #18]
    9088:	726b      	strb	r3, [r5, #9]
    908a:	6923      	ldr	r3, [r4, #16]
    908c:	0a1b      	lsrs	r3, r3, #8
    908e:	72ab      	strb	r3, [r5, #10]
    9090:	6923      	ldr	r3, [r4, #16]
    9092:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    9094:	7de3      	ldrb	r3, [r4, #23]
    9096:	732b      	strb	r3, [r5, #12]
    9098:	8ae3      	ldrh	r3, [r4, #22]
    909a:	736b      	strb	r3, [r5, #13]
    909c:	6963      	ldr	r3, [r4, #20]
    909e:	0a1b      	lsrs	r3, r3, #8
    90a0:	73ab      	strb	r3, [r5, #14]
    90a2:	6963      	ldr	r3, [r4, #20]
    90a4:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    90a6:	7ee3      	ldrb	r3, [r4, #27]
    90a8:	742b      	strb	r3, [r5, #16]
    90aa:	8b63      	ldrh	r3, [r4, #26]
    90ac:	746b      	strb	r3, [r5, #17]
    90ae:	69a3      	ldr	r3, [r4, #24]
    90b0:	0a1b      	lsrs	r3, r3, #8
    90b2:	74ab      	strb	r3, [r5, #18]
    90b4:	69a3      	ldr	r3, [r4, #24]
    90b6:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    90b8:	7fe3      	ldrb	r3, [r4, #31]
    90ba:	752b      	strb	r3, [r5, #20]
    90bc:	8be3      	ldrh	r3, [r4, #30]
    90be:	756b      	strb	r3, [r5, #21]
    90c0:	69e3      	ldr	r3, [r4, #28]
    90c2:	0a1b      	lsrs	r3, r3, #8
    90c4:	75ab      	strb	r3, [r5, #22]
    90c6:	69e3      	ldr	r3, [r4, #28]
    90c8:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    90ca:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    90ce:	762b      	strb	r3, [r5, #24]
    90d0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    90d2:	766b      	strb	r3, [r5, #25]
    90d4:	6a23      	ldr	r3, [r4, #32]
    90d6:	0a1b      	lsrs	r3, r3, #8
    90d8:	76ab      	strb	r3, [r5, #26]
    90da:	6a23      	ldr	r3, [r4, #32]
    90dc:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    90de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    90e0:	b94b      	cbnz	r3, 90f6 <mbedtls_sha256_finish+0xe6>
#endif
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    90e2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    90e6:	772b      	strb	r3, [r5, #28]
    90e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    90ea:	776b      	strb	r3, [r5, #29]
    90ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    90ee:	0a1b      	lsrs	r3, r3, #8
    90f0:	77ab      	strb	r3, [r5, #30]
    90f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    90f4:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    90f6:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    90f8:	2100      	movs	r1, #0
    90fa:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    90fe:	f7fd ffa3 	bl	7048 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    9102:	4631      	mov	r1, r6
    9104:	4620      	mov	r0, r4
    9106:	f7fb f9e1 	bl	44cc <mbedtls_internal_sha256_process>
    910a:	2800      	cmp	r0, #0
    910c:	d1f3      	bne.n	90f6 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer, 0, 56 );
    910e:	4601      	mov	r1, r0
    9110:	2238      	movs	r2, #56	; 0x38
    9112:	4630      	mov	r0, r6
    9114:	e791      	b.n	903a <mbedtls_sha256_finish+0x2a>

00009116 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9116:	4700      	bx	r0

00009118 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9118:	f000 babe 	b.w	9698 <z_impl_k_busy_wait>

0000911c <clock_stop>:
{
    911c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    911e:	4604      	mov	r4, r0
    9120:	b118      	cbz	r0, 912a <clock_stop+0xe>
    9122:	2801      	cmp	r0, #1
    9124:	d024      	beq.n	9170 <clock_stop+0x54>
}
    9126:	b003      	add	sp, #12
    9128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    912a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    912e:	2202      	movs	r2, #2
    9130:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9134:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    9138:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    913c:	2201      	movs	r2, #1
    913e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9140:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9142:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9144:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9148:	bf14      	ite	ne
    914a:	2500      	movne	r5, #0
    914c:	f10d 0507 	addeq.w	r5, sp, #7
    9150:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9154:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    9158:	b1ac      	cbz	r4, 9186 <clock_stop+0x6a>
    915a:	2c01      	cmp	r4, #1
    915c:	d1e3      	bne.n	9126 <clock_stop+0xa>
            if (p_clk_src != NULL)
    915e:	b125      	cbz	r5, 916a <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9160:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    9164:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    9168:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    916a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    916e:	e012      	b.n	9196 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    9170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9174:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    9176:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    917a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    917e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9182:	6058      	str	r0, [r3, #4]
}
    9184:	e7dc      	b.n	9140 <clock_stop+0x24>
            if (p_clk_src != NULL)
    9186:	b125      	cbz	r5, 9192 <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9188:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    918c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    9190:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9192:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    9196:	03db      	lsls	r3, r3, #15
    9198:	d5c5      	bpl.n	9126 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    919a:	b92d      	cbnz	r5, 91a8 <clock_stop+0x8c>
    919c:	2001      	movs	r0, #1
    919e:	f7ff ffbb 	bl	9118 <nrfx_busy_wait>
    91a2:	3f01      	subs	r7, #1
    91a4:	d1d8      	bne.n	9158 <clock_stop+0x3c>
    91a6:	e7be      	b.n	9126 <clock_stop+0xa>
    91a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91ac:	2b01      	cmp	r3, #1
    91ae:	d0f5      	beq.n	919c <clock_stop+0x80>
    91b0:	e7b9      	b.n	9126 <clock_stop+0xa>

000091b2 <nrfx_clock_enable>:
{
    91b2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    91b4:	2000      	movs	r0, #0
    91b6:	f7f8 fcc3 	bl	1b40 <arch_irq_is_enabled>
    91ba:	b908      	cbnz	r0, 91c0 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    91bc:	f7f8 fc9c 	bl	1af8 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    91c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    91c4:	2200      	movs	r2, #0
    91c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    91ca:	bd08      	pop	{r3, pc}

000091cc <nrfx_clock_start>:
{
    91cc:	b508      	push	{r3, lr}
    switch (domain)
    91ce:	b110      	cbz	r0, 91d6 <nrfx_clock_start+0xa>
    91d0:	2801      	cmp	r0, #1
    91d2:	d028      	beq.n	9226 <nrfx_clock_start+0x5a>
}
    91d4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    91d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    91da:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    91de:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    91e2:	03c9      	lsls	r1, r1, #15
    91e4:	d40b      	bmi.n	91fe <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    91e6:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    91ea:	07d0      	lsls	r0, r2, #31
    91ec:	d50c      	bpl.n	9208 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    91ee:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    91f2:	0792      	lsls	r2, r2, #30
    91f4:	d105      	bne.n	9202 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    91f6:	2202      	movs	r2, #2
    91f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    91fc:	e7ea      	b.n	91d4 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    91fe:	0791      	lsls	r1, r2, #30
    9200:	d002      	beq.n	9208 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9202:	2000      	movs	r0, #0
    9204:	f7ff ff8a 	bl	911c <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    920c:	2200      	movs	r2, #0
    920e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9212:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9216:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    921a:	2202      	movs	r2, #2
    921c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9220:	2201      	movs	r2, #1
    9222:	609a      	str	r2, [r3, #8]
}
    9224:	e7d6      	b.n	91d4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    922a:	2200      	movs	r2, #0
    922c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9230:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9234:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9238:	6018      	str	r0, [r3, #0]
}
    923a:	e7cb      	b.n	91d4 <nrfx_clock_start+0x8>

0000923c <nrfx_clock_stop>:
    clock_stop(domain);
    923c:	f7ff bf6e 	b.w	911c <clock_stop>

00009240 <nrf_gpio_reconfigure>:
{
    9240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9242:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9244:	a801      	add	r0, sp, #4
{
    9246:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    924a:	4617      	mov	r7, r2
    924c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    924e:	f7fb fb61 	bl	4914 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9252:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9254:	2f00      	cmp	r7, #0
    9256:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    925a:	bf14      	ite	ne
    925c:	2302      	movne	r3, #2
    925e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9260:	2900      	cmp	r1, #0
    9262:	bf18      	it	ne
    9264:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9268:	2d00      	cmp	r5, #0
    926a:	bf14      	ite	ne
    926c:	f04f 0c0c 	movne.w	ip, #12
    9270:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9274:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9276:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    927a:	bf14      	ite	ne
    927c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    9280:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9284:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9286:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    928a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    928e:	bf14      	ite	ne
    9290:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    9294:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9298:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    929c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    92a0:	b101      	cbz	r1, 92a4 <nrf_gpio_reconfigure+0x64>
    92a2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    92a4:	b10f      	cbz	r7, 92aa <nrf_gpio_reconfigure+0x6a>
    92a6:	783f      	ldrb	r7, [r7, #0]
    92a8:	007f      	lsls	r7, r7, #1
    92aa:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    92ac:	b10d      	cbz	r5, 92b2 <nrf_gpio_reconfigure+0x72>
    92ae:	782d      	ldrb	r5, [r5, #0]
    92b0:	00ad      	lsls	r5, r5, #2
    92b2:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    92b4:	b10c      	cbz	r4, 92ba <nrf_gpio_reconfigure+0x7a>
    92b6:	7822      	ldrb	r2, [r4, #0]
    92b8:	0214      	lsls	r4, r2, #8
    92ba:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    92bc:	b10e      	cbz	r6, 92c2 <nrf_gpio_reconfigure+0x82>
    92be:	7836      	ldrb	r6, [r6, #0]
    92c0:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    92c2:	432c      	orrs	r4, r5
    92c4:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    92c6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    92ca:	b003      	add	sp, #12
    92cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000092ce <nrf_gpio_cfg_sense_set>:
{
    92ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    92d0:	f10d 030f 	add.w	r3, sp, #15
    92d4:	9301      	str	r3, [sp, #4]
    92d6:	2300      	movs	r3, #0
{
    92d8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    92dc:	9300      	str	r3, [sp, #0]
    92de:	461a      	mov	r2, r3
    92e0:	4619      	mov	r1, r3
    92e2:	f7ff ffad 	bl	9240 <nrf_gpio_reconfigure>
}
    92e6:	b005      	add	sp, #20
    92e8:	f85d fb04 	ldr.w	pc, [sp], #4

000092ec <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
    92ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    92f0:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    92f2:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    92f4:	4350      	muls	r0, r2
    92f6:	4770      	bx	lr

000092f8 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    92f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    92fc:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    92fe:	4770      	bx	lr

00009300 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    9300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9304:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    9306:	4770      	bx	lr

00009308 <nrf_gpio_cfg_default>:
{
    9308:	b507      	push	{r0, r1, r2, lr}
    930a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    930c:	a801      	add	r0, sp, #4
    930e:	f7fb fe9b 	bl	5048 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9312:	9b01      	ldr	r3, [sp, #4]
    9314:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9318:	2202      	movs	r2, #2
    931a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    931e:	b003      	add	sp, #12
    9320:	f85d fb04 	ldr.w	pc, [sp], #4

00009324 <nrf_gpio_pin_write>:
{
    9324:	b507      	push	{r0, r1, r2, lr}
    9326:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9328:	a801      	add	r0, sp, #4
    if (value == 0)
    932a:	b949      	cbnz	r1, 9340 <nrf_gpio_pin_write+0x1c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    932c:	f7fb fe8c 	bl	5048 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9330:	9a01      	ldr	r2, [sp, #4]
    9332:	2301      	movs	r3, #1
    9334:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    9336:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    933a:	b003      	add	sp, #12
    933c:	f85d fb04 	ldr.w	pc, [sp], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9340:	f7fb fe82 	bl	5048 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9344:	9a01      	ldr	r2, [sp, #4]
    9346:	2301      	movs	r3, #1
    9348:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    934a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    934e:	e7f4      	b.n	933a <nrf_gpio_pin_write+0x16>

00009350 <set_ss_pin_state>:
{
    9350:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    9352:	7fc0      	ldrb	r0, [r0, #31]
    9354:	28ff      	cmp	r0, #255	; 0xff
    9356:	d006      	beq.n	9366 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    9358:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    935a:	079b      	lsls	r3, r3, #30
    935c:	bf58      	it	pl
    935e:	f081 0101 	eorpl.w	r1, r1, #1
    9362:	f7ff bfdf 	b.w	9324 <nrf_gpio_pin_write>
}
    9366:	4770      	bx	lr

00009368 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9368:	f7fc b81a 	b.w	53a0 <_DoInit>

0000936c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    936c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    936e:	f7ff fffb 	bl	9368 <SEGGER_RTT_Init>

	return 0;
}
    9372:	2000      	movs	r0, #0
    9374:	bd08      	pop	{r3, pc}

00009376 <z_device_state_init>:
}
    9376:	4770      	bx	lr

00009378 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9378:	b138      	cbz	r0, 938a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    937a:	68c3      	ldr	r3, [r0, #12]
    937c:	8818      	ldrh	r0, [r3, #0]
    937e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9382:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    9386:	4258      	negs	r0, r3
    9388:	4158      	adcs	r0, r3
}
    938a:	4770      	bx	lr

0000938c <z_early_memset>:
	(void) memset(dst, c, n);
    938c:	f7fd be5c 	b.w	7048 <memset>

00009390 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9390:	f7fd be4f 	b.w	7032 <memcpy>

00009394 <k_is_in_isr>:
    9394:	f3ef 8005 	mrs	r0, IPSR
}
    9398:	3800      	subs	r0, #0
    939a:	bf18      	it	ne
    939c:	2001      	movne	r0, #1
    939e:	4770      	bx	lr

000093a0 <z_impl_k_thread_name_set>:
}
    93a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
    93a4:	4770      	bx	lr

000093a6 <k_thread_name_get>:
}
    93a6:	2000      	movs	r0, #0
    93a8:	4770      	bx	lr

000093aa <z_impl_k_thread_start>:
	z_sched_start(thread);
    93aa:	f7fc bda5 	b.w	5ef8 <z_sched_start>

000093ae <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    93ae:	b508      	push	{r3, lr}
	__asm__ volatile(
    93b0:	f04f 0220 	mov.w	r2, #32
    93b4:	f3ef 8311 	mrs	r3, BASEPRI
    93b8:	f382 8812 	msr	BASEPRI_MAX, r2
    93bc:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    93c0:	f7f8 fb54 	bl	1a6c <arch_cpu_idle>
    93c4:	e7f4      	b.n	93b0 <idle+0x2>

000093c6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    93c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    93ca:	428b      	cmp	r3, r1
    93cc:	d001      	beq.n	93d2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    93ce:	f7fc be03 	b.w	5fd8 <z_set_prio>
}
    93d2:	2000      	movs	r0, #0
    93d4:	4770      	bx	lr

000093d6 <z_impl_k_mutex_init>:
{
    93d6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    93d8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    93da:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    93de:	e9c3 3300 	strd	r3, r3, [r3]
}
    93e2:	4770      	bx	lr

000093e4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    93e4:	b13a      	cbz	r2, 93f6 <z_impl_k_sem_init+0x12>
    93e6:	428a      	cmp	r2, r1
    93e8:	d305      	bcc.n	93f6 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    93ea:	e9c0 1202 	strd	r1, r2, [r0, #8]
    93ee:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    93f2:	2000      	movs	r0, #0
    93f4:	4770      	bx	lr
		return -EINVAL;
    93f6:	f06f 0015 	mvn.w	r0, #21
}
    93fa:	4770      	bx	lr

000093fc <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    93fc:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    93fe:	2301      	movs	r3, #1
    9400:	408b      	lsls	r3, r1
    9402:	ea22 0303 	bic.w	r3, r2, r3
    9406:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    9408:	fa22 f001 	lsr.w	r0, r2, r1
}
    940c:	f000 0001 	and.w	r0, r0, #1
    9410:	4770      	bx	lr

00009412 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    9412:	b120      	cbz	r0, 941e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    9414:	2200      	movs	r2, #0
    9416:	4611      	mov	r1, r2
    9418:	3088      	adds	r0, #136	; 0x88
    941a:	f000 b8ea 	b.w	95f2 <z_sched_wake>
}
    941e:	4770      	bx	lr

00009420 <k_work_submit_to_queue>:
{
    9420:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9422:	9001      	str	r0, [sp, #4]
    9424:	4608      	mov	r0, r1
    9426:	f04f 0320 	mov.w	r3, #32
    942a:	f3ef 8511 	mrs	r5, BASEPRI
    942e:	f383 8812 	msr	BASEPRI_MAX, r3
    9432:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    9436:	a901      	add	r1, sp, #4
    9438:	f7fc fb92 	bl	5b60 <submit_to_queue_locked>
    943c:	4604      	mov	r4, r0
	__asm__ volatile(
    943e:	f385 8811 	msr	BASEPRI, r5
    9442:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    9446:	2800      	cmp	r0, #0
    9448:	dd09      	ble.n	945e <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
    944a:	f04f 0320 	mov.w	r3, #32
    944e:	f3ef 8011 	mrs	r0, BASEPRI
    9452:	f383 8812 	msr	BASEPRI_MAX, r3
    9456:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    945a:	f000 f825 	bl	94a8 <z_reschedule_irqlock>
}
    945e:	4620      	mov	r0, r4
    9460:	b003      	add	sp, #12
    9462:	bd30      	pop	{r4, r5, pc}

00009464 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    9464:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9468:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    946a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    946c:	2300      	movs	r3, #0
	node->prev = NULL;
    946e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    9472:	4770      	bx	lr

00009474 <unpend_thread_no_timeout>:
{
    9474:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    9476:	f7ff fff5 	bl	9464 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    947a:	7b43      	ldrb	r3, [r0, #13]
    947c:	f023 0302 	bic.w	r3, r3, #2
    9480:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    9482:	2300      	movs	r3, #0
    9484:	6083      	str	r3, [r0, #8]
}
    9486:	bd08      	pop	{r3, pc}

00009488 <z_unpend_thread_no_timeout>:
{
    9488:	b508      	push	{r3, lr}
    948a:	f04f 0320 	mov.w	r3, #32
    948e:	f3ef 8111 	mrs	r1, BASEPRI
    9492:	f383 8812 	msr	BASEPRI_MAX, r3
    9496:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    949a:	f7ff ffeb 	bl	9474 <unpend_thread_no_timeout>
	__asm__ volatile(
    949e:	f381 8811 	msr	BASEPRI, r1
    94a2:	f3bf 8f6f 	isb	sy
}
    94a6:	bd08      	pop	{r3, pc}

000094a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    94a8:	4603      	mov	r3, r0
    94aa:	b920      	cbnz	r0, 94b6 <z_reschedule_irqlock+0xe>
    94ac:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    94b0:	b90a      	cbnz	r2, 94b6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    94b2:	f7f8 bb8b 	b.w	1bcc <arch_swap>
    94b6:	f383 8811 	msr	BASEPRI, r3
    94ba:	f3bf 8f6f 	isb	sy
}
    94be:	4770      	bx	lr

000094c0 <z_reschedule_unlocked>:
	__asm__ volatile(
    94c0:	f04f 0320 	mov.w	r3, #32
    94c4:	f3ef 8011 	mrs	r0, BASEPRI
    94c8:	f383 8812 	msr	BASEPRI_MAX, r3
    94cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    94d0:	f7ff bfea 	b.w	94a8 <z_reschedule_irqlock>

000094d4 <z_priq_dumb_best>:
{
    94d4:	4603      	mov	r3, r0
	return list->head == list;
    94d6:	6800      	ldr	r0, [r0, #0]
}
    94d8:	4283      	cmp	r3, r0
    94da:	bf08      	it	eq
    94dc:	2000      	moveq	r0, #0
    94de:	4770      	bx	lr

000094e0 <z_ready_thread>:
{
    94e0:	b510      	push	{r4, lr}
    94e2:	f04f 0320 	mov.w	r3, #32
    94e6:	f3ef 8411 	mrs	r4, BASEPRI
    94ea:	f383 8812 	msr	BASEPRI_MAX, r3
    94ee:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    94f2:	f7fc fccb 	bl	5e8c <ready_thread>
	__asm__ volatile(
    94f6:	f384 8811 	msr	BASEPRI, r4
    94fa:	f3bf 8f6f 	isb	sy
}
    94fe:	bd10      	pop	{r4, pc}

00009500 <z_thread_timeout>:
{
    9500:	b510      	push	{r4, lr}
    9502:	4601      	mov	r1, r0
	__asm__ volatile(
    9504:	f04f 0320 	mov.w	r3, #32
    9508:	f3ef 8411 	mrs	r4, BASEPRI
    950c:	f383 8812 	msr	BASEPRI_MAX, r3
    9510:	f3bf 8f6f 	isb	sy
		if (!killed) {
    9514:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    9518:	f013 0f28 	tst.w	r3, #40	; 0x28
    951c:	d10d      	bne.n	953a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    951e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9522:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    9524:	b10b      	cbz	r3, 952a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    9526:	f7ff ffa5 	bl	9474 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    952a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    952e:	f023 0314 	bic.w	r3, r3, #20
    9532:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    9536:	f7fc fca9 	bl	5e8c <ready_thread>
	__asm__ volatile(
    953a:	f384 8811 	msr	BASEPRI, r4
    953e:	f3bf 8f6f 	isb	sy
}
    9542:	bd10      	pop	{r4, pc}

00009544 <add_to_waitq_locked>:
{
    9544:	b538      	push	{r3, r4, r5, lr}
    9546:	4604      	mov	r4, r0
    9548:	460d      	mov	r5, r1
	unready_thread(thread);
    954a:	f7fc fcf3 	bl	5f34 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    954e:	7b63      	ldrb	r3, [r4, #13]
    9550:	f043 0302 	orr.w	r3, r3, #2
    9554:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9556:	b195      	cbz	r5, 957e <add_to_waitq_locked+0x3a>
    9558:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    955a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    955c:	429d      	cmp	r5, r3
    955e:	d015      	beq.n	958c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9560:	b1a3      	cbz	r3, 958c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    9562:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    9566:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    956a:	4291      	cmp	r1, r2
    956c:	d008      	beq.n	9580 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    956e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    9570:	2a00      	cmp	r2, #0
    9572:	dd05      	ble.n	9580 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    9574:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9576:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    957a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    957c:	605c      	str	r4, [r3, #4]
}
    957e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    9580:	686a      	ldr	r2, [r5, #4]
    9582:	4293      	cmp	r3, r2
    9584:	d002      	beq.n	958c <add_to_waitq_locked+0x48>
    9586:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9588:	2b00      	cmp	r3, #0
    958a:	d1ec      	bne.n	9566 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    958c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    958e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9592:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9594:	606c      	str	r4, [r5, #4]
}
    9596:	e7f2      	b.n	957e <add_to_waitq_locked+0x3a>

00009598 <z_unpend1_no_timeout>:
{
    9598:	b510      	push	{r4, lr}
	__asm__ volatile(
    959a:	f04f 0320 	mov.w	r3, #32
    959e:	f3ef 8411 	mrs	r4, BASEPRI
    95a2:	f383 8812 	msr	BASEPRI_MAX, r3
    95a6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    95aa:	f7ff ff93 	bl	94d4 <z_priq_dumb_best>
		if (thread != NULL) {
    95ae:	4601      	mov	r1, r0
    95b0:	b108      	cbz	r0, 95b6 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    95b2:	f7ff ff5f 	bl	9474 <unpend_thread_no_timeout>
	__asm__ volatile(
    95b6:	f384 8811 	msr	BASEPRI, r4
    95ba:	f3bf 8f6f 	isb	sy
}
    95be:	4608      	mov	r0, r1
    95c0:	bd10      	pop	{r4, pc}

000095c2 <z_unpend_first_thread>:
{
    95c2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    95c4:	f04f 0320 	mov.w	r3, #32
    95c8:	f3ef 8511 	mrs	r5, BASEPRI
    95cc:	f383 8812 	msr	BASEPRI_MAX, r3
    95d0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    95d4:	f7ff ff7e 	bl	94d4 <z_priq_dumb_best>
		if (thread != NULL) {
    95d8:	4604      	mov	r4, r0
    95da:	b120      	cbz	r0, 95e6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    95dc:	f7ff ff4a 	bl	9474 <unpend_thread_no_timeout>
    95e0:	3018      	adds	r0, #24
    95e2:	f000 f823 	bl	962c <z_abort_timeout>
	__asm__ volatile(
    95e6:	f385 8811 	msr	BASEPRI, r5
    95ea:	f3bf 8f6f 	isb	sy
}
    95ee:	4620      	mov	r0, r4
    95f0:	bd38      	pop	{r3, r4, r5, pc}

000095f2 <z_sched_wake>:
{
    95f2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    95f4:	f04f 0320 	mov.w	r3, #32
    95f8:	f3ef 8511 	mrs	r5, BASEPRI
    95fc:	f383 8812 	msr	BASEPRI_MAX, r3
    9600:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    9604:	f7ff ff66 	bl	94d4 <z_priq_dumb_best>
		if (thread != NULL) {
    9608:	4604      	mov	r4, r0
    960a:	b150      	cbz	r0, 9622 <z_sched_wake+0x30>
    960c:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    960e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    9610:	f7ff ff30 	bl	9474 <unpend_thread_no_timeout>
    9614:	3018      	adds	r0, #24
    9616:	f000 f809 	bl	962c <z_abort_timeout>
			ready_thread(thread);
    961a:	4620      	mov	r0, r4
    961c:	f7fc fc36 	bl	5e8c <ready_thread>
			ret = true;
    9620:	2001      	movs	r0, #1
	__asm__ volatile(
    9622:	f385 8811 	msr	BASEPRI, r5
    9626:	f3bf 8f6f 	isb	sy
}
    962a:	bd38      	pop	{r3, r4, r5, pc}

0000962c <z_abort_timeout>:
{
    962c:	b510      	push	{r4, lr}
	__asm__ volatile(
    962e:	f04f 0220 	mov.w	r2, #32
    9632:	f3ef 8411 	mrs	r4, BASEPRI
    9636:	f382 8812 	msr	BASEPRI_MAX, r2
    963a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    963e:	6803      	ldr	r3, [r0, #0]
    9640:	b13b      	cbz	r3, 9652 <z_abort_timeout+0x26>
			remove_timeout(to);
    9642:	f7fc fec1 	bl	63c8 <remove_timeout>
			ret = 0;
    9646:	2000      	movs	r0, #0
	__asm__ volatile(
    9648:	f384 8811 	msr	BASEPRI, r4
    964c:	f3bf 8f6f 	isb	sy
}
    9650:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    9652:	f06f 0015 	mvn.w	r0, #21
    9656:	e7f7      	b.n	9648 <z_abort_timeout+0x1c>

00009658 <z_set_timeout_expiry>:
{
    9658:	b570      	push	{r4, r5, r6, lr}
    965a:	4604      	mov	r4, r0
    965c:	460d      	mov	r5, r1
	__asm__ volatile(
    965e:	f04f 0320 	mov.w	r3, #32
    9662:	f3ef 8611 	mrs	r6, BASEPRI
    9666:	f383 8812 	msr	BASEPRI_MAX, r3
    966a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    966e:	f7fc fe85 	bl	637c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    9672:	2801      	cmp	r0, #1
    9674:	dd05      	ble.n	9682 <z_set_timeout_expiry+0x2a>
    9676:	42a0      	cmp	r0, r4
    9678:	db03      	blt.n	9682 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    967a:	4629      	mov	r1, r5
    967c:	4620      	mov	r0, r4
    967e:	f7fa fad7 	bl	3c30 <sys_clock_set_timeout>
	__asm__ volatile(
    9682:	f386 8811 	msr	BASEPRI, r6
    9686:	f3bf 8f6f 	isb	sy
}
    968a:	bd70      	pop	{r4, r5, r6, pc}

0000968c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    968c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    968e:	f7fc ff8b 	bl	65a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9692:	bd08      	pop	{r3, pc}

00009694 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9694:	f7fc bf88 	b.w	65a8 <sys_clock_tick_get>

00009698 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9698:	b108      	cbz	r0, 969e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    969a:	f7f8 be7d 	b.w	2398 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    969e:	4770      	bx	lr

000096a0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    96a0:	b510      	push	{r4, lr}
    96a2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    96a4:	f7ff ffc2 	bl	962c <z_abort_timeout>

	if (inactive) {
    96a8:	b9b0      	cbnz	r0, 96d8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    96aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    96ac:	b10b      	cbz	r3, 96b2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    96ae:	4620      	mov	r0, r4
    96b0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    96b2:	f104 0018 	add.w	r0, r4, #24
    96b6:	f7ff ff6f 	bl	9598 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    96ba:	b168      	cbz	r0, 96d8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    96bc:	f7ff ff10 	bl	94e0 <z_ready_thread>
	__asm__ volatile(
    96c0:	f04f 0320 	mov.w	r3, #32
    96c4:	f3ef 8011 	mrs	r0, BASEPRI
    96c8:	f383 8812 	msr	BASEPRI_MAX, r3
    96cc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    96d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    96d4:	f7ff bee8 	b.w	94a8 <z_reschedule_irqlock>
    96d8:	bd10      	pop	{r4, pc}

000096da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    96da:	4770      	bx	lr

000096dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    96dc:	f7fa bfa8 	b.w	4630 <SystemInit>
